/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-03-22 10:47:03.488320
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((-0.999998735952397)*(((((0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(IKcos(j[0]))))+(((-0.999999680000154)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((-0.000799999744000123)*(IKcos(j[0]))))+(((-0.999999680000154)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.00158999799016431)*(((((((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5])))));
eerot[1]=((((((((-0.00158999799016431)*(((((0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(IKcos(j[0]))))+(((-0.999999680000154)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.00158999799016431)*(((((-0.000799999744000123)*(IKcos(j[0]))))+(((-0.999999680000154)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.00158999799016431)*(((((((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[2]=((((((((-0.999999680000154)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000799999744000123)*(((((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((-0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4])))));
eetrans[0]=((((((((-0.000483759694504975)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.000483759694504975)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-3.99999838848103e-5)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.303999617864764)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.303999617864764)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-8.87199206400381e-5)*(IKcos(j[0]))))+(((((((((((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.28939138827778e-13)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.28939138827778e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.43986879765898e-10)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.43986879765898e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.28939138827778e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-2.28939138827778e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.43986879765898e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.43986879765898e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.15189612557249e-13)*(IKsin(j[0]))))+(((-9.2151690045799e-17)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((-2.86173923534723e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-2.86173923534723e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43987015696561e-10)*(IKsin(j[0]))))+(((-1.15189612557249e-13)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.86173923534723e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-2.86173923534723e-10)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.79983599707373e-7)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.79983599707373e-7)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.79983599707373e-7)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.79983599707373e-7)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((((((1.15189612557249e-13)*(IKcos(j[0]))))+(((1.43987015696561e-10)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-1.83151311062223e-16)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.83151311062223e-16)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.83151311062223e-16)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.83151311062223e-16)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.15189503812719e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.15189503812719e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.15189503812719e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.15189503812719e-13)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.303999617864764)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.303999617864764)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.6121591641092e-7)*(IKsin(j[0]))))+(((-0.00032651989551365)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((((((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.43986879765898e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.43986879765898e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.79983769620701e-7)*(IKsin(j[0]))))+(((-1.43987015696561e-10)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((2.28939138827778e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((2.28939138827778e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43986879765898e-10)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.43986879765898e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.28939138827778e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((2.28939138827778e-13)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.000327999791523316)*(IKsin(j[0]))))+(((-0.409999739404145)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0499999798560129)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-3.99999838848103e-5)*(((((0.999998415952955)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((0.999998415952955)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.000483759694504975)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.000483759694504975)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.109999960800048)*(IKsin(j[0]))))+(((((((-0.0499999798560129)*(((((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((-0.000799998732762364)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((1.27199798509216e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((-0.000799998732762364)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4])))));
eerot[3]=((((((((0.00158999799016431)*(((((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((0.999999680000154)*(IKcos(j[0]))))+(((-0.000799999744000123)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.00158999799016431)*(((((((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((-0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.999999680000154)*(IKcos(j[0]))))+(((-0.000799999744000123)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999998735952397)*(((((((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[4]=((((((((-0.999998735952397)*(((((0.999999680000154)*(IKcos(j[0]))))+(((-0.000799999744000123)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999998735952397)*(((((((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.00158999799016431)*(((((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.00158999799016431)*(((((0.999999680000154)*(IKcos(j[0]))))+(((-0.000799999744000123)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.00158999799016431)*(((((((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[5]=((((((((-0.000799999744000123)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.999999680000154)*(((((0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4])))));
eetrans[1]=((((((((((((-1.83151311062223e-16)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.83151311062223e-16)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.15189612557249e-13)*(IKsin(j[0]))))+(((-1.43987015696561e-10)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((1.15189503812719e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((1.15189503812719e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.15189503812719e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.15189503812719e-13)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.83151311062223e-16)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.83151311062223e-16)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((((((2.28939138827778e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.28939138827778e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43986879765898e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.43986879765898e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.43986879765898e-10)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.43986879765898e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.28939138827778e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.28939138827778e-13)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.79983769620701e-7)*(IKcos(j[0]))))+(((-1.43987015696561e-10)*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.0499999798560129)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((-0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((((((-2.28939138827778e-13)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.28939138827778e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-2.28939138827778e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-2.28939138827778e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.15189612557249e-13)*(IKcos(j[0]))))+(((-9.2151690045799e-17)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((1.43986879765898e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.43986879765898e-10)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.43986879765898e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.43986879765898e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-3.99999838848103e-5)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0015899974813652)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999998415952955)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((0.999998415952955)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999998415952955)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.0015899974813652)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0015899974813652)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((((((1.79983599707373e-7)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.79983599707373e-7)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-2.86173923534723e-10)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.86173923534723e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.79983599707373e-7)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.79983599707373e-7)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.43987015696561e-10)*(IKcos(j[0]))))+(((-1.15189612557249e-13)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-2.86173923534723e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-2.86173923534723e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((-2.6121591641092e-7)*(IKcos(j[0]))))+(((-0.00032651989551365)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.303999617864764)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.303999617864764)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.303999617864764)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.303999617864764)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.109999960800048)*(IKcos(j[0]))))+(((((((-0.000327999791523316)*(IKcos(j[0]))))+(((-0.409999739404145)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0499999798560129)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-8.87199206400381e-5)*(IKsin(j[0]))))+(((((((-0.000483759694504975)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.000483759694504975)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-3.99999838848103e-5)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.27199798509216e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((1.27199798509216e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.27199798509216e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799998732762364)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799998732762364)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000799998732762364)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000483759694504975)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000483759694504975)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2])))));
eerot[6]=((((((((0.00158999799016431)*(((((0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.999998095953615)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.00158999697256625)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((-0.999998095953615)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((-0.00158999697256625)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((-0.0015899974813652)*(IKcos(j[1]))))+(((-1.27199798509216e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((1.27199798509216e-6)*(IKcos(j[1]))))+(((-0.0015899974813652)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999799016431)*(((((0.999998415952955)*(IKsin(j[1]))))+(((-0.000799998732762364)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((-0.999998415952955)*(IKcos(j[1]))))+(((-0.000799998732762364)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((-0.0015899974813652)*(IKcos(j[1]))))+(((-1.27199798509216e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((-0.999998415952955)*(IKcos(j[1]))))+(((-0.000799998732762364)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((1.27199798509216e-6)*(IKcos(j[1]))))+(((-0.0015899974813652)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((0.999998415952955)*(IKsin(j[1]))))+(((-0.000799998732762364)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))*(IKsin(j[5]))))+(((((((-0.999998735952397)*(((((-0.999999680000154)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999697256625)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.999998095953615)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((-0.00158999697256625)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998095953615)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[5])))));
eerot[7]=((((((((-0.00158999799016431)*(((((-0.0015899974813652)*(IKcos(j[1]))))+(((-1.27199798509216e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((0.999998415952955)*(IKsin(j[1]))))+(((-0.000799998732762364)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((1.27199798509216e-6)*(IKcos(j[1]))))+(((-0.0015899974813652)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999799016431)*(((((-0.999998415952955)*(IKcos(j[1]))))+(((-0.000799998732762364)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))*(IKsin(j[5]))))+(((((((-0.999998735952397)*(((((0.999999680000154)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.999998095953615)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.00158999697256625)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((-0.999998095953615)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((-0.00158999697256625)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((-0.999998735952397)*(((((-0.0015899974813652)*(IKcos(j[1]))))+(((-1.27199798509216e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((-0.999998415952955)*(IKcos(j[1]))))+(((-0.000799998732762364)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((1.27199798509216e-6)*(IKcos(j[1]))))+(((-0.0015899974813652)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((0.999998415952955)*(IKsin(j[1]))))+(((-0.000799998732762364)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))*(IKcos(j[5]))))+(((((((-0.00158999799016431)*(((((-0.999999680000154)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999697256625)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.999998095953615)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((-0.00158999697256625)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998095953615)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[5])))));
eerot[8]=((((((((-0.000799999744000123)*(((((0.999998095953615)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999697256625)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-0.000799999744000123)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.999999680000154)*(((((-0.999998095953615)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((-0.00158999697256625)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.999999680000154)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4])))));
eetrans[2]=((0.448)+(((-0.409999870604041)*(IKsin(j[1]))))+(((((((((((1.79983542112648e-7)*(IKcos(j[1]))))+(((1.43986833690119e-10)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-2.28939065567289e-13)*(IKsin(j[1]))))+(((-2.86173831959111e-10)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.79983542112648e-7)*(IKsin(j[1]))))+(((-1.43986833690119e-10)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((2.86173831959111e-10)*(IKsin(j[1]))))+(((-2.28939065567289e-13)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.79983884810314e-7)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983884810314e-7)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.79983884810314e-7)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983884810314e-7)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((((((1.79983884810314e-7)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.79983884810314e-7)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.79983884810314e-7)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.79983884810314e-7)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.83151252453831e-16)*(IKcos(j[1]))))+(((-2.28939065567289e-13)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.43986833690119e-10)*(IKcos(j[1]))))+(((-1.15189466952095e-13)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.43986833690119e-10)*(IKsin(j[1]))))+(((1.15189466952095e-13)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.83151252453831e-16)*(IKsin(j[1]))))+(((2.28939065567289e-13)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((-1.43987107848251e-10)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.83151252453831e-16)*(IKsin(j[1]))))+(((-2.28939065567289e-13)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.15189466952095e-13)*(IKsin(j[1]))))+(((1.43986833690119e-10)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.15189466952095e-13)*(IKcos(j[1]))))+(((1.43986833690119e-10)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.83151252453831e-16)*(IKcos(j[1]))))+(((2.28939065567289e-13)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-3.99999838848103e-5)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((1.15189466952095e-13)*(IKsin(j[1]))))+(((-9.21515735616761e-17)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.46521001963065e-19)*(IKcos(j[1]))))+(((1.83151252453831e-16)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.46521001963065e-19)*(IKsin(j[1]))))+(((-1.83151252453831e-16)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43987107848251e-10)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.15189466952095e-13)*(IKcos(j[1]))))+(((9.21515735616761e-17)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00032652)*(IKcos(j[1]))))+(((((((0.303999520584933)*(IKsin(j[1]))))+(((-0.000243199616467947)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-3.99999838848103e-5)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((0.999998095953615)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.00158999697256625)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-3.87007631761558e-7)*(IKsin(j[1]))))+(((-0.000483759539701947)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0499999798560129)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((6.39998781410314e-7)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((1.0175980624424e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.0499999798560129)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((-0.999998095953615)*(IKcos(j[1]))))+(((-0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.271997578053e-6)*(IKcos(j[1]))))+(((-0.00158999697256625)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.000483759539701947)*(IKsin(j[1]))))+(((-3.87007631761558e-7)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.000243199616467947)*(IKsin(j[1]))))+(((0.303999520584933)*(IKcos(j[1]))))))*(IKsin(j[2])))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.00158999799016431)*r01))+(((-0.999998735952397)*r00)));
new_r01=((((0.00158999799016431)*r00))+(((-0.999998735952397)*r01)));
new_r02=r02;
new_px=((((-0.0499999958560039)*r02))+px);
new_r10=((((-0.00158999799016431)*r11))+(((-0.999998735952397)*r10)));
new_r11=((((-0.999998735952397)*r11))+(((0.00158999799016431)*r10)));
new_r12=r12;
new_py=((((-0.0499999958560039)*r12))+py);
new_r20=((((-0.999998735952397)*r20))+(((-0.00158999799016431)*r21)));
new_r21=((((-0.999998735952397)*r21))+(((0.00158999799016431)*r20)));
new_r22=r22;
new_pz=((-0.448)+(((-0.0499999958560039)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x0=((1.0)*px);
IkReal x1=((1.0)*pz);
IkReal x2=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x2))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x1)));
rxp0_2=((((-1.0)*r10*x0))+((py*r00)));
rxp1_0=((((-1.0)*r21*x2))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x1)));
rxp1_2=((((-1.0)*r11*x0))+((py*r01)));
rxp2_0=((((-1.0)*r22*x2))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x1)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x0)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.63112962598989)+(((-8.02310638833991)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.63112962598989)+(((-8.02310638833991)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3=IKasin(((1.63112962598989)+(((-8.02310638833991)*pp))));
j2array[0]=((1.57239256852053)+(((-1.0)*x3)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((4.71398522211033)+x3);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[2];
IkReal x4=px*px*px;
IkReal x5=py*py;
IkReal x6=py*py*py;
IkReal x7=px*px;
IkReal x8=(py*x7);
IkReal x9=(px*x5);
j0eval[0]=(x4+x9+(((-1250.0)*x6))+(((-1250.0)*x8)));
j0eval[1]=IKsign(((((-1.43990169615618e-6)*x8))+(((-1.43990169615618e-6)*x6))+(((1.15192135692494e-9)*x4))+(((1.15192135692494e-9)*x9))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x10=py*py;
IkReal x11=py*py*py;
IkReal x12=px*px;
IkReal x13=px*px*px;
IkReal x14=(py*x12);
IkReal x15=(px*x10);
j0eval[0]=((((-1250.0)*x13))+(((-1250.0)*x15))+(((-1.0)*x11))+(((-1.0)*x14)));
j0eval[1]=IKsign(((((-1.15192135692494e-9)*x14))+(((-1.15192135692494e-9)*x11))+(((-1.43990169615618e-6)*x15))+(((-1.43990169615618e-6)*x13))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((844.912608820353)+(((-1.0)*sj2))+(((-626.471000356706)*cj2))+(((116.126481659412)*(sj2*sj2)))+(((116.126481659412)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x16=((-0.00032652)+(((-0.151999567696146)*sj2))+(((0.000363679731622504)*cj2)));
IkReal x17=((0.409999870604041)+(((-0.151999567696146)*cj2))+(((-0.000363679731622504)*sj2)));
CheckValue<IkReal> x20 = IKatan2WithCheck(IkReal(x16),IkReal(x17),IKFAST_ATAN2_MAGTHRESH);
if(!x20.valid){
continue;
}
IkReal x18=((1.0)*(x20.value));
if((((x17*x17)+(x16*x16))) < -0.00001)
continue;
CheckValue<IkReal> x21=IKPowWithIntegerCheck(IKabs(IKsqrt(((x17*x17)+(x16*x16)))),-1);
if(!x21.valid){
continue;
}
if( ((pz*(x21.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x21.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x19=IKasin((pz*(x21.value)));
j1array[0]=((((-1.0)*x18))+(((-1.0)*x19)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x18))+x19);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x22=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x22;
j0eval[1]=IKsign(x22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x23=pz*pz;
IkReal x24=(cj1*pp);
IkReal x25=((0.999999680000154)*sj1);
IkReal x26=((1250.0)*sj1);
IkReal x27=(cj1*x23);
j0eval[0]=((((-1.0)*x23*x26))+(((-1.0)*x24))+x27+((pp*x26)));
j0eval[1]=IKsign(((((-1.0)*x23*x25))+(((0.000799999744000123)*x27))+(((-0.000799999744000123)*x24))+((pp*x25))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x28=pz*pz;
IkReal x29=(pp*sj1);
IkReal x30=(cj1*pp);
IkReal x31=(sj1*x28);
IkReal x32=(cj1*x28);
j0eval[0]=((((-1.0)*x29))+(((-1250.0)*x30))+x31+(((1250.0)*x32)));
j0eval[1]=IKsign(((((-0.999999680000154)*x30))+(((0.999999680000154)*x32))+(((-0.000799999744000123)*x29))+(((0.000799999744000123)*x31))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x33=pz*pz;
IkReal x34=((((-1.0)*pp))+x33);
IkReal x35=((((-1250.0)*pp))+(((1250.0)*x33)));
IkReal x37 = ((x34*x34)+(x35*x35));
if(IKabs(x37)==0){
continue;
}
IkReal x36=pow(x37,-0.5);
CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(x35),IkReal(x34),IKFAST_ATAN2_MAGTHRESH);
if(!x38.valid){
continue;
}
IkReal gconst0=((-1.0)*(x38.value));
IkReal gconst1=((-1.0)*x35*x36);
IkReal gconst2=(x34*x36);
IkReal x39=pz*pz;
IkReal x40=j1;
CheckValue<IkReal> x43 = IKatan2WithCheck(IkReal(((((-1250.0)*pp))+(((1250.0)*x39)))),IkReal(((((-1.0)*pp))+x39)),IKFAST_ATAN2_MAGTHRESH);
if(!x43.valid){
continue;
}
IkReal x41=x43.value;
IkReal x42=x41;
if(((((x41*x42))+((x40*x41))+((j1*x40))+((j1*x42)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x41*x42))+((x40*x41))+((j1*x40))+((j1*x42)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x44=pz*pz;
IkReal x45=((((-1.0)*pp))+x44);
IkReal x46=x35;
CheckValue<IkReal> x49 = IKatan2WithCheck(IkReal(x46),IkReal(x45),IKFAST_ATAN2_MAGTHRESH);
if(!x49.valid){
continue;
}
IkReal x47=((-1.0)*(x49.value));
IkReal x50 = ((x46*x46)+(x45*x45));
if(IKabs(x50)==0){
continue;
}
IkReal x48=pow(x50,-0.5);
sj1=gconst1;
cj1=gconst2;
j1=x47;
IkReal gconst0=x47;
IkReal gconst1=((-1.0)*x46*x48);
IkReal gconst2=(x45*x48);
IkReal x51=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x51;
j0eval[1]=IKsign(x51);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x52=((0.109999925600077)*gconst1);
IkReal x53=((0.000799999744000123)*gconst2);
IkReal x54=(gconst2*py);
IkReal x55=((0.99999936000041)*pz);
IkReal x56=(cj2*py);
IkReal x57=((0.000243199616467947)*sj2);
IkReal x58=(gconst2*px);
IkReal x59=((0.303999520584933)*sj2);
IkReal x60=((8.87198922496771e-5)*gconst1);
IkReal x61=((0.000799999488000328)*pz);
IkReal x62=(gconst1*px);
IkReal x63=((0.999999680000154)*gconst1);
IkReal x64=(cj2*px);
IkReal x65=(gconst1*py);
IkReal x66=((6.39999590400262e-7)*pz);
CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(((((0.000242079922534437)*x56))+(((-1.0)*px*x52))+(((8.79999409408305e-5)*x58))+((px*x57))+((x61*x65))+(((-1.0)*x58*x61))+(((-1.0)*py*x60))+(((-1.0)*py*x59))+(((7.03999527526644e-8)*x54))+(((-1.9366393802755e-7)*x64))+(((-1.0)*x62*x66))+((x54*x55)))),IkReal(((((-8.79999409408305e-5)*x54))+(((-1.0)*px*x60))+(((-1.0)*px*x59))+(((0.000242079922534437)*x64))+(((1.9366393802755e-7)*x56))+((x61*x62))+(((-1.0)*py*x57))+(((7.03999527526644e-8)*x58))+((py*x52))+((x54*x61))+((x55*x58))+((x65*x66)))),IKFAST_ATAN2_MAGTHRESH);
if(!x67.valid){
continue;
}
CheckValue<IkReal> x68=IKPowWithIntegerCheck(IKsign((((pp*x63))+(((pz*pz)*((x53+(((-1.0)*x63))))))+(((-1.0)*pp*x53)))),-1);
if(!x68.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x67.value)+(((1.5707963267949)*(x68.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x69=IKsin(j0);
IkReal x70=IKcos(j0);
IkReal x71=((0.000799999488000328)*gconst1);
IkReal x72=((5.24799664921893e-7)*gconst1);
IkReal x73=(gconst2*pz);
IkReal x74=((6.39999590400262e-7)*gconst2);
IkReal x75=((0.000799999488000328)*gconst2);
IkReal x76=((6.39999590400262e-7)*gconst1);
IkReal x77=(gconst1*pz);
IkReal x78=((0.000655999581152367)*gconst2);
IkReal x79=((0.819999476440458)*gconst2);
IkReal x80=((0.000655999581152367)*gconst1);
IkReal x81=(py*x69);
IkReal x82=(py*x70);
IkReal x83=(px*x69);
IkReal x84=(px*x70);
IkReal x85=((0.99999936000041)*x84);
evalcond[0]=((-0.109999996575991)+(((0.999999680000154)*x82))+(((-0.000799999744000123)*x84))+(((-0.000799999744000123)*x81))+(((-0.999999680000154)*x83)));
evalcond[1]=((((0.000363679731622504)*gconst2*sj2))+(((-0.00032652)*gconst1))+(((0.000363679731622504)*cj2*gconst1))+(((-0.000799999744000123)*x82))+(((-0.999999680000154)*x81))+(((-0.999999680000154)*x84))+(((-0.409999870604041)*gconst2))+(((0.151999567696146)*cj2*gconst2))+(((-0.151999567696146)*gconst1*sj2))+(((0.000799999744000123)*x83)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x71*x83))+(((-0.999999680000154)*x73))+((x74*x83))+(((0.99999936000041)*gconst1*x81))+(((-0.00024208)*cj2))+(((-1.0)*x74*x82))+(((-0.000799999744000123)*x77))+(((7.19951539231015e-7)*gconst1))+(((-1.0)*x75*x81))+(((-1.0)*x75*x84))+((gconst1*x85))+((x71*x82)));
evalcond[3]=((-0.410000000620062)+(((-7.19951539231015e-7)*gconst2))+(((0.303999617864764)*cj2))+(((-1.0)*x71*x84))+(((-1.0)*x71*x81))+(((-0.999999680000154)*x77))+(((-0.99999936000041)*gconst2*x81))+(((0.000799999744000123)*x73))+((x76*x83))+((x75*x83))+(((-1.0)*x76*x82))+(((-1.0)*gconst2*x85))+(((-1.0)*x75*x82))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((0.000655999791072199)*x73))+(((1.15192209415461e-9)*pz))+(((-1.0)*x80*x84))+(((-1.0)*x80*x81))+(((1.15192172553972e-9)*x83))+(((-1.0)*x72*x82))+((x78*x83))+(((-1.43990215692465e-6)*x84))+(((-1.43990215692465e-6)*x81))+(((-0.819999738840249)*x77))+((x72*x83))+(((-1.0)*x79*x81))+(((-1.0)*x79*x84))+(((-1.0)*pp))+(((-5.90360263062261e-7)*gconst2))+(((-1.0)*x78*x82))+(((-1.15192172553972e-9)*x82)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x935=(gconst2*py);
IkReal x936=((0.000363679615245046)*sj2);
IkReal x937=(gconst1*px);
IkReal x938=((0.000121599615245046)*sj2);
IkReal x939=((0.000121599615245046)*cj2);
IkReal x940=((2.90943692196037e-7)*cj2);
IkReal x941=(gconst1*py);
IkReal x942=(gconst2*px);
IkReal x943=((0.151999519056308)*cj2);
IkReal x944=((2.90943692196037e-7)*sj2);
IkReal x945=((0.151999519056308)*sj2);
IkReal x946=((0.000363679615245046)*cj2);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((-1.0)*x935*x936))+(((0.00032651989551365)*x941))+(((-2.6121591641092e-7)*x937))+((x937*x940))+((x939*x942))+(((8.79999691008071e-5)*py))+((x941*x945))+(((-1.0)*x941*x946))+((x942*x944))+(((-0.000327999791523316)*x942))+(((0.409999739404145)*x935))+(((-1.0)*x937*x938))+(((-1.0)*x935*x943))+(((0.109999961376009)*px)))),IkReal(((((-1.0)*x935*x939))+(((0.00032651989551365)*x937))+(((0.000327999791523316)*x935))+((x938*x941))+((x937*x945))+(((-1.0)*x942*x943))+(((8.79999691008071e-5)*px))+(((0.409999739404145)*x942))+(((-1.0)*x936*x942))+(((-1.0)*x937*x946))+(((-0.109999961376009)*py))+(((-1.0)*x935*x944))+(((-1.0)*x940*x941))+(((2.6121591641092e-7)*x941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x947.value)))+(x948.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x949=IKsin(j0);
IkReal x950=IKcos(j0);
IkReal x951=((0.000799999488000328)*gconst1);
IkReal x952=((5.24799664921893e-7)*gconst1);
IkReal x953=(gconst2*pz);
IkReal x954=((6.39999590400262e-7)*gconst2);
IkReal x955=((0.000799999488000328)*gconst2);
IkReal x956=((6.39999590400262e-7)*gconst1);
IkReal x957=(gconst1*pz);
IkReal x958=((0.000655999581152367)*gconst2);
IkReal x959=((0.819999476440458)*gconst2);
IkReal x960=((0.000655999581152367)*gconst1);
IkReal x961=(py*x949);
IkReal x962=(py*x950);
IkReal x963=(px*x949);
IkReal x964=(px*x950);
IkReal x965=((0.99999936000041)*x964);
evalcond[0]=((-0.109999996575991)+(((-0.000799999744000123)*x964))+(((-0.000799999744000123)*x961))+(((0.999999680000154)*x962))+(((-0.999999680000154)*x963)));
evalcond[1]=((((0.000363679731622504)*gconst2*sj2))+(((0.000799999744000123)*x963))+(((-0.00032652)*gconst1))+(((0.000363679731622504)*cj2*gconst1))+(((-0.000799999744000123)*x962))+(((-0.409999870604041)*gconst2))+(((0.151999567696146)*cj2*gconst2))+(((-0.151999567696146)*gconst1*sj2))+(((-0.999999680000154)*x964))+(((-0.999999680000154)*x961)));
evalcond[2]=(((x954*x963))+(((0.303999617864764)*sj2))+((x951*x962))+((gconst1*x965))+(((-0.000799999744000123)*x957))+(((-0.00024208)*cj2))+(((-1.0)*x955*x961))+(((-1.0)*x955*x964))+(((7.19951539231015e-7)*gconst1))+(((-1.0)*x951*x963))+(((-0.999999680000154)*x953))+(((-1.0)*x954*x962))+(((0.99999936000041)*gconst1*x961)));
evalcond[3]=((-0.410000000620062)+(((-7.19951539231015e-7)*gconst2))+(((0.303999617864764)*cj2))+(((0.000799999744000123)*x953))+(((-1.0)*x956*x962))+(((-0.99999936000041)*gconst2*x961))+((x956*x963))+(((-1.0)*x955*x962))+(((-1.0)*x951*x961))+(((-1.0)*x951*x964))+(((-0.999999680000154)*x957))+(((-1.0)*gconst2*x965))+(((0.00024208)*sj2))+((x955*x963)));
evalcond[4]=((-0.0635841749976017)+(((-0.819999738840249)*x957))+((x952*x963))+(((-1.0)*x960*x961))+(((-1.0)*x960*x964))+(((-1.43990215692465e-6)*x964))+(((-1.43990215692465e-6)*x961))+(((1.15192172553972e-9)*x963))+(((1.15192209415461e-9)*pz))+(((-1.0)*pp))+(((-5.90360263062261e-7)*gconst2))+(((-1.0)*x958*x962))+(((-1.0)*x959*x964))+(((-1.0)*x959*x961))+(((0.000655999791072199)*x953))+(((-1.15192172553972e-9)*x962))+((x958*x963))+(((-1.0)*x952*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x966=pz*pz;
IkReal x967=((((-1.0)*pp))+x966);
IkReal x968=((((1250.0)*x966))+(((-1250.0)*pp)));
IkReal x970 = ((x967*x967)+(x968*x968));
if(IKabs(x970)==0){
continue;
}
IkReal x969=pow(x970,-0.5);
CheckValue<IkReal> x971 = IKatan2WithCheck(IkReal(x968),IkReal(x967),IKFAST_ATAN2_MAGTHRESH);
if(!x971.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x971.value))));
IkReal gconst4=((1.0)*x968*x969);
IkReal gconst5=((-1.0)*x967*x969);
IkReal x972=pz*pz;
IkReal x973=j1;
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal(((((-1250.0)*pp))+(((1250.0)*x972)))),IkReal(((((-1.0)*pp))+x972)),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
IkReal x974=x976.value;
IkReal x975=x974;
if((((9.86960440108936)+((x973*x974))+((j1*x975))+((j1*x973))+(((-3.14159265358979)*x974))+(((-3.14159265358979)*x975))+(((-3.14159265358979)*x973))+(((-3.14159265358979)*j1))+((x974*x975)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x973*x974))+((j1*x975))+((j1*x973))+(((-3.14159265358979)*x974))+(((-3.14159265358979)*x975))+(((-3.14159265358979)*x973))+(((-3.14159265358979)*j1))+((x974*x975)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x977=pz*pz;
IkReal x978=((((-1.0)*pp))+x977);
IkReal x979=x968;
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(x979),IkReal(x978),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
IkReal x980=((1.0)*(x982.value));
IkReal x983 = ((x978*x978)+(x979*x979));
if(IKabs(x983)==0){
continue;
}
IkReal x981=pow(x983,-0.5);
sj1=gconst4;
cj1=gconst5;
j1=((3.14159265)+(((-1.0)*x980)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x980)));
IkReal gconst4=((1.0)*x979*x981);
IkReal gconst5=((-1.0)*x978*x981);
IkReal x984=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x984;
j0eval[1]=IKsign(x984);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x985=((0.000799999744000123)*gconst5);
IkReal x986=(gconst5*px);
IkReal x987=(gconst4*px);
IkReal x988=((6.39999590400262e-7)*pz);
IkReal x989=(cj2*py);
IkReal x990=((0.99999936000041)*pz);
IkReal x991=((0.000243199616467947)*sj2);
IkReal x992=(gconst5*py);
IkReal x993=((0.303999520584933)*sj2);
IkReal x994=((0.000799999488000328)*pz);
IkReal x995=(cj2*px);
IkReal x996=(gconst4*py);
IkReal x997=((0.999999680000154)*gconst4);
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(((((-0.109999925600077)*x987))+((x994*x996))+((x990*x992))+(((-1.0)*py*x993))+((px*x991))+(((0.000242079922534437)*x989))+(((-8.87198922496771e-5)*x996))+(((-1.9366393802755e-7)*x995))+(((8.79999409408305e-5)*x986))+(((7.03999527526644e-8)*x992))+(((-1.0)*x987*x988))+(((-1.0)*x986*x994)))),IkReal(((((7.03999527526644e-8)*x986))+(((-1.0)*px*x993))+((x986*x990))+((x988*x996))+((x992*x994))+(((-1.0)*py*x991))+(((0.109999925600077)*x996))+(((-8.87198922496771e-5)*x987))+(((1.9366393802755e-7)*x989))+(((0.000242079922534437)*x995))+((x987*x994))+(((-8.79999409408305e-5)*x992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
CheckValue<IkReal> x999=IKPowWithIntegerCheck(IKsign(((((pz*pz)*(((((-1.0)*x997))+x985))))+((pp*x997))+(((-1.0)*pp*x985)))),-1);
if(!x999.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x998.value)+(((1.5707963267949)*(x999.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1000=IKsin(j0);
IkReal x1001=IKcos(j0);
IkReal x1002=(gconst4*pz);
IkReal x1003=((5.24799664921893e-7)*gconst4);
IkReal x1004=((0.000799999488000328)*gconst5);
IkReal x1005=((0.000655999581152367)*gconst4);
IkReal x1006=((0.819999476440458)*gconst5);
IkReal x1007=((0.99999936000041)*gconst4);
IkReal x1008=((0.99999936000041)*gconst5);
IkReal x1009=((0.000799999488000328)*gconst4);
IkReal x1010=((0.000655999581152367)*gconst5);
IkReal x1011=(gconst5*pz);
IkReal x1012=((6.39999590400262e-7)*gconst5);
IkReal x1013=((6.39999590400262e-7)*gconst4);
IkReal x1014=(py*x1000);
IkReal x1015=(py*x1001);
IkReal x1016=(px*x1000);
IkReal x1017=(px*x1001);
evalcond[0]=((-0.109999996575991)+(((-0.000799999744000123)*x1017))+(((-0.000799999744000123)*x1014))+(((-0.999999680000154)*x1016))+(((0.999999680000154)*x1015)));
evalcond[1]=((((-0.000799999744000123)*x1015))+(((-0.00032652)*gconst4))+(((0.000363679731622504)*cj2*gconst4))+(((-0.409999870604041)*gconst5))+(((0.151999567696146)*cj2*gconst5))+(((-0.999999680000154)*x1017))+(((-0.999999680000154)*x1014))+(((0.000363679731622504)*gconst5*sj2))+(((0.000799999744000123)*x1016))+(((-0.151999567696146)*gconst4*sj2)));
evalcond[2]=((((-1.0)*x1012*x1015))+(((-0.000799999744000123)*x1002))+(((0.303999617864764)*sj2))+((x1009*x1015))+(((-1.0)*x1009*x1016))+(((-1.0)*x1004*x1017))+(((-1.0)*x1004*x1014))+((x1012*x1016))+(((-0.00024208)*cj2))+(((-0.999999680000154)*x1011))+(((7.19951539231015e-7)*gconst4))+((x1007*x1017))+((x1007*x1014)));
evalcond[3]=((-0.410000000620062)+(((-7.19951539231015e-7)*gconst5))+(((0.303999617864764)*cj2))+(((-1.0)*x1009*x1017))+(((-1.0)*x1009*x1014))+(((-1.0)*x1004*x1015))+(((-1.0)*x1008*x1017))+(((-1.0)*x1008*x1014))+((x1013*x1016))+((x1004*x1016))+(((-1.0)*x1013*x1015))+(((0.000799999744000123)*x1011))+(((-0.999999680000154)*x1002))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.43990215692465e-6)*x1017))+(((-1.43990215692465e-6)*x1014))+(((-1.0)*x1010*x1015))+(((1.15192209415461e-9)*pz))+((x1003*x1016))+(((-1.0)*x1005*x1017))+(((-1.0)*x1005*x1014))+(((-1.0)*x1006*x1014))+(((-1.0)*x1006*x1017))+(((-1.0)*pp))+(((-5.90360263062261e-7)*gconst5))+(((0.000655999791072199)*x1011))+(((1.15192172553972e-9)*x1016))+(((-0.819999738840249)*x1002))+(((-1.0)*x1003*x1015))+(((-1.15192172553972e-9)*x1015))+((x1010*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1018=(gconst5*py);
IkReal x1019=(gconst4*px);
IkReal x1020=((0.000121599615245046)*sj2);
IkReal x1021=(gconst4*py);
IkReal x1022=((0.151999519056308)*sj2);
IkReal x1023=((0.000363679615245046)*sj2);
IkReal x1024=((0.000121599615245046)*cj2);
IkReal x1025=(gconst5*px);
IkReal x1026=((2.90943692196037e-7)*cj2);
IkReal x1027=((0.151999519056308)*cj2);
IkReal x1028=((2.90943692196037e-7)*gconst5*sj2);
IkReal x1029=((0.000363679615245046)*cj2*gconst4);
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031 = IKatan2WithCheck(IkReal(((((-1.0)*x1018*x1027))+(((-1.0)*x1018*x1023))+(((-1.0)*x1019*x1020))+(((8.79999691008071e-5)*py))+(((-0.000363679615245046)*cj2*x1021))+(((2.90943692196037e-7)*sj2*x1025))+(((0.00032651989551365)*x1021))+((x1021*x1022))+((x1019*x1026))+(((-0.000327999791523316)*x1025))+((x1024*x1025))+(((0.109999961376009)*px))+(((-2.6121591641092e-7)*x1019))+(((0.409999739404145)*x1018)))),IkReal(((((-1.0)*x1023*x1025))+(((-1.0)*x1018*x1024))+(((-1.0)*x1021*x1026))+(((8.79999691008071e-5)*px))+(((0.000327999791523316)*x1018))+((x1019*x1022))+(((-0.000363679615245046)*cj2*x1019))+((x1020*x1021))+(((0.409999739404145)*x1025))+(((2.6121591641092e-7)*x1021))+(((0.00032651989551365)*x1019))+(((-1.0)*x1025*x1027))+(((-0.109999961376009)*py))+(((-2.90943692196037e-7)*sj2*x1018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1031.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1030.value)))+(x1031.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1032=IKsin(j0);
IkReal x1033=IKcos(j0);
IkReal x1034=(gconst4*pz);
IkReal x1035=((5.24799664921893e-7)*gconst4);
IkReal x1036=((0.000799999488000328)*gconst5);
IkReal x1037=((0.000655999581152367)*gconst4);
IkReal x1038=((0.819999476440458)*gconst5);
IkReal x1039=((0.99999936000041)*gconst4);
IkReal x1040=((0.99999936000041)*gconst5);
IkReal x1041=((0.000799999488000328)*gconst4);
IkReal x1042=((0.000655999581152367)*gconst5);
IkReal x1043=(gconst5*pz);
IkReal x1044=((6.39999590400262e-7)*gconst5);
IkReal x1045=((6.39999590400262e-7)*gconst4);
IkReal x1046=(py*x1032);
IkReal x1047=(py*x1033);
IkReal x1048=(px*x1032);
IkReal x1049=(px*x1033);
evalcond[0]=((-0.109999996575991)+(((-0.000799999744000123)*x1049))+(((-0.000799999744000123)*x1046))+(((0.999999680000154)*x1047))+(((-0.999999680000154)*x1048)));
evalcond[1]=((((0.000799999744000123)*x1048))+(((-0.00032652)*gconst4))+(((0.000363679731622504)*cj2*gconst4))+(((-0.000799999744000123)*x1047))+(((-0.409999870604041)*gconst5))+(((0.151999567696146)*cj2*gconst5))+(((0.000363679731622504)*gconst5*sj2))+(((-0.151999567696146)*gconst4*sj2))+(((-0.999999680000154)*x1046))+(((-0.999999680000154)*x1049)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x1044*x1047))+((x1039*x1049))+((x1039*x1046))+((x1041*x1047))+(((-1.0)*x1041*x1048))+(((-0.00024208)*cj2))+(((7.19951539231015e-7)*gconst4))+(((-1.0)*x1036*x1046))+(((-1.0)*x1036*x1049))+(((-0.000799999744000123)*x1034))+((x1044*x1048))+(((-0.999999680000154)*x1043)));
evalcond[3]=((-0.410000000620062)+(((-7.19951539231015e-7)*gconst5))+(((0.303999617864764)*cj2))+(((0.000799999744000123)*x1043))+(((-1.0)*x1045*x1047))+(((-1.0)*x1041*x1049))+(((-1.0)*x1041*x1046))+((x1036*x1048))+(((-1.0)*x1040*x1046))+(((-1.0)*x1040*x1049))+(((-0.999999680000154)*x1034))+((x1045*x1048))+(((-1.0)*x1036*x1047))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.15192172553972e-9)*x1047))+((x1042*x1048))+(((-1.0)*x1038*x1049))+(((-1.0)*x1038*x1046))+(((1.15192209415461e-9)*pz))+(((0.000655999791072199)*x1043))+((x1035*x1048))+(((-1.0)*pp))+(((-1.0)*x1037*x1049))+(((-1.0)*x1037*x1046))+(((-5.90360263062261e-7)*gconst5))+(((-0.819999738840249)*x1034))+(((-1.0)*x1042*x1047))+(((-1.0)*x1035*x1047))+(((-1.43990215692465e-6)*x1046))+(((-1.43990215692465e-6)*x1049))+(((1.15192172553972e-9)*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1050=pz*pz;
IkReal x1051=(x1050+(((-1.0)*pp)));
IkReal x1052=((((-1250.0)*x1050))+(((1250.0)*pp)));
IkReal x1054 = ((x1051*x1051)+(x1052*x1052));
if(IKabs(x1054)==0){
continue;
}
IkReal x1053=pow(x1054,-0.5);
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal(x1051),IkReal(x1052),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1055.value));
IkReal gconst7=((-1.0)*x1051*x1053);
IkReal gconst8=(x1052*x1053);
IkReal x1056=pz*pz;
IkReal x1057=j1;
CheckValue<IkReal> x1060 = IKatan2WithCheck(IkReal((x1056+(((-1.0)*pp)))),IkReal(((((-1250.0)*x1056))+(((1250.0)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1060.valid){
continue;
}
IkReal x1058=x1060.value;
IkReal x1059=x1058;
if(((((j1*x1059))+((j1*x1057))+((x1057*x1058))+((x1058*x1059)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j1*x1059))+((j1*x1057))+((x1057*x1058))+((x1058*x1059)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1061=pz*pz;
IkReal x1062=(x1061+(((-1.0)*pp)));
IkReal x1063=x1052;
CheckValue<IkReal> x1066 = IKatan2WithCheck(IkReal(x1062),IkReal(x1063),IKFAST_ATAN2_MAGTHRESH);
if(!x1066.valid){
continue;
}
IkReal x1064=((-1.0)*(x1066.value));
IkReal x1067 = ((x1063*x1063)+(x1062*x1062));
if(IKabs(x1067)==0){
continue;
}
IkReal x1065=pow(x1067,-0.5);
sj1=gconst7;
cj1=gconst8;
j1=x1064;
IkReal gconst6=x1064;
IkReal gconst7=((-1.0)*x1062*x1065);
IkReal gconst8=(x1063*x1065);
IkReal x1068=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1068;
j0eval[1]=IKsign(x1068);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1069=(gconst8*py);
IkReal x1070=((0.99999936000041)*pz);
IkReal x1071=(gconst7*py);
IkReal x1072=((0.000242079922534437)*cj2);
IkReal x1073=(px*pz);
IkReal x1074=((0.999999680000154)*gconst7);
IkReal x1075=(px*sj2);
IkReal x1076=((0.000799999744000123)*gconst8);
IkReal x1077=((1.9366393802755e-7)*cj2);
IkReal x1078=(py*sj2);
IkReal x1079=((0.000799999488000328)*pz);
IkReal x1080=(gconst7*px);
IkReal x1081=(gconst8*px);
CheckValue<IkReal> x1082=IKPowWithIntegerCheck(IKsign(((((pz*pz)*((x1076+(((-1.0)*x1074))))))+((pp*x1074))+(((-1.0)*pp*x1076)))),-1);
if(!x1082.valid){
continue;
}
CheckValue<IkReal> x1083 = IKatan2WithCheck(IkReal((((x1069*x1070))+(((0.000243199616467947)*x1075))+(((-0.109999925600077)*x1080))+(((7.03999527526644e-8)*x1069))+((x1071*x1079))+(((-1.0)*px*x1077))+((py*x1072))+(((-0.303999520584933)*x1078))+(((-6.39999590400262e-7)*gconst7*x1073))+(((-8.87198922496771e-5)*x1071))+(((8.79999409408305e-5)*x1081))+(((-0.000799999488000328)*gconst8*x1073)))),IkReal(((((7.03999527526644e-8)*x1081))+((x1069*x1079))+(((0.109999925600077)*x1071))+(((-8.87198922496771e-5)*x1080))+((px*x1072))+((py*x1077))+(((-0.303999520584933)*x1075))+((x1070*x1081))+(((6.39999590400262e-7)*pz*x1071))+(((-8.79999409408305e-5)*x1069))+(((0.000799999488000328)*gconst7*x1073))+(((-0.000243199616467947)*x1078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1083.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1082.value)))+(x1083.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1084=IKsin(j0);
IkReal x1085=IKcos(j0);
IkReal x1086=(gconst8*pz);
IkReal x1087=(gconst7*px);
IkReal x1088=((0.000799999488000328)*gconst8);
IkReal x1089=((0.819999476440458)*gconst8);
IkReal x1090=((6.39999590400262e-7)*gconst8);
IkReal x1091=(gconst7*pz);
IkReal x1092=((0.000799999488000328)*gconst7);
IkReal x1093=((0.000655999581152367)*gconst8);
IkReal x1094=(py*x1084);
IkReal x1095=(py*x1085);
IkReal x1096=((0.99999936000041)*x1085);
IkReal x1097=(px*x1084);
IkReal x1098=(px*x1085);
evalcond[0]=((-0.109999996575991)+(((0.999999680000154)*x1095))+(((-0.999999680000154)*x1097))+(((-0.000799999744000123)*x1094))+(((-0.000799999744000123)*x1098)));
evalcond[1]=((((-0.00032652)*gconst7))+(((0.000363679731622504)*cj2*gconst7))+(((-0.999999680000154)*x1094))+(((-0.999999680000154)*x1098))+(((0.000799999744000123)*x1097))+(((-0.409999870604041)*gconst8))+(((0.151999567696146)*cj2*gconst8))+(((-0.151999567696146)*gconst7*sj2))+(((-0.000799999744000123)*x1095))+(((0.000363679731622504)*gconst8*sj2)));
evalcond[2]=((((0.303999617864764)*sj2))+((x1087*x1096))+(((-1.0)*x1088*x1094))+(((-1.0)*x1088*x1098))+(((-0.999999680000154)*x1086))+(((-1.0)*x1090*x1095))+(((-0.000799999488000328)*x1084*x1087))+(((0.99999936000041)*gconst7*x1094))+(((-0.00024208)*cj2))+((x1092*x1095))+(((7.19951539231015e-7)*gconst7))+(((-0.000799999744000123)*x1091))+((x1090*x1097)));
evalcond[3]=((-0.410000000620062)+(((-7.19951539231015e-7)*gconst8))+(((0.303999617864764)*cj2))+(((-1.0)*x1088*x1095))+(((-0.000799999488000328)*x1085*x1087))+(((0.000799999744000123)*x1086))+((x1088*x1097))+(((-1.0)*gconst8*px*x1096))+(((6.39999590400262e-7)*x1084*x1087))+(((-0.999999680000154)*x1091))+(((-0.99999936000041)*gconst8*x1094))+(((-1.0)*x1092*x1094))+(((-6.39999590400262e-7)*gconst7*x1095))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((0.000655999791072199)*x1086))+(((1.15192209415461e-9)*pz))+(((-0.819999738840249)*x1091))+(((-0.000655999581152367)*x1085*x1087))+(((-5.24799664921893e-7)*gconst7*x1095))+(((-1.0)*x1089*x1094))+(((-1.0)*x1089*x1098))+(((-1.43990215692465e-6)*x1094))+(((-1.43990215692465e-6)*x1098))+(((-1.0)*pp))+(((-5.90360263062261e-7)*gconst8))+(((1.15192172553972e-9)*x1097))+((x1093*x1097))+(((-1.0)*x1093*x1095))+(((-0.000655999581152367)*gconst7*x1094))+(((-1.15192172553972e-9)*x1095))+(((5.24799664921893e-7)*x1084*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1099=(cj2*px);
IkReal x1100=((0.151999519056308)*gconst8);
IkReal x1101=(gconst7*py);
IkReal x1102=(cj2*py);
IkReal x1103=((0.409999739404145)*gconst8);
IkReal x1104=(px*sj2);
IkReal x1105=((0.000363679615245046)*gconst8);
IkReal x1106=(gconst7*px);
IkReal x1107=((0.000121599615245046)*gconst8);
IkReal x1108=((0.000327999791523316)*gconst8);
IkReal x1109=((0.000363679615245046)*cj2*gconst7);
IkReal x1110=((2.90943692196037e-7)*gconst8*sj2);
CheckValue<IkReal> x1111=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1111.valid){
continue;
}
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal(((((-2.6121591641092e-7)*x1106))+(((-1.0)*px*x1108))+(((0.00032651989551365)*x1101))+(((-0.000121599615245046)*gconst7*x1104))+(((8.79999691008071e-5)*py))+(((0.151999519056308)*sj2*x1101))+((x1099*x1107))+(((-0.000363679615245046)*cj2*x1101))+(((-1.0)*py*sj2*x1105))+(((-1.0)*x1100*x1102))+((py*x1103))+(((2.90943692196037e-7)*gconst7*x1099))+(((0.109999961376009)*px))+(((2.90943692196037e-7)*gconst8*x1104)))),IkReal(((((2.6121591641092e-7)*x1101))+(((-0.000363679615245046)*gconst7*x1099))+(((0.00032651989551365)*x1106))+(((0.000121599615245046)*sj2*x1101))+(((8.79999691008071e-5)*px))+(((-2.90943692196037e-7)*cj2*x1101))+(((-1.0)*py*x1110))+(((-1.0)*x1099*x1100))+((py*x1108))+(((-1.0)*x1104*x1105))+((px*x1103))+(((-0.109999961376009)*py))+(((-1.0)*x1102*x1107))+(((0.151999519056308)*gconst7*x1104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1111.value)))+(x1112.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1113=IKsin(j0);
IkReal x1114=IKcos(j0);
IkReal x1115=(gconst8*pz);
IkReal x1116=(gconst7*px);
IkReal x1117=((0.000799999488000328)*gconst8);
IkReal x1118=((0.819999476440458)*gconst8);
IkReal x1119=((6.39999590400262e-7)*gconst8);
IkReal x1120=(gconst7*pz);
IkReal x1121=((0.000799999488000328)*gconst7);
IkReal x1122=((0.000655999581152367)*gconst8);
IkReal x1123=(py*x1113);
IkReal x1124=(py*x1114);
IkReal x1125=((0.99999936000041)*x1114);
IkReal x1126=(px*x1113);
IkReal x1127=(px*x1114);
evalcond[0]=((-0.109999996575991)+(((-0.000799999744000123)*x1127))+(((-0.000799999744000123)*x1123))+(((0.999999680000154)*x1124))+(((-0.999999680000154)*x1126)));
evalcond[1]=((((-0.00032652)*gconst7))+(((-0.000799999744000123)*x1124))+(((0.000363679731622504)*cj2*gconst7))+(((-0.409999870604041)*gconst8))+(((0.151999567696146)*cj2*gconst8))+(((-0.151999567696146)*gconst7*sj2))+(((-0.999999680000154)*x1127))+(((-0.999999680000154)*x1123))+(((0.000799999744000123)*x1126))+(((0.000363679731622504)*gconst8*sj2)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x1117*x1127))+(((-1.0)*x1117*x1123))+(((-0.000799999744000123)*x1120))+((x1121*x1124))+(((0.99999936000041)*gconst7*x1123))+((x1119*x1126))+(((-0.00024208)*cj2))+(((-1.0)*x1119*x1124))+(((-0.999999680000154)*x1115))+((x1116*x1125))+(((7.19951539231015e-7)*gconst7))+(((-0.000799999488000328)*x1113*x1116)));
evalcond[3]=((-0.410000000620062)+(((-7.19951539231015e-7)*gconst8))+(((0.303999617864764)*cj2))+(((-1.0)*x1117*x1124))+(((-1.0)*x1121*x1123))+(((-1.0)*gconst8*px*x1125))+(((6.39999590400262e-7)*x1113*x1116))+(((0.000799999744000123)*x1115))+((x1117*x1126))+(((-0.999999680000154)*x1120))+(((-0.99999936000041)*gconst8*x1123))+(((-6.39999590400262e-7)*gconst7*x1124))+(((-0.000799999488000328)*x1114*x1116))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.43990215692465e-6)*x1127))+(((-1.43990215692465e-6)*x1123))+(((-5.24799664921893e-7)*gconst7*x1124))+(((1.15192172553972e-9)*x1126))+(((1.15192209415461e-9)*pz))+(((-1.0)*x1122*x1124))+(((-0.000655999581152367)*gconst7*x1123))+(((-1.0)*pp))+(((-5.90360263062261e-7)*gconst8))+(((5.24799664921893e-7)*x1113*x1116))+(((0.000655999791072199)*x1115))+((x1122*x1126))+(((-0.819999738840249)*x1120))+(((-1.0)*x1118*x1123))+(((-1.0)*x1118*x1127))+(((-1.15192172553972e-9)*x1124))+(((-0.000655999581152367)*x1114*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1128=pz*pz;
IkReal x1129=(x1128+(((-1.0)*pp)));
IkReal x1130=((((1250.0)*pp))+(((-1250.0)*x1128)));
IkReal x1132 = ((x1129*x1129)+(x1130*x1130));
if(IKabs(x1132)==0){
continue;
}
IkReal x1131=pow(x1132,-0.5);
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal(x1129),IkReal(x1130),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1133.value))));
IkReal gconst10=((1.0)*x1129*x1131);
IkReal gconst11=((-1.0)*x1130*x1131);
IkReal x1134=pz*pz;
IkReal x1135=j1;
CheckValue<IkReal> x1138 = IKatan2WithCheck(IkReal((x1134+(((-1.0)*pp)))),IkReal(((((1250.0)*pp))+(((-1250.0)*x1134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1138.valid){
continue;
}
IkReal x1136=x1138.value;
IkReal x1137=x1136;
if((((9.86960440108936)+((x1136*x1137))+((x1135*x1136))+((j1*x1135))+((j1*x1137))+(((-3.14159265358979)*j1))+(((-3.14159265358979)*x1136))+(((-3.14159265358979)*x1137))+(((-3.14159265358979)*x1135)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x1136*x1137))+((x1135*x1136))+((j1*x1135))+((j1*x1137))+(((-3.14159265358979)*j1))+(((-3.14159265358979)*x1136))+(((-3.14159265358979)*x1137))+(((-3.14159265358979)*x1135)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1139=pz*pz;
IkReal x1140=(x1139+(((-1.0)*pp)));
IkReal x1141=x1130;
CheckValue<IkReal> x1144 = IKatan2WithCheck(IkReal(x1140),IkReal(x1141),IKFAST_ATAN2_MAGTHRESH);
if(!x1144.valid){
continue;
}
IkReal x1142=((1.0)*(x1144.value));
IkReal x1145 = ((x1141*x1141)+(x1140*x1140));
if(IKabs(x1145)==0){
continue;
}
IkReal x1143=pow(x1145,-0.5);
sj1=gconst10;
cj1=gconst11;
j1=((3.14159265)+(((-1.0)*x1142)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1142)));
IkReal gconst10=((1.0)*x1140*x1143);
IkReal gconst11=((-1.0)*x1141*x1143);
IkReal x1146=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1146;
j0eval[1]=IKsign(x1146);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1147=(gconst11*py);
IkReal x1148=((0.000799999488000328)*pz);
IkReal x1149=(cj2*py);
IkReal x1150=(gconst10*py);
IkReal x1151=(gconst10*px);
IkReal x1152=((0.000243199616467947)*sj2);
IkReal x1153=((0.999999680000154)*gconst10);
IkReal x1154=((0.303999520584933)*sj2);
IkReal x1155=(cj2*px);
IkReal x1156=(gconst11*px);
IkReal x1157=((0.000799999744000123)*gconst11);
IkReal x1158=((0.99999936000041)*pz);
IkReal x1159=(pz*x1151);
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(IKsign(((((pz*pz)*((x1157+(((-1.0)*x1153))))))+(((-1.0)*pp*x1157))+((pp*x1153)))),-1);
if(!x1160.valid){
continue;
}
CheckValue<IkReal> x1161 = IKatan2WithCheck(IkReal(((((-1.9366393802755e-7)*x1155))+(((-8.87198922496771e-5)*x1150))+(((-6.39999590400262e-7)*x1159))+(((8.79999409408305e-5)*x1156))+(((-0.109999925600077)*x1151))+((x1147*x1158))+(((-1.0)*py*x1154))+(((-1.0)*x1148*x1156))+((x1148*x1150))+(((0.000242079922534437)*x1149))+((px*x1152))+(((7.03999527526644e-8)*x1147)))),IkReal(((((-1.0)*px*x1154))+(((-8.87198922496771e-5)*x1151))+(((-8.79999409408305e-5)*x1147))+(((1.9366393802755e-7)*x1149))+((x1147*x1148))+(((-1.0)*py*x1152))+(((0.000242079922534437)*x1155))+(((0.109999925600077)*x1150))+((x1148*x1151))+(((7.03999527526644e-8)*x1156))+((x1156*x1158))+(((6.39999590400262e-7)*pz*x1150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1161.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1160.value)))+(x1161.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1162=IKsin(j0);
IkReal x1163=IKcos(j0);
IkReal x1164=(gconst10*px);
IkReal x1165=(gconst11*py);
IkReal x1166=(gconst10*py);
IkReal x1167=(gconst10*pz);
IkReal x1168=(gconst11*pz);
IkReal x1169=(gconst11*px);
IkReal x1170=((0.000799999488000328)*x1162);
IkReal x1171=(px*x1162);
IkReal x1172=(py*x1162);
IkReal x1173=(py*x1163);
IkReal x1174=((0.000655999581152367)*x1163);
IkReal x1175=((6.39999590400262e-7)*x1163);
IkReal x1176=((0.99999936000041)*x1163);
IkReal x1177=(px*x1163);
IkReal x1178=((0.000799999488000328)*x1163);
IkReal x1179=((0.99999936000041)*x1162);
evalcond[0]=((-0.109999996575991)+(((-0.999999680000154)*x1171))+(((0.999999680000154)*x1173))+(((-0.000799999744000123)*x1172))+(((-0.000799999744000123)*x1177)));
evalcond[1]=((((0.000363679731622504)*cj2*gconst10))+(((-0.151999567696146)*gconst10*sj2))+(((-0.00032652)*gconst10))+(((0.151999567696146)*cj2*gconst11))+(((-0.999999680000154)*x1177))+(((-0.999999680000154)*x1172))+(((0.000799999744000123)*x1171))+(((-0.409999870604041)*gconst11))+(((0.000363679731622504)*gconst11*sj2))+(((-0.000799999744000123)*x1173)));
evalcond[2]=(((x1164*x1176))+(((-1.0)*x1165*x1170))+(((-1.0)*x1165*x1175))+(((-0.000799999744000123)*x1167))+(((7.19951539231015e-7)*gconst10))+(((0.303999617864764)*sj2))+(((6.39999590400262e-7)*x1162*x1169))+((x1166*x1179))+((x1166*x1178))+(((-0.999999680000154)*x1168))+(((-0.00024208)*cj2))+(((-1.0)*x1169*x1178))+(((-1.0)*x1164*x1170)));
evalcond[3]=((-0.410000000620062)+(((-1.0)*x1165*x1178))+(((-1.0)*x1165*x1179))+(((0.303999617864764)*cj2))+(((6.39999590400262e-7)*x1162*x1164))+(((-0.999999680000154)*x1167))+(((0.000799999744000123)*x1168))+(((-1.0)*x1169*x1176))+(((-1.0)*x1164*x1178))+(((-7.19951539231015e-7)*gconst11))+(((-1.0)*x1166*x1170))+(((-1.0)*x1166*x1175))+((x1169*x1170))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.0)*x1165*x1174))+(((1.15192172553972e-9)*x1171))+(((5.24799664921893e-7)*x1162*x1164))+(((1.15192209415461e-9)*pz))+(((-1.43990215692465e-6)*x1172))+(((-1.43990215692465e-6)*x1177))+(((-0.819999476440458)*x1162*x1165))+(((-0.819999476440458)*x1163*x1169))+(((-5.24799664921893e-7)*x1163*x1166))+(((-5.90360263062261e-7)*gconst11))+(((-0.819999738840249)*x1167))+(((-1.0)*pp))+(((-1.15192172553972e-9)*x1173))+(((-1.0)*x1164*x1174))+(((0.000655999581152367)*x1162*x1169))+(((-0.000655999581152367)*x1162*x1166))+(((0.000655999791072199)*x1168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1180=(gconst11*px);
IkReal x1181=((0.000121599615245046)*cj2);
IkReal x1182=(gconst10*py);
IkReal x1183=(gconst10*px);
IkReal x1184=((0.151999519056308)*sj2);
IkReal x1185=(gconst11*py);
IkReal x1186=((0.000121599615245046)*sj2);
IkReal x1187=((0.000363679615245046)*sj2);
IkReal x1188=((0.000363679615245046)*cj2);
IkReal x1189=((2.90943692196037e-7)*cj2);
IkReal x1190=((2.90943692196037e-7)*sj2);
IkReal x1191=((0.151999519056308)*cj2);
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1192.valid){
continue;
}
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal(((((-0.000327999791523316)*x1180))+((x1183*x1189))+((x1182*x1184))+((x1180*x1190))+((x1180*x1181))+(((-2.6121591641092e-7)*x1183))+(((0.409999739404145)*x1185))+(((8.79999691008071e-5)*py))+(((-1.0)*x1185*x1187))+(((-1.0)*x1185*x1191))+(((-1.0)*x1183*x1186))+(((-1.0)*x1182*x1188))+(((0.109999961376009)*px))+(((0.00032651989551365)*x1182)))),IkReal(((((-1.0)*x1181*x1185))+((x1183*x1184))+((x1182*x1186))+(((0.000327999791523316)*x1185))+(((2.6121591641092e-7)*x1182))+(((0.409999739404145)*x1180))+(((8.79999691008071e-5)*px))+(((-1.0)*x1180*x1187))+(((-1.0)*x1180*x1191))+(((-1.0)*x1185*x1190))+(((-1.0)*x1183*x1188))+(((-1.0)*x1182*x1189))+(((-0.109999961376009)*py))+(((0.00032651989551365)*x1183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1192.value)))+(x1193.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1194=IKsin(j0);
IkReal x1195=IKcos(j0);
IkReal x1196=(gconst10*px);
IkReal x1197=(gconst11*py);
IkReal x1198=(gconst10*py);
IkReal x1199=(gconst10*pz);
IkReal x1200=(gconst11*pz);
IkReal x1201=(gconst11*px);
IkReal x1202=((0.000799999488000328)*x1194);
IkReal x1203=(px*x1194);
IkReal x1204=(py*x1194);
IkReal x1205=(py*x1195);
IkReal x1206=((0.000655999581152367)*x1195);
IkReal x1207=((6.39999590400262e-7)*x1195);
IkReal x1208=((0.99999936000041)*x1195);
IkReal x1209=(px*x1195);
IkReal x1210=((0.000799999488000328)*x1195);
IkReal x1211=((0.99999936000041)*x1194);
evalcond[0]=((-0.109999996575991)+(((-0.000799999744000123)*x1204))+(((-0.000799999744000123)*x1209))+(((0.999999680000154)*x1205))+(((-0.999999680000154)*x1203)));
evalcond[1]=((((0.000363679731622504)*cj2*gconst10))+(((-0.151999567696146)*gconst10*sj2))+(((-0.000799999744000123)*x1205))+(((-0.00032652)*gconst10))+(((0.151999567696146)*cj2*gconst11))+(((0.000799999744000123)*x1203))+(((-0.409999870604041)*gconst11))+(((-0.999999680000154)*x1209))+(((-0.999999680000154)*x1204))+(((0.000363679731622504)*gconst11*sj2)));
evalcond[2]=((((-0.000799999744000123)*x1199))+(((7.19951539231015e-7)*gconst10))+(((0.303999617864764)*sj2))+(((6.39999590400262e-7)*x1194*x1201))+(((-1.0)*x1196*x1202))+(((-1.0)*x1201*x1210))+(((-0.00024208)*cj2))+(((-0.999999680000154)*x1200))+((x1198*x1211))+((x1198*x1210))+(((-1.0)*x1197*x1207))+(((-1.0)*x1197*x1202))+((x1196*x1208)));
evalcond[3]=((-0.410000000620062)+(((6.39999590400262e-7)*x1194*x1196))+(((-1.0)*x1197*x1211))+(((-1.0)*x1197*x1210))+(((0.303999617864764)*cj2))+(((0.000799999744000123)*x1200))+(((-1.0)*x1196*x1210))+(((-1.0)*x1201*x1208))+((x1201*x1202))+(((-7.19951539231015e-7)*gconst11))+(((-0.999999680000154)*x1199))+(((0.00024208)*sj2))+(((-1.0)*x1198*x1202))+(((-1.0)*x1198*x1207)));
evalcond[4]=((-0.0635841749976017)+(((1.15192209415461e-9)*pz))+(((-1.0)*x1196*x1206))+(((0.000655999581152367)*x1194*x1201))+(((5.24799664921893e-7)*x1194*x1196))+(((-5.24799664921893e-7)*x1195*x1198))+(((-1.43990215692465e-6)*x1204))+(((-1.43990215692465e-6)*x1209))+(((-0.000655999581152367)*x1194*x1198))+(((-0.819999476440458)*x1194*x1197))+(((-5.90360263062261e-7)*gconst11))+(((-1.0)*pp))+(((0.000655999791072199)*x1200))+(((-1.15192172553972e-9)*x1205))+(((-0.819999476440458)*x1195*x1201))+(((-1.0)*x1197*x1206))+(((-0.819999738840249)*x1199))+(((1.15192172553972e-9)*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1212=(cj1*px);
IkReal x1213=(px*sj1);
IkReal x1214=((0.000243199616467947)*cj2);
IkReal x1215=((0.000799999744000123)*sj1);
IkReal x1216=(py*sj1);
IkReal x1217=((0.303999520584933)*cj2);
IkReal x1218=((0.999999680000154)*cj1);
IkReal x1219=((0.000242079922534437)*sj2);
IkReal x1220=((1.9366393802755e-7)*sj2);
IkReal x1221=((0.000799999488000328)*pz);
IkReal x1222=((0.99999936000041)*pz);
IkReal x1223=(cj1*py);
IkReal x1224=((6.39999590400262e-7)*pz);
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1218))+(((-1.0)*pp*x1215))+(((pz*pz)*((x1215+x1218)))))),-1);
if(!x1225.valid){
continue;
}
CheckValue<IkReal> x1226 = IKatan2WithCheck(IkReal(((((-1.0)*x1213*x1221))+((x1216*x1222))+((px*x1214))+(((-1.0)*x1221*x1223))+(((8.87198922496771e-5)*x1223))+(((8.79999409408305e-5)*x1213))+(((0.409999869420124)*py))+((px*x1220))+(((7.03999527526644e-8)*x1216))+(((0.109999925600077)*x1212))+(((-0.0003279998955361)*px))+((x1212*x1224))+(((-1.0)*py*x1217))+(((-1.0)*py*x1219)))),IkReal(((((-1.0)*x1212*x1221))+(((8.87198922496771e-5)*x1212))+((x1216*x1221))+(((0.0003279998955361)*py))+(((-1.0)*px*x1219))+(((-1.0)*px*x1217))+(((-8.79999409408305e-5)*x1216))+(((-1.0)*py*x1220))+(((0.409999869420124)*px))+((x1213*x1222))+(((7.03999527526644e-8)*x1213))+(((-0.109999925600077)*x1223))+(((-1.0)*py*x1214))+(((-1.0)*x1223*x1224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1226.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1225.value)))+(x1226.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1227=IKsin(j0);
IkReal x1228=IKcos(j0);
IkReal x1229=((0.999999680000154)*pz);
IkReal x1230=((5.24799664921893e-7)*sj1);
IkReal x1231=((0.99999936000041)*cj1);
IkReal x1232=((0.000799999488000328)*sj1);
IkReal x1233=(cj1*pz);
IkReal x1234=((0.000655999581152367)*sj1);
IkReal x1235=((0.000655999581152367)*cj1);
IkReal x1236=((6.39999590400262e-7)*cj1);
IkReal x1237=((0.819999476440458)*cj1);
IkReal x1238=((0.99999936000041)*sj1);
IkReal x1239=((0.000799999488000328)*cj1);
IkReal x1240=((6.39999590400262e-7)*sj1);
IkReal x1241=(pz*sj1);
IkReal x1242=(py*x1227);
IkReal x1243=(py*x1228);
IkReal x1244=(px*x1227);
IkReal x1245=(px*x1228);
evalcond[0]=((-0.109999996575991)+(((0.999999680000154)*x1243))+(((-0.000799999744000123)*x1245))+(((-0.000799999744000123)*x1242))+(((-0.999999680000154)*x1244)));
evalcond[1]=((((0.000363679731622504)*cj2*sj1))+(((-0.151999567696146)*sj1*sj2))+(((0.000363679731622504)*cj1*sj2))+(((-0.00032652)*sj1))+(((0.151999567696146)*cj1*cj2))+(((-0.409999870604041)*cj1))+(((-0.000799999744000123)*x1243))+(((0.000799999744000123)*x1244))+(((-0.999999680000154)*x1242))+(((-0.999999680000154)*x1245)));
evalcond[2]=((((-1.0)*x1239*x1242))+(((-1.0)*x1239*x1245))+(((0.303999617864764)*sj2))+((x1236*x1244))+(((-1.0)*x1236*x1243))+(((7.19951539231015e-7)*sj1))+(((-0.00024208)*cj2))+(((-0.000799999744000123)*x1241))+((x1232*x1243))+((x1238*x1245))+((x1238*x1242))+(((-1.0)*cj1*x1229))+(((-1.0)*x1232*x1244)));
evalcond[3]=((-0.410000000620062)+(((-1.0)*x1231*x1245))+(((-1.0)*x1231*x1242))+(((-1.0)*x1239*x1243))+(((0.303999617864764)*cj2))+(((-7.19951539231015e-7)*cj1))+((x1239*x1244))+((x1240*x1244))+(((-1.0)*x1240*x1243))+(((-1.0)*sj1*x1229))+(((0.000799999744000123)*x1233))+(((-1.0)*x1232*x1242))+(((-1.0)*x1232*x1245))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.43990215692465e-6)*x1245))+(((-1.43990215692465e-6)*x1242))+(((0.000655999791072199)*x1233))+(((1.15192209415461e-9)*pz))+(((1.15192172553972e-9)*x1244))+(((-0.819999738840249)*x1241))+(((-1.0)*x1235*x1243))+(((-1.0)*pp))+(((-5.90360263062261e-7)*cj1))+(((-1.0)*x1230*x1243))+(((-1.0)*x1237*x1242))+(((-1.0)*x1237*x1245))+(((-1.15192172553972e-9)*x1243))+((x1235*x1244))+((x1230*x1244))+(((-1.0)*x1234*x1242))+(((-1.0)*x1234*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1246=((0.109999925600077)*sj1);
IkReal x1247=(cj1*px);
IkReal x1248=((0.000799999488000328)*pz);
IkReal x1249=(cj1*py);
IkReal x1250=(px*sj1);
IkReal x1251=(cj2*py);
IkReal x1252=((0.000799999744000123)*cj1);
IkReal x1253=((0.000243199616467947)*sj2);
IkReal x1254=((0.303999520584933)*sj2);
IkReal x1255=(cj2*px);
IkReal x1256=(py*sj1);
IkReal x1257=((6.39999590400262e-7)*pz);
IkReal x1258=((0.99999936000041)*pz);
IkReal x1259=((0.999999680000154)*sj1);
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1252))+(((pz*pz)*(((((-1.0)*x1259))+x1252))))+((pp*x1259)))),-1);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1246))+(((0.000242079922534437)*x1251))+(((8.79999409408305e-5)*x1247))+(((-1.9366393802755e-7)*x1255))+(((-1.0)*x1250*x1257))+((x1249*x1258))+(((7.03999527526644e-8)*x1249))+(((-1.0)*py*x1254))+((px*x1253))+((x1248*x1256))+(((-8.87198922496771e-5)*x1256))+(((-1.0)*x1247*x1248)))),IkReal((((x1247*x1258))+(((0.000242079922534437)*x1255))+(((-8.79999409408305e-5)*x1249))+((x1256*x1257))+((py*x1246))+((x1248*x1249))+(((-1.0)*px*x1254))+(((1.9366393802755e-7)*x1251))+(((7.03999527526644e-8)*x1247))+(((-1.0)*py*x1253))+((x1248*x1250))+(((-8.87198922496771e-5)*x1250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1260.value)))+(x1261.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1262=IKsin(j0);
IkReal x1263=IKcos(j0);
IkReal x1264=((0.999999680000154)*pz);
IkReal x1265=((5.24799664921893e-7)*sj1);
IkReal x1266=((0.99999936000041)*cj1);
IkReal x1267=((0.000799999488000328)*sj1);
IkReal x1268=(cj1*pz);
IkReal x1269=((0.000655999581152367)*sj1);
IkReal x1270=((0.000655999581152367)*cj1);
IkReal x1271=((6.39999590400262e-7)*cj1);
IkReal x1272=((0.819999476440458)*cj1);
IkReal x1273=((0.99999936000041)*sj1);
IkReal x1274=((0.000799999488000328)*cj1);
IkReal x1275=((6.39999590400262e-7)*sj1);
IkReal x1276=(pz*sj1);
IkReal x1277=(py*x1262);
IkReal x1278=(py*x1263);
IkReal x1279=(px*x1262);
IkReal x1280=(px*x1263);
evalcond[0]=((-0.109999996575991)+(((-0.999999680000154)*x1279))+(((-0.000799999744000123)*x1277))+(((0.999999680000154)*x1278))+(((-0.000799999744000123)*x1280)));
evalcond[1]=((((0.000363679731622504)*cj2*sj1))+(((-0.151999567696146)*sj1*sj2))+(((-0.999999680000154)*x1280))+(((0.000363679731622504)*cj1*sj2))+(((-0.00032652)*sj1))+(((-0.999999680000154)*x1277))+(((0.000799999744000123)*x1279))+(((-0.000799999744000123)*x1278))+(((0.151999567696146)*cj1*cj2))+(((-0.409999870604041)*cj1)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x1267*x1279))+(((-0.000799999744000123)*x1276))+(((-1.0)*x1271*x1278))+((x1273*x1277))+(((7.19951539231015e-7)*sj1))+((x1267*x1278))+(((-1.0)*cj1*x1264))+(((-0.00024208)*cj2))+(((-1.0)*x1274*x1277))+((x1271*x1279))+(((-1.0)*x1274*x1280))+((x1273*x1280)));
evalcond[3]=((-0.410000000620062)+((x1275*x1279))+(((0.303999617864764)*cj2))+(((-7.19951539231015e-7)*cj1))+(((-1.0)*x1267*x1277))+(((0.000799999744000123)*x1268))+(((-1.0)*x1266*x1280))+(((-1.0)*x1266*x1277))+(((-1.0)*x1267*x1280))+(((-1.0)*x1275*x1278))+((x1274*x1279))+(((-1.0)*sj1*x1264))+(((-1.0)*x1274*x1278))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+((x1265*x1279))+(((1.15192209415461e-9)*pz))+(((-1.15192172553972e-9)*x1278))+(((-1.0)*x1270*x1278))+(((-1.43990215692465e-6)*x1277))+(((-1.0)*x1272*x1277))+(((-1.0)*x1269*x1280))+(((-1.0)*x1269*x1277))+(((-1.0)*pp))+(((-1.0)*x1272*x1280))+(((1.15192172553972e-9)*x1279))+(((-5.90360263062261e-7)*cj1))+((x1270*x1279))+(((-0.819999738840249)*x1276))+(((0.000655999791072199)*x1268))+(((-1.0)*x1265*x1278))+(((-1.43990215692465e-6)*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1281=(px*sj1);
IkReal x1282=((0.000121599615245046)*sj2);
IkReal x1283=(cj1*py);
IkReal x1284=((0.000363679615245046)*sj2);
IkReal x1285=(py*sj1);
IkReal x1286=((0.151999519056308)*sj2);
IkReal x1287=(cj1*px);
IkReal x1288=((2.90943692196037e-7)*sj2);
IkReal x1289=(cj2*x1285);
IkReal x1290=(cj2*x1287);
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal(((((-2.6121591641092e-7)*x1281))+((x1285*x1286))+(((-0.000327999791523316)*x1287))+(((0.000121599615245046)*x1290))+(((2.90943692196037e-7)*cj2*x1281))+(((-0.151999519056308)*cj2*x1283))+(((8.79999691008071e-5)*py))+(((0.409999739404145)*x1283))+((x1287*x1288))+(((-0.000363679615245046)*x1289))+(((-1.0)*x1283*x1284))+(((0.00032651989551365)*x1285))+(((0.109999961376009)*px))+(((-1.0)*x1281*x1282)))),IkReal(((((-0.151999519056308)*x1290))+(((2.6121591641092e-7)*x1285))+(((8.79999691008071e-5)*px))+(((-0.000121599615245046)*cj2*x1283))+(((-2.90943692196037e-7)*x1289))+(((-1.0)*x1284*x1287))+(((0.409999739404145)*x1287))+((x1282*x1285))+(((-1.0)*x1283*x1288))+(((-0.109999961376009)*py))+((x1281*x1286))+(((0.00032651989551365)*x1281))+(((-0.000363679615245046)*cj2*x1281))+(((0.000327999791523316)*x1283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1292.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1291.value)+(((1.5707963267949)*(x1292.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1293=IKsin(j0);
IkReal x1294=IKcos(j0);
IkReal x1295=((0.999999680000154)*pz);
IkReal x1296=((5.24799664921893e-7)*sj1);
IkReal x1297=((0.99999936000041)*cj1);
IkReal x1298=((0.000799999488000328)*sj1);
IkReal x1299=(cj1*pz);
IkReal x1300=((0.000655999581152367)*sj1);
IkReal x1301=((0.000655999581152367)*cj1);
IkReal x1302=((6.39999590400262e-7)*cj1);
IkReal x1303=((0.819999476440458)*cj1);
IkReal x1304=((0.99999936000041)*sj1);
IkReal x1305=((0.000799999488000328)*cj1);
IkReal x1306=((6.39999590400262e-7)*sj1);
IkReal x1307=(pz*sj1);
IkReal x1308=(py*x1293);
IkReal x1309=(py*x1294);
IkReal x1310=(px*x1293);
IkReal x1311=(px*x1294);
evalcond[0]=((-0.109999996575991)+(((-0.000799999744000123)*x1311))+(((-0.000799999744000123)*x1308))+(((-0.999999680000154)*x1310))+(((0.999999680000154)*x1309)));
evalcond[1]=((((0.000363679731622504)*cj2*sj1))+(((-0.151999567696146)*sj1*sj2))+(((0.000363679731622504)*cj1*sj2))+(((-0.00032652)*sj1))+(((-0.000799999744000123)*x1309))+(((0.151999567696146)*cj1*cj2))+(((-0.409999870604041)*cj1))+(((-0.999999680000154)*x1308))+(((-0.999999680000154)*x1311))+(((0.000799999744000123)*x1310)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-0.000799999744000123)*x1307))+(((7.19951539231015e-7)*sj1))+(((-1.0)*x1305*x1311))+(((-0.00024208)*cj2))+((x1304*x1308))+(((-1.0)*x1298*x1310))+((x1302*x1310))+(((-1.0)*x1305*x1308))+((x1304*x1311))+((x1298*x1309))+(((-1.0)*cj1*x1295))+(((-1.0)*x1302*x1309)));
evalcond[3]=((-0.410000000620062)+(((0.000799999744000123)*x1299))+(((0.303999617864764)*cj2))+(((-7.19951539231015e-7)*cj1))+(((-1.0)*sj1*x1295))+(((-1.0)*x1306*x1309))+((x1305*x1310))+((x1306*x1310))+(((-1.0)*x1297*x1308))+(((-1.0)*x1297*x1311))+(((-1.0)*x1298*x1311))+(((-1.0)*x1305*x1309))+(((-1.0)*x1298*x1308))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.0)*x1300*x1311))+(((1.15192209415461e-9)*pz))+(((1.15192172553972e-9)*x1310))+(((0.000655999791072199)*x1299))+(((-1.0)*x1300*x1308))+(((-0.819999738840249)*x1307))+(((-1.0)*x1303*x1308))+(((-1.0)*x1296*x1309))+(((-1.0)*pp))+(((-1.0)*x1303*x1311))+((x1296*x1310))+(((-5.90360263062261e-7)*cj1))+(((-1.0)*x1301*x1309))+(((-1.15192172553972e-9)*x1309))+(((-1.43990215692465e-6)*x1308))+((x1301*x1310))+(((-1.43990215692465e-6)*x1311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1312=px*px;
IkReal x1313=py*py;
IkReal x1314=((0.999999680000154)*py);
IkReal x1315=((0.000799999744000123)*px);
IkReal x1316=(px*py);
IkReal x1317=((((0.000799999744000123)*py))+(((0.999999680000154)*px)));
IkReal x1318=((((-0.000799999488000328)*pp*py))+(((-0.000199423621989765)*cj2*py))+(((0.000218092521236226)*py))+(((-0.000198505473256706)*px*sj2))+(((-0.99999936000041)*pp*px))+(((1.15192135692494e-9)*px*pz))+(((0.272615651545282)*px))+(((-1.58804378605365e-7)*py*sj2))+(((-0.249279527487206)*cj2*px))+(((9.21537085539955e-13)*py*pz)));
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign((((((x1314+(((-1.0)*x1315))))*(((((-1.15192098831029e-9)*x1313))+(((-1.43990031385107e-6)*x1316))+(((1.15192098831029e-9)*x1312))))))+((x1317*(((((-1.43990123538786e-6)*x1312))+(((-2.30384197662057e-9)*x1316))+(((-9.2153679064823e-13)*x1313)))))))),-1);
if(!x1319.valid){
continue;
}
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((((1.58389130962429e-7)*x1312))+(((2.53422609539887e-10)*x1316))+(((1.01369043815955e-13)*x1313))+((x1318*((x1315+(((-1.0)*x1314)))))))),IkReal(((((-1.0)*x1317*x1318))+(((-1.26711304769944e-10)*x1313))+(((1.26711304769944e-10)*x1312))+(((-1.58389029593386e-7)*x1316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1319.value)))+(x1320.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1321=IKsin(j0);
IkReal x1322=IKcos(j0);
IkReal x1323=px*px;
IkReal x1324=py*py;
IkReal x1325=((0.000218092521236226)*py);
IkReal x1326=(px*pz);
IkReal x1327=(px*py);
IkReal x1328=(px*sj2);
IkReal x1329=((0.249279527487206)*cj2);
IkReal x1330=(py*pz);
IkReal x1331=((0.99999936000041)*pp);
IkReal x1332=(cj2*py);
IkReal x1333=(py*sj2);
IkReal x1334=(pp*py);
IkReal x1335=(cj2*px);
IkReal x1336=(pp*px);
IkReal x1337=((9.2153679064823e-13)*x1323);
IkReal x1338=((1.15192098831029e-9)*x1324);
IkReal x1339=((9.2153679064823e-13)*x1324);
IkReal x1340=((2.30384197662057e-9)*x1327);
IkReal x1341=((9.21537085539955e-13)*x1330);
IkReal x1342=((0.000799999488000328)*x1334);
IkReal x1343=((1.58804378605365e-7)*x1333);
IkReal x1344=((0.000199423621989765)*x1332);
IkReal x1345=((1.84307358129646e-12)*x1327);
IkReal x1346=((1.15192098831029e-9)*x1323);
IkReal x1347=((9.21537085539955e-13)*x1326);
IkReal x1348=((0.000799999488000328)*x1336);
IkReal x1349=((1.58804378605365e-7)*x1328);
IkReal x1350=((0.000199423621989765)*x1335);
IkReal x1351=(x1341+x1325);
IkReal x1352=(x1346+(((-1.43990031385107e-6)*x1327))+(((-1.0)*x1338)));
IkReal x1353=(x1337+(((-1.15192025108085e-9)*x1327))+(((-1.0)*x1339)));
IkReal x1354=(x1348+x1349+x1350);
IkReal x1355=(x1342+x1343+x1344);
evalcond[0]=((-0.109999996575991)+((x1321*(((((-0.000799999744000123)*py))+(((-0.999999680000154)*px))))))+((x1322*(((((-0.000799999744000123)*px))+(((0.999999680000154)*py)))))));
evalcond[1]=(x1354+((x1322*x1352))+(((-0.000218092521236226)*px))+(((-1.0)*x1347))+(((-0.000198505473256706)*x1333))+(((-1.0)*py*x1331))+(((1.15192135692494e-9)*x1330))+((x1321*((x1340+(((-1.43990123538786e-6)*x1324))+(((-1.0)*x1337))))))+(((-1.0)*py*x1329))+(((0.272615651545282)*py)));
evalcond[2]=(x1351+(((-1.0)*x1355))+((x1322*x1353))+((x1321*((x1345+(((-7.37229432518584e-16)*x1323))+(((-1.0)*x1338))))))+(((1.27043502884292e-10)*x1328))+(((6.39999590400262e-7)*x1336))+(((1.59538897591812e-7)*x1335))+(((-7.37229668431964e-16)*x1326))+(((-1.74474016988981e-7)*px)));
evalcond[3]=(x1351+(((-0.000198505473256706)*x1328))+(((-1.0)*x1355))+((x1321*x1352))+(((-1.0)*px*x1331))+(((1.15192135692494e-9)*x1326))+(((0.272615651545282)*px))+(((-1.0)*px*x1329))+((x1322*(((((-1.0)*x1340))+(((-1.43990123538786e-6)*x1323))+(((-1.0)*x1339)))))));
evalcond[4]=(x1347+(((-1.0)*x1354))+((x1321*x1353))+(((-1.27043502884292e-10)*x1333))+(((-1.59538897591812e-7)*x1332))+(((0.000218092521236226)*px))+(((1.74474016988981e-7)*py))+(((7.37229668431964e-16)*x1330))+(((-6.39999590400262e-7)*x1334))+((x1322*(((((-1.0)*x1345))+(((-1.0)*x1346))+(((-7.37229432518584e-16)*x1324)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
j1eval[0]=((961.039090479766)+(((-1.0)*sj2))+(((-626.471000356706)*cj2)));
j1eval[1]=IKsign(((0.191204001353403)+(((-0.000198955488124787)*sj2))+(((-0.124639843671992)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1356=(cj2*pz);
IkReal x1357=(cj0*px);
IkReal x1358=((580524487.397462)*cj2);
IkReal x1359=(cj0*py);
IkReal x1360=(pz*sj2);
IkReal x1361=(py*sj0);
IkReal x1362=((0.000242079922534437)*sj2);
IkReal x1363=((0.151999761360084)*cj2);
IkReal x1364=(px*sj0);
IkReal x1365=((0.000121599809088067)*cj2);
IkReal x1366=((464419.58991797)*cj2);
IkReal x1367=((924562.786684915)*sj2);
IkReal x1368=(sj2*x1359);
j1eval[0]=((1127.36519237651)+(((-924563.082544959)*x1356))+(((-1.0)*sj2))+(((-1252712.30374786)*x1364))+(((-739.650229347932)*x1368))+(((-5652.08698175315)*pz))+(((-1.0)*x1359*x1366))+(((-417.948965750778)*cj2))+((x1364*x1366))+(((1252712.30374786)*x1359))+(((739.650229347932)*sj2*x1364))+(((580524673.165268)*x1360))+(((-1.0)*x1357*x1367))+(((-1.0)*x1357*x1358))+(((-1.0)*x1361*x1367))+(((1565890379.68482)*x1357))+(((-1.0)*x1358*x1361))+(((1565890379.68482)*x1361)));
j1eval[1]=IKsign(((2.95180037925896e-7)+(((-0.00024208)*x1356))+(((0.409999869420124)*x1357))+(((0.409999869420124)*x1361))+(((-1.9366393802755e-7)*x1368))+(((-1.0)*x1359*x1365))+((x1364*x1365))+(((-2.61831782568745e-10)*sj2))+(((0.15199981)*x1360))+(((-0.0003279998955361)*x1364))+(((-1.0)*x1357*x1362))+(((-1.0)*x1357*x1363))+(((-1.09432322725289e-7)*cj2))+(((1.9366393802755e-7)*sj2*x1364))+(((-1.0)*x1361*x1363))+(((-1.0)*x1361*x1362))+(((0.0003279998955361)*x1359))+(((-1.47989600966602e-6)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1369=(cj0*py);
IkReal x1370=((823.826402375903)*cj2);
IkReal x1371=(py*sj0);
IkReal x1372=((1029783.00296988)*cj2);
IkReal x1373=(pz*sj2);
IkReal x1374=((0.151999761360084)*sj2);
IkReal x1375=(px*sj0);
IkReal x1376=(cj0*px);
IkReal x1377=((0.000121599809088067)*sj2);
IkReal x1378=((0.000242079922534437)*cj2);
IkReal x1379=(cj2*pz);
IkReal x1380=((1.9366393802755e-7)*cj2);
IkReal x1381=((646591295.409166)*sj2);
IkReal x1382=((517273.036327333)*sj2);
j1eval[0]=((-1.0)+(((1744097682.43427)*pz))+((x1372*x1376))+(((-1029783.33250039)*x1373))+(((-1.0)*x1370*x1375))+(((-465.513805268119)*sj2))+(((-1.0)*x1376*x1381))+(((-5.03625828459028)*x1375))+(((-646591502.318348)*x1379))+((x1371*x1372))+(((-1.0)*x1371*x1381))+((x1375*x1382))+((x1369*x1370))+(((-1.0)*x1369*x1382))+(((5.03625828459028)*x1369))+(((6295.32285573784)*x1376))+(((6295.32285573784)*x1371))+(((1.11380537676867)*cj2)));
j1eval[1]=IKsign(((-2.35078576589711e-10)+((x1376*x1378))+(((-1.09432322725289e-7)*sj2))+((x1375*x1377))+(((-1.0)*x1375*x1380))+(((-1.0)*x1371*x1374))+(((-0.00024208)*x1373))+(((1.47989553609953e-6)*x1371))+(((1.47989553609953e-6)*x1376))+(((-0.15199981)*x1379))+(((-1.0)*x1374*x1376))+(((-1.18391642887962e-9)*x1375))+((x1371*x1378))+(((1.18391642887962e-9)*x1369))+(((2.61831782568745e-10)*cj2))+(((-1.0)*x1369*x1377))+((x1369*x1380))+(((0.410000000620062)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1383=pz*pz;
IkReal x1384=cj2*cj2;
IkReal x1385=(px*pz);
IkReal x1386=(py*sj0);
IkReal x1387=((0.000242079922534437)*cj2);
IkReal x1388=(cj0*px);
IkReal x1389=(cj0*py);
IkReal x1390=((0.000121599809088067)*sj2);
IkReal x1391=((0.151999761360084)*sj2);
IkReal x1392=((0.000799999488000328)*pz);
IkReal x1393=((1.9366393802755e-7)*cj2);
IkReal x1394=(px*sj0);
IkReal x1395=(cj2*sj2);
CheckValue<IkReal> x1396=IKPowWithIntegerCheck(IKsign(((-2.35078576589711e-10)+(((-1.09432322725289e-7)*sj2))+(((-1.0)*x1389*x1390))+(((-1.18391642887962e-9)*x1394))+(((-1.0)*x1393*x1394))+((x1390*x1394))+((x1387*x1388))+((x1389*x1393))+((x1386*x1387))+(((-1.0)*x1388*x1391))+(((2.61831782568745e-10)*cj2))+(((1.18391642887962e-9)*x1389))+(((-0.15199981)*cj2*pz))+(((-0.00024208)*pz*sj2))+(((1.47989553609953e-6)*x1388))+(((1.47989553609953e-6)*x1386))+(((-1.0)*x1386*x1391))+(((0.410000000620062)*pz)))),-1);
if(!x1396.valid){
continue;
}
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal(((0.0462078104952378)+(((-7.90439616e-8)*cj2))+(((-0.000147354554786284)*x1395))+(((-0.999999680000154)*x1383))+(((-0.0462077224556484)*x1384))+(((-6.39999590400262e-7)*pz*x1389))+(((9.92619552252028e-5)*sj2))+(((-0.000799999488000328)*cj0*x1385))+(((6.39999590400262e-7)*sj0*x1385))+(((-1.0)*x1386*x1392)))),IkReal(((-0.000110558499438401)+(((-7.19951539231015e-7)*pz))+(((-1.0)*x1389*x1392))+(((-0.99999936000041)*pz*x1386))+(((-9.92527686758262e-5)*cj2))+(((-0.99999936000041)*cj0*x1385))+(((-0.0462077224556484)*x1395))+(((0.000799999488000328)*sj0*x1385))+(((0.000799999744000123)*x1383))+(((0.124639803988231)*sj2))+(((0.000147354554786284)*x1384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1396.value)))+(x1397.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1398=IKcos(j1);
IkReal x1399=IKsin(j1);
IkReal x1400=(cj0*py);
IkReal x1401=(py*sj0);
IkReal x1402=(cj0*px);
IkReal x1403=(px*sj0);
IkReal x1404=(cj2*x1398);
IkReal x1405=((0.000799999488000328)*x1398);
IkReal x1406=((6.39999590400262e-7)*x1398);
IkReal x1407=((0.000655999581152367)*x1398);
IkReal x1408=((0.000363679731622504)*x1399);
IkReal x1409=((0.000799999488000328)*x1399);
IkReal x1410=((0.819999476440458)*x1398);
IkReal x1411=((0.151999567696146)*x1399);
IkReal x1412=((0.99999936000041)*x1399);
IkReal x1413=((0.000655999581152367)*x1399);
IkReal x1414=((0.99999936000041)*x1398);
IkReal x1415=(sj2*x1398);
IkReal x1416=(pz*x1398);
IkReal x1417=(pz*x1399);
IkReal x1418=((6.39999590400262e-7)*x1399);
IkReal x1419=((5.24799664921893e-7)*x1399);
evalcond[0]=((((-0.00032652)*x1398))+(((-1.0)*cj2*x1411))+(((-0.151999567696146)*x1415))+pz+(((0.000363679731622504)*x1404))+(((0.409999870604041)*x1399))+(((-1.0)*sj2*x1408)));
evalcond[1]=((((-0.000799999744000123)*x1400))+(((0.000799999744000123)*x1403))+(((-0.00032652)*x1399))+(((0.151999567696146)*x1404))+(((-0.999999680000154)*x1401))+(((-0.999999680000154)*x1402))+(((-0.409999870604041)*x1398))+(((-1.0)*sj2*x1411))+(((0.000363679731622504)*x1415))+((cj2*x1408)));
evalcond[2]=((((-0.000799999744000123)*x1417))+(((0.303999617864764)*sj2))+((x1402*x1412))+((x1401*x1412))+(((-0.00024208)*cj2))+(((-1.0)*x1402*x1405))+((x1403*x1406))+(((-1.0)*x1401*x1405))+(((-1.0)*x1400*x1406))+(((7.19951539231015e-7)*x1399))+(((-0.999999680000154)*x1416))+(((-1.0)*x1403*x1409))+((x1400*x1409)));
evalcond[3]=((-0.410000000620062)+(((0.303999617864764)*cj2))+(((0.000799999744000123)*x1416))+(((-1.0)*x1400*x1418))+(((-1.0)*x1401*x1414))+(((-1.0)*x1402*x1409))+((x1403*x1405))+(((-1.0)*x1401*x1409))+(((-1.0)*x1402*x1414))+(((-1.0)*x1400*x1405))+(((-0.999999680000154)*x1417))+(((-7.19951539231015e-7)*x1398))+((x1403*x1418))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((1.15192209415461e-9)*pz))+(((-5.90360263062261e-7)*x1398))+(((1.15192172553972e-9)*x1403))+(((-1.0)*x1400*x1419))+(((-1.0)*x1401*x1413))+(((-1.0)*x1401*x1410))+(((-1.43990215692465e-6)*x1401))+(((-1.43990215692465e-6)*x1402))+(((-1.0)*pp))+(((-1.15192172553972e-9)*x1400))+((x1403*x1407))+(((0.000655999791072199)*x1416))+(((-1.0)*x1402*x1413))+(((-1.0)*x1402*x1410))+(((-1.0)*x1400*x1407))+(((-0.819999738840249)*x1417))+((x1403*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1420=pz*pz;
IkReal x1421=cj2*cj2;
IkReal x1422=(cj0*py);
IkReal x1423=((1.9366393802755e-7)*sj2);
IkReal x1424=(cj0*px);
IkReal x1425=((0.000799999488000328)*pz);
IkReal x1426=(py*sj0);
IkReal x1427=((0.000242079922534437)*sj2);
IkReal x1428=(cj2*sj2);
IkReal x1429=(px*sj0);
IkReal x1430=((0.000121599809088067)*cj2);
IkReal x1431=((0.99999936000041)*pz);
IkReal x1432=((6.39999590400262e-7)*pz);
IkReal x1433=((0.151999761360084)*cj2);
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal(((-9.70771448545795e-5)+((x1425*x1429))+(((-7.19951539231015e-7)*pz))+(((0.000248370645415934)*cj2))+(((-1.0)*x1422*x1425))+(((-1.0)*x1424*x1431))+(((-1.0)*x1426*x1431))+(((0.000799999744000123)*x1420))+(((0.0462077224556484)*x1428))+(((-0.0623197438057074)*sj2))+(((-0.000147354554786284)*x1421)))),IkReal(((-0.168100035241471)+((x1425*x1426))+((x1424*x1425))+(((0.000248361458866557)*sj2))+(((-1.0)*x1429*x1432))+(((0.1869596268379)*cj2))+((x1422*x1432))+(((-0.0462077224556484)*x1421))+(((0.999999680000154)*x1420))+(((-0.000147354554786284)*x1428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(IKsign(((2.95180037925896e-7)+((x1429*x1430))+(((-1.0)*x1426*x1427))+(((-1.0)*x1422*x1430))+((x1423*x1429))+(((-1.0)*x1424*x1427))+(((0.0003279998955361)*x1422))+(((-0.00024208)*cj2*pz))+(((-1.0)*x1422*x1423))+(((0.409999869420124)*x1424))+(((0.409999869420124)*x1426))+(((-2.61831782568745e-10)*sj2))+(((-1.0)*x1424*x1433))+(((-1.0)*x1426*x1433))+(((0.15199981)*pz*sj2))+(((-1.09432322725289e-7)*cj2))+(((-0.0003279998955361)*x1429))+(((-1.47989600966602e-6)*pz)))),-1);
if(!x1435.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1434.value)+(((1.5707963267949)*(x1435.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1436=IKcos(j1);
IkReal x1437=IKsin(j1);
IkReal x1438=(cj0*py);
IkReal x1439=(py*sj0);
IkReal x1440=(cj0*px);
IkReal x1441=(px*sj0);
IkReal x1442=(cj2*x1436);
IkReal x1443=((0.000799999488000328)*x1436);
IkReal x1444=((6.39999590400262e-7)*x1436);
IkReal x1445=((0.000655999581152367)*x1436);
IkReal x1446=((0.000363679731622504)*x1437);
IkReal x1447=((0.000799999488000328)*x1437);
IkReal x1448=((0.819999476440458)*x1436);
IkReal x1449=((0.151999567696146)*x1437);
IkReal x1450=((0.99999936000041)*x1437);
IkReal x1451=((0.000655999581152367)*x1437);
IkReal x1452=((0.99999936000041)*x1436);
IkReal x1453=(sj2*x1436);
IkReal x1454=(pz*x1436);
IkReal x1455=(pz*x1437);
IkReal x1456=((6.39999590400262e-7)*x1437);
IkReal x1457=((5.24799664921893e-7)*x1437);
evalcond[0]=((((-1.0)*cj2*x1449))+(((0.409999870604041)*x1437))+(((-0.00032652)*x1436))+(((-1.0)*sj2*x1446))+(((0.000363679731622504)*x1442))+pz+(((-0.151999567696146)*x1453)));
evalcond[1]=((((-0.00032652)*x1437))+(((-1.0)*sj2*x1449))+(((-0.999999680000154)*x1440))+(((-0.999999680000154)*x1439))+(((0.000363679731622504)*x1453))+((cj2*x1446))+(((-0.409999870604041)*x1436))+(((0.000799999744000123)*x1441))+(((0.151999567696146)*x1442))+(((-0.000799999744000123)*x1438)));
evalcond[2]=(((x1438*x1447))+(((0.303999617864764)*sj2))+((x1441*x1444))+(((-1.0)*x1438*x1444))+(((-1.0)*x1439*x1443))+(((-1.0)*x1441*x1447))+((x1439*x1450))+(((-0.00024208)*cj2))+(((-0.999999680000154)*x1454))+((x1440*x1450))+(((-0.000799999744000123)*x1455))+(((-1.0)*x1440*x1443))+(((7.19951539231015e-7)*x1437)));
evalcond[3]=((-0.410000000620062)+(((0.000799999744000123)*x1454))+(((0.303999617864764)*cj2))+((x1441*x1443))+(((-1.0)*x1438*x1443))+(((-1.0)*x1439*x1447))+(((-1.0)*x1440*x1452))+(((-0.999999680000154)*x1455))+(((-1.0)*x1439*x1452))+((x1441*x1456))+(((-1.0)*x1438*x1456))+(((-7.19951539231015e-7)*x1436))+(((-1.0)*x1440*x1447))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-5.90360263062261e-7)*x1436))+(((1.15192172553972e-9)*x1441))+(((1.15192209415461e-9)*pz))+((x1441*x1445))+(((-1.0)*x1438*x1445))+(((-1.0)*x1439*x1448))+(((-1.0)*x1440*x1451))+(((-0.819999738840249)*x1455))+(((-1.15192172553972e-9)*x1438))+(((-1.0)*pp))+(((-1.43990215692465e-6)*x1439))+(((0.000655999791072199)*x1454))+(((-1.43990215692465e-6)*x1440))+(((-1.0)*x1439*x1451))+((x1441*x1457))+(((-1.0)*x1438*x1457))+(((-1.0)*x1440*x1448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1458=(cj0*px);
IkReal x1459=(cj0*py);
IkReal x1460=((0.000121599615245046)*cj2);
IkReal x1461=(cj2*pz);
IkReal x1462=((0.000121599615245046)*sj2);
IkReal x1463=(px*sj0);
IkReal x1464=(pz*sj2);
IkReal x1465=((0.151999519056308)*cj2);
IkReal x1466=(py*sj0);
IkReal x1467=((0.151999519056308)*sj2);
IkReal x1468=((2.90943692196037e-7)*cj2);
IkReal x1469=((2.90943692196037e-7)*sj2);
IkReal x1470=((0.000363679615245046)*x1466);
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal(((((-0.409999870604041)*pz))+(((-1.0)*x1458*x1467))+(((-0.00032651989551365)*x1466))+(((2.6121591641092e-7)*x1463))+(((-1.0)*x1459*x1462))+((x1459*x1468))+(((0.151999567696146)*x1461))+(((-1.0)*x1466*x1467))+(((0.000363679615245046)*cj2*x1458))+(((-1.0)*x1463*x1468))+((cj2*x1470))+((x1462*x1463))+(((-2.6121591641092e-7)*x1459))+(((0.000363679731622504)*x1464))+(((-0.00032651989551365)*x1458)))),IkReal(((((-0.409999739404145)*x1458))+(((0.00032652)*pz))+(((0.000363679615245046)*sj2*x1458))+(((-0.000327999791523316)*x1459))+((x1465*x1466))+((x1459*x1460))+((x1459*x1469))+(((0.151999567696146)*x1464))+((x1458*x1465))+(((-1.0)*x1463*x1469))+(((-0.000363679731622504)*x1461))+((sj2*x1470))+(((-1.0)*x1460*x1463))+(((0.000327999791523316)*x1463))+(((-0.409999739404145)*x1466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(IKsign(((0.191204001353403)+(((-0.000198955488124787)*sj2))+(((-0.124639843671992)*cj2)))),-1);
if(!x1472.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1471.value)+(((1.5707963267949)*(x1472.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1473=IKcos(j1);
IkReal x1474=IKsin(j1);
IkReal x1475=(cj0*py);
IkReal x1476=(py*sj0);
IkReal x1477=(cj0*px);
IkReal x1478=(px*sj0);
IkReal x1479=(cj2*x1473);
IkReal x1480=((0.000799999488000328)*x1473);
IkReal x1481=((6.39999590400262e-7)*x1473);
IkReal x1482=((0.000655999581152367)*x1473);
IkReal x1483=((0.000363679731622504)*x1474);
IkReal x1484=((0.000799999488000328)*x1474);
IkReal x1485=((0.819999476440458)*x1473);
IkReal x1486=((0.151999567696146)*x1474);
IkReal x1487=((0.99999936000041)*x1474);
IkReal x1488=((0.000655999581152367)*x1474);
IkReal x1489=((0.99999936000041)*x1473);
IkReal x1490=(sj2*x1473);
IkReal x1491=(pz*x1473);
IkReal x1492=(pz*x1474);
IkReal x1493=((6.39999590400262e-7)*x1474);
IkReal x1494=((5.24799664921893e-7)*x1474);
evalcond[0]=((((-1.0)*cj2*x1486))+(((0.000363679731622504)*x1479))+(((0.409999870604041)*x1474))+(((-0.151999567696146)*x1490))+(((-0.00032652)*x1473))+pz+(((-1.0)*sj2*x1483)));
evalcond[1]=((((-0.409999870604041)*x1473))+((cj2*x1483))+(((-0.999999680000154)*x1476))+(((-0.999999680000154)*x1477))+(((-0.00032652)*x1474))+(((0.000363679731622504)*x1490))+(((-1.0)*sj2*x1486))+(((-0.000799999744000123)*x1475))+(((0.000799999744000123)*x1478))+(((0.151999567696146)*x1479)));
evalcond[2]=((((0.303999617864764)*sj2))+((x1476*x1487))+((x1477*x1487))+(((-0.000799999744000123)*x1492))+(((-0.999999680000154)*x1491))+(((-0.00024208)*cj2))+(((-1.0)*x1475*x1481))+(((-1.0)*x1477*x1480))+(((7.19951539231015e-7)*x1474))+((x1478*x1481))+((x1475*x1484))+(((-1.0)*x1478*x1484))+(((-1.0)*x1476*x1480)));
evalcond[3]=((-0.410000000620062)+(((0.303999617864764)*cj2))+(((-7.19951539231015e-7)*x1473))+(((0.000799999744000123)*x1491))+(((-0.999999680000154)*x1492))+(((-1.0)*x1475*x1493))+(((-1.0)*x1475*x1480))+(((-1.0)*x1477*x1484))+(((-1.0)*x1477*x1489))+((x1478*x1480))+((x1478*x1493))+(((-1.0)*x1476*x1489))+(((-1.0)*x1476*x1484))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((1.15192172553972e-9)*x1478))+(((1.15192209415461e-9)*pz))+(((-1.15192172553972e-9)*x1475))+(((-0.819999738840249)*x1492))+(((-5.90360263062261e-7)*x1473))+(((-1.0)*pp))+(((-1.0)*x1475*x1494))+(((-1.0)*x1475*x1482))+(((-1.0)*x1477*x1485))+(((-1.0)*x1477*x1488))+((x1478*x1482))+(((0.000655999791072199)*x1491))+(((-1.43990215692465e-6)*x1477))+(((-1.43990215692465e-6)*x1476))+((x1478*x1494))+(((-1.0)*x1476*x1488))+(((-1.0)*x1476*x1485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1495=px*px;
IkReal x1496=py*py;
IkReal x1497=((0.000799999744000123)*px);
IkReal x1498=((0.999999680000154)*py);
IkReal x1499=(px*py);
IkReal x1500=((((0.000799999744000123)*py))+(((0.999999680000154)*px)));
IkReal x1501=((((-0.000218092521236226)*px))+(((-0.99999936000041)*pp*py))+(((-9.21537085539955e-13)*px*pz))+(((-0.000198505473256706)*py*sj2))+(((0.272615651545282)*py))+(((0.000799999488000328)*pp*px))+(((1.58804378605365e-7)*px*sj2))+(((-0.249279527487206)*cj2*py))+(((0.000199423621989765)*cj2*px))+(((1.15192135692494e-9)*py*pz)));
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(IKsign((((x1500*(((((1.15192098831029e-9)*x1495))+(((-1.15192098831029e-9)*x1496))+(((-1.43990031385107e-6)*x1499))))))+(((((((-1.0)*x1497))+x1498))*(((((-1.43990123538786e-6)*x1496))+(((2.30384197662057e-9)*x1499))+(((-9.2153679064823e-13)*x1495)))))))),-1);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal((((x1501*(((((-1.0)*x1498))+x1497))))+(((1.26711304769944e-10)*x1496))+(((-1.26711304769944e-10)*x1495))+(((1.58389029593386e-7)*x1499)))),IkReal(((((-1.0)*x1500*x1501))+(((-1.01369043815955e-13)*x1495))+(((2.53422609539887e-10)*x1499))+(((-1.58389130962429e-7)*x1496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1502.value)))+(x1503.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1504=IKsin(j0);
IkReal x1505=IKcos(j0);
IkReal x1506=px*px;
IkReal x1507=py*py;
IkReal x1508=((0.000218092521236226)*py);
IkReal x1509=(px*pz);
IkReal x1510=(px*py);
IkReal x1511=(px*sj2);
IkReal x1512=((0.249279527487206)*cj2);
IkReal x1513=(py*pz);
IkReal x1514=((0.99999936000041)*pp);
IkReal x1515=(cj2*py);
IkReal x1516=(py*sj2);
IkReal x1517=(pp*py);
IkReal x1518=(cj2*px);
IkReal x1519=(pp*px);
IkReal x1520=((9.2153679064823e-13)*x1506);
IkReal x1521=((1.15192098831029e-9)*x1507);
IkReal x1522=((9.2153679064823e-13)*x1507);
IkReal x1523=((2.30384197662057e-9)*x1510);
IkReal x1524=((9.21537085539955e-13)*x1513);
IkReal x1525=((0.000799999488000328)*x1517);
IkReal x1526=((1.58804378605365e-7)*x1516);
IkReal x1527=((0.000199423621989765)*x1515);
IkReal x1528=((1.84307358129646e-12)*x1510);
IkReal x1529=((1.15192098831029e-9)*x1506);
IkReal x1530=((9.21537085539955e-13)*x1509);
IkReal x1531=((0.000799999488000328)*x1519);
IkReal x1532=((1.58804378605365e-7)*x1511);
IkReal x1533=((0.000199423621989765)*x1518);
IkReal x1534=(x1524+x1508);
IkReal x1535=((((-1.0)*x1521))+x1529+(((-1.43990031385107e-6)*x1510)));
IkReal x1536=((((-1.15192025108085e-9)*x1510))+(((-1.0)*x1522))+x1520);
IkReal x1537=(x1533+x1532+x1531);
IkReal x1538=(x1525+x1526+x1527);
evalcond[0]=((-0.109999996575991)+((x1504*(((((-0.000799999744000123)*py))+(((-0.999999680000154)*px))))))+((x1505*(((((-0.000799999744000123)*px))+(((0.999999680000154)*py)))))));
evalcond[1]=((((-0.000218092521236226)*px))+(((1.15192135692494e-9)*x1513))+(((-1.0)*x1530))+x1537+(((0.272615651545282)*py))+(((-1.0)*py*x1514))+(((-1.0)*py*x1512))+(((-0.000198505473256706)*x1516))+((x1504*(((((-1.43990123538786e-6)*x1507))+(((-1.0)*x1520))+x1523))))+((x1505*x1535)));
evalcond[2]=(((x1504*(((((-7.37229432518584e-16)*x1506))+(((-1.0)*x1521))+x1528))))+(((1.59538897591812e-7)*x1518))+(((1.27043502884292e-10)*x1511))+(((-1.0)*x1538))+(((-7.37229668431964e-16)*x1509))+x1534+(((6.39999590400262e-7)*x1519))+(((-1.74474016988981e-7)*px))+((x1505*x1536)));
evalcond[3]=((((-1.0)*x1538))+(((1.15192135692494e-9)*x1509))+((x1504*x1535))+(((-1.0)*px*x1514))+(((-1.0)*px*x1512))+x1534+((x1505*(((((-1.43990123538786e-6)*x1506))+(((-1.0)*x1523))+(((-1.0)*x1522))))))+(((0.272615651545282)*px))+(((-0.000198505473256706)*x1511)));
evalcond[4]=((((7.37229668431964e-16)*x1513))+(((-1.0)*x1537))+(((0.000218092521236226)*px))+((x1504*x1536))+((x1505*(((((-7.37229432518584e-16)*x1507))+(((-1.0)*x1529))+(((-1.0)*x1528))))))+x1530+(((1.74474016988981e-7)*py))+(((-1.27043502884292e-10)*x1516))+(((-6.39999590400262e-7)*x1517))+(((-1.59538897591812e-7)*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
j1eval[0]=((961.039090479766)+(((-1.0)*sj2))+(((-626.471000356706)*cj2)));
j1eval[1]=IKsign(((0.191204001353403)+(((-0.000198955488124787)*sj2))+(((-0.124639843671992)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1539=(cj2*pz);
IkReal x1540=(cj0*px);
IkReal x1541=((580524487.397462)*cj2);
IkReal x1542=(cj0*py);
IkReal x1543=(pz*sj2);
IkReal x1544=(py*sj0);
IkReal x1545=((0.000242079922534437)*sj2);
IkReal x1546=((0.151999761360084)*cj2);
IkReal x1547=(px*sj0);
IkReal x1548=((0.000121599809088067)*cj2);
IkReal x1549=((464419.58991797)*cj2);
IkReal x1550=((924562.786684915)*sj2);
IkReal x1551=(sj2*x1542);
j1eval[0]=((1127.36519237651)+(((-739.650229347932)*x1551))+(((-1.0)*sj2))+(((1252712.30374786)*x1542))+(((-1.0)*x1540*x1550))+(((-1.0)*x1540*x1541))+(((-5652.08698175315)*pz))+((x1547*x1549))+(((-924563.082544959)*x1539))+(((-1252712.30374786)*x1547))+(((739.650229347932)*sj2*x1547))+(((-417.948965750778)*cj2))+(((-1.0)*x1544*x1550))+(((-1.0)*x1542*x1549))+(((1565890379.68482)*x1544))+(((1565890379.68482)*x1540))+(((580524673.165268)*x1543))+(((-1.0)*x1541*x1544)));
j1eval[1]=IKsign(((2.95180037925896e-7)+(((1.9366393802755e-7)*sj2*x1547))+(((-1.0)*x1540*x1546))+(((-1.0)*x1540*x1545))+(((-0.00024208)*x1539))+((x1547*x1548))+(((0.15199981)*x1543))+(((-1.9366393802755e-7)*x1551))+(((0.409999869420124)*x1544))+(((0.409999869420124)*x1540))+(((0.0003279998955361)*x1542))+(((-2.61831782568745e-10)*sj2))+(((-1.0)*x1542*x1548))+(((-0.0003279998955361)*x1547))+(((-1.09432322725289e-7)*cj2))+(((-1.0)*x1544*x1546))+(((-1.0)*x1544*x1545))+(((-1.47989600966602e-6)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1552=(cj0*py);
IkReal x1553=((823.826402375903)*cj2);
IkReal x1554=(py*sj0);
IkReal x1555=((1029783.00296988)*cj2);
IkReal x1556=(pz*sj2);
IkReal x1557=((0.151999761360084)*sj2);
IkReal x1558=(px*sj0);
IkReal x1559=(cj0*px);
IkReal x1560=((0.000121599809088067)*sj2);
IkReal x1561=((0.000242079922534437)*cj2);
IkReal x1562=(cj2*pz);
IkReal x1563=((1.9366393802755e-7)*cj2);
IkReal x1564=((646591295.409166)*sj2);
IkReal x1565=((517273.036327333)*sj2);
j1eval[0]=((-1.0)+(((1744097682.43427)*pz))+(((-1.0)*x1559*x1564))+(((-1.0)*x1552*x1565))+((x1552*x1553))+((x1555*x1559))+(((5.03625828459028)*x1552))+(((-465.513805268119)*sj2))+(((-1029783.33250039)*x1556))+(((-646591502.318348)*x1562))+(((-1.0)*x1553*x1558))+(((6295.32285573784)*x1559))+(((6295.32285573784)*x1554))+((x1554*x1555))+(((-5.03625828459028)*x1558))+(((-1.0)*x1554*x1564))+(((1.11380537676867)*cj2))+((x1558*x1565)));
j1eval[1]=IKsign(((-2.35078576589711e-10)+(((-0.15199981)*x1562))+(((-1.09432322725289e-7)*sj2))+(((-1.18391642887962e-9)*x1558))+(((-1.0)*x1552*x1560))+(((-0.00024208)*x1556))+(((1.47989553609953e-6)*x1554))+(((1.47989553609953e-6)*x1559))+((x1552*x1563))+((x1554*x1561))+(((-1.0)*x1557*x1559))+(((1.18391642887962e-9)*x1552))+(((2.61831782568745e-10)*cj2))+((x1559*x1561))+(((-1.0)*x1554*x1557))+((x1558*x1560))+(((-1.0)*x1558*x1563))+(((0.410000000620062)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1566=pz*pz;
IkReal x1567=cj2*cj2;
IkReal x1568=(px*pz);
IkReal x1569=(py*sj0);
IkReal x1570=((0.000242079922534437)*cj2);
IkReal x1571=(cj0*px);
IkReal x1572=(cj0*py);
IkReal x1573=((0.000121599809088067)*sj2);
IkReal x1574=((0.151999761360084)*sj2);
IkReal x1575=((0.000799999488000328)*pz);
IkReal x1576=((1.9366393802755e-7)*cj2);
IkReal x1577=(px*sj0);
IkReal x1578=(cj2*sj2);
CheckValue<IkReal> x1579 = IKatan2WithCheck(IkReal(((0.0462078104952378)+(((-7.90439616e-8)*cj2))+(((-0.0462077224556484)*x1567))+(((-0.999999680000154)*x1566))+(((-1.0)*x1569*x1575))+(((-6.39999590400262e-7)*pz*x1572))+(((9.92619552252028e-5)*sj2))+(((-0.000799999488000328)*cj0*x1568))+(((-0.000147354554786284)*x1578))+(((6.39999590400262e-7)*sj0*x1568)))),IkReal(((-0.000110558499438401)+(((-7.19951539231015e-7)*pz))+(((-1.0)*x1572*x1575))+(((0.000799999488000328)*sj0*x1568))+(((-0.0462077224556484)*x1578))+(((-9.92527686758262e-5)*cj2))+(((-0.99999936000041)*pz*x1569))+(((0.000147354554786284)*x1567))+(((0.000799999744000123)*x1566))+(((-0.99999936000041)*cj0*x1568))+(((0.124639803988231)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1579.valid){
continue;
}
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(IKsign(((-2.35078576589711e-10)+(((-1.0)*x1576*x1577))+(((-1.09432322725289e-7)*sj2))+(((-1.0)*x1571*x1574))+((x1572*x1576))+((x1569*x1570))+(((-1.0)*x1572*x1573))+((x1570*x1571))+((x1573*x1577))+(((1.47989553609953e-6)*x1569))+(((1.18391642887962e-9)*x1572))+(((1.47989553609953e-6)*x1571))+(((-1.0)*x1569*x1574))+(((2.61831782568745e-10)*cj2))+(((-0.15199981)*cj2*pz))+(((-0.00024208)*pz*sj2))+(((-1.18391642887962e-9)*x1577))+(((0.410000000620062)*pz)))),-1);
if(!x1580.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1579.value)+(((1.5707963267949)*(x1580.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1581=IKcos(j1);
IkReal x1582=IKsin(j1);
IkReal x1583=(cj0*py);
IkReal x1584=(py*sj0);
IkReal x1585=(cj0*px);
IkReal x1586=(px*sj0);
IkReal x1587=(cj2*x1581);
IkReal x1588=((0.000799999488000328)*x1581);
IkReal x1589=((6.39999590400262e-7)*x1581);
IkReal x1590=((0.000655999581152367)*x1581);
IkReal x1591=((0.000363679731622504)*x1582);
IkReal x1592=((0.000799999488000328)*x1582);
IkReal x1593=((0.819999476440458)*x1581);
IkReal x1594=((0.151999567696146)*x1582);
IkReal x1595=((0.99999936000041)*x1582);
IkReal x1596=((0.000655999581152367)*x1582);
IkReal x1597=((0.99999936000041)*x1581);
IkReal x1598=(sj2*x1581);
IkReal x1599=(pz*x1581);
IkReal x1600=(pz*x1582);
IkReal x1601=((6.39999590400262e-7)*x1582);
IkReal x1602=((5.24799664921893e-7)*x1582);
evalcond[0]=((((-0.151999567696146)*x1598))+(((-1.0)*cj2*x1594))+pz+(((0.000363679731622504)*x1587))+(((0.409999870604041)*x1582))+(((-1.0)*sj2*x1591))+(((-0.00032652)*x1581)));
evalcond[1]=((((-0.409999870604041)*x1581))+(((-0.999999680000154)*x1585))+(((-0.999999680000154)*x1584))+((cj2*x1591))+(((0.151999567696146)*x1587))+(((0.000799999744000123)*x1586))+(((0.000363679731622504)*x1598))+(((-1.0)*sj2*x1594))+(((-0.000799999744000123)*x1583))+(((-0.00032652)*x1582)));
evalcond[2]=(((x1586*x1589))+(((-0.000799999744000123)*x1600))+(((0.303999617864764)*sj2))+(((-1.0)*x1585*x1588))+((x1584*x1595))+(((-0.999999680000154)*x1599))+(((-1.0)*x1584*x1588))+((x1583*x1592))+(((-0.00024208)*cj2))+(((-1.0)*x1586*x1592))+(((7.19951539231015e-7)*x1582))+((x1585*x1595))+(((-1.0)*x1583*x1589)));
evalcond[3]=((-0.410000000620062)+((x1586*x1588))+(((-1.0)*x1585*x1597))+(((-1.0)*x1585*x1592))+(((0.303999617864764)*cj2))+(((-7.19951539231015e-7)*x1581))+(((-1.0)*x1583*x1601))+((x1586*x1601))+(((-1.0)*x1584*x1597))+(((-1.0)*x1584*x1592))+(((0.000799999744000123)*x1599))+(((-0.999999680000154)*x1600))+(((0.00024208)*sj2))+(((-1.0)*x1583*x1588)));
evalcond[4]=((-0.0635841749976017)+(((-1.0)*x1583*x1590))+((x1586*x1590))+(((-1.0)*x1585*x1596))+(((-1.0)*x1585*x1593))+(((1.15192209415461e-9)*pz))+(((-1.0)*x1583*x1602))+(((-1.15192172553972e-9)*x1583))+((x1586*x1602))+(((0.000655999791072199)*x1599))+(((-1.0)*x1584*x1596))+(((-1.0)*x1584*x1593))+(((-1.0)*pp))+(((1.15192172553972e-9)*x1586))+(((-1.43990215692465e-6)*x1585))+(((-1.43990215692465e-6)*x1584))+(((-5.90360263062261e-7)*x1581))+(((-0.819999738840249)*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1603=pz*pz;
IkReal x1604=cj2*cj2;
IkReal x1605=(cj0*py);
IkReal x1606=((1.9366393802755e-7)*sj2);
IkReal x1607=(cj0*px);
IkReal x1608=((0.000799999488000328)*pz);
IkReal x1609=(py*sj0);
IkReal x1610=((0.000242079922534437)*sj2);
IkReal x1611=(cj2*sj2);
IkReal x1612=(px*sj0);
IkReal x1613=((0.000121599809088067)*cj2);
IkReal x1614=((0.99999936000041)*pz);
IkReal x1615=((6.39999590400262e-7)*pz);
IkReal x1616=((0.151999761360084)*cj2);
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal(((-9.70771448545795e-5)+(((-7.19951539231015e-7)*pz))+(((-0.000147354554786284)*x1604))+(((0.000248370645415934)*cj2))+((x1608*x1612))+(((-1.0)*x1605*x1608))+(((-1.0)*x1609*x1614))+(((0.0462077224556484)*x1611))+(((-1.0)*x1607*x1614))+(((-0.0623197438057074)*sj2))+(((0.000799999744000123)*x1603)))),IkReal(((-0.168100035241471)+(((0.000248361458866557)*sj2))+(((-0.000147354554786284)*x1611))+(((-0.0462077224556484)*x1604))+((x1607*x1608))+((x1608*x1609))+(((0.1869596268379)*cj2))+((x1605*x1615))+(((0.999999680000154)*x1603))+(((-1.0)*x1612*x1615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign(((2.95180037925896e-7)+(((-0.0003279998955361)*x1612))+(((0.409999869420124)*x1607))+(((0.409999869420124)*x1609))+(((-0.00024208)*cj2*pz))+(((-1.0)*x1605*x1606))+(((-2.61831782568745e-10)*sj2))+(((-1.0)*x1605*x1613))+(((-1.0)*x1609*x1610))+(((-1.0)*x1609*x1616))+((x1612*x1613))+(((0.15199981)*pz*sj2))+(((-1.09432322725289e-7)*cj2))+(((0.0003279998955361)*x1605))+((x1606*x1612))+(((-1.0)*x1607*x1610))+(((-1.0)*x1607*x1616))+(((-1.47989600966602e-6)*pz)))),-1);
if(!x1618.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1617.value)+(((1.5707963267949)*(x1618.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1619=IKcos(j1);
IkReal x1620=IKsin(j1);
IkReal x1621=(cj0*py);
IkReal x1622=(py*sj0);
IkReal x1623=(cj0*px);
IkReal x1624=(px*sj0);
IkReal x1625=(cj2*x1619);
IkReal x1626=((0.000799999488000328)*x1619);
IkReal x1627=((6.39999590400262e-7)*x1619);
IkReal x1628=((0.000655999581152367)*x1619);
IkReal x1629=((0.000363679731622504)*x1620);
IkReal x1630=((0.000799999488000328)*x1620);
IkReal x1631=((0.819999476440458)*x1619);
IkReal x1632=((0.151999567696146)*x1620);
IkReal x1633=((0.99999936000041)*x1620);
IkReal x1634=((0.000655999581152367)*x1620);
IkReal x1635=((0.99999936000041)*x1619);
IkReal x1636=(sj2*x1619);
IkReal x1637=(pz*x1619);
IkReal x1638=(pz*x1620);
IkReal x1639=((6.39999590400262e-7)*x1620);
IkReal x1640=((5.24799664921893e-7)*x1620);
evalcond[0]=((((0.409999870604041)*x1620))+(((-0.151999567696146)*x1636))+(((-0.00032652)*x1619))+(((0.000363679731622504)*x1625))+(((-1.0)*cj2*x1632))+pz+(((-1.0)*sj2*x1629)));
evalcond[1]=((((0.000799999744000123)*x1624))+(((-1.0)*sj2*x1632))+(((-0.409999870604041)*x1619))+(((-0.000799999744000123)*x1621))+(((-0.00032652)*x1620))+(((0.151999567696146)*x1625))+(((-0.999999680000154)*x1622))+(((-0.999999680000154)*x1623))+((cj2*x1629))+(((0.000363679731622504)*x1636)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x1624*x1630))+((x1621*x1630))+(((-0.999999680000154)*x1637))+(((-0.00024208)*cj2))+(((7.19951539231015e-7)*x1620))+(((-1.0)*x1623*x1626))+((x1623*x1633))+(((-1.0)*x1621*x1627))+(((-1.0)*x1622*x1626))+((x1622*x1633))+(((-0.000799999744000123)*x1638))+((x1624*x1627)));
evalcond[3]=((-0.410000000620062)+(((-1.0)*x1621*x1639))+(((0.303999617864764)*cj2))+(((-7.19951539231015e-7)*x1619))+(((-1.0)*x1622*x1630))+(((-1.0)*x1622*x1635))+(((-1.0)*x1623*x1630))+(((-1.0)*x1623*x1635))+((x1624*x1639))+(((-0.999999680000154)*x1638))+(((-1.0)*x1621*x1626))+(((0.000799999744000123)*x1637))+((x1624*x1626))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749976017)+(((-1.0)*x1621*x1640))+(((1.15192209415461e-9)*pz))+(((-1.0)*x1622*x1631))+(((-1.0)*x1622*x1634))+(((-1.0)*x1623*x1631))+(((-1.0)*x1623*x1634))+((x1624*x1640))+(((-5.90360263062261e-7)*x1619))+(((-1.0)*pp))+(((-0.819999738840249)*x1638))+(((0.000655999791072199)*x1637))+(((-1.0)*x1621*x1628))+(((-1.43990215692465e-6)*x1622))+(((-1.43990215692465e-6)*x1623))+((x1624*x1628))+(((1.15192172553972e-9)*x1624))+(((-1.15192172553972e-9)*x1621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1641=(cj0*px);
IkReal x1642=(cj0*py);
IkReal x1643=((0.000121599615245046)*cj2);
IkReal x1644=(cj2*pz);
IkReal x1645=((0.000121599615245046)*sj2);
IkReal x1646=(px*sj0);
IkReal x1647=(pz*sj2);
IkReal x1648=((0.151999519056308)*cj2);
IkReal x1649=(py*sj0);
IkReal x1650=((0.151999519056308)*sj2);
IkReal x1651=((2.90943692196037e-7)*cj2);
IkReal x1652=((2.90943692196037e-7)*sj2);
IkReal x1653=((0.000363679615245046)*x1649);
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal(((((0.000363679731622504)*x1647))+(((-0.409999870604041)*pz))+(((-1.0)*x1641*x1650))+(((-1.0)*x1646*x1651))+((x1645*x1646))+((cj2*x1653))+(((-1.0)*x1642*x1645))+(((-2.6121591641092e-7)*x1642))+(((0.000363679615245046)*cj2*x1641))+(((2.6121591641092e-7)*x1646))+(((-0.00032651989551365)*x1641))+(((-0.00032651989551365)*x1649))+(((-1.0)*x1649*x1650))+((x1642*x1651))+(((0.151999567696146)*x1644)))),IkReal(((((0.00032652)*pz))+((x1648*x1649))+(((-1.0)*x1646*x1652))+((x1641*x1648))+((sj2*x1653))+(((-1.0)*x1643*x1646))+(((-0.000327999791523316)*x1642))+(((-0.409999739404145)*x1641))+(((-0.409999739404145)*x1649))+((x1642*x1643))+((x1642*x1652))+(((0.000363679615245046)*sj2*x1641))+(((0.000327999791523316)*x1646))+(((0.151999567696146)*x1647))+(((-0.000363679731622504)*x1644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
CheckValue<IkReal> x1655=IKPowWithIntegerCheck(IKsign(((0.191204001353403)+(((-0.000198955488124787)*sj2))+(((-0.124639843671992)*cj2)))),-1);
if(!x1655.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1654.value)+(((1.5707963267949)*(x1655.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1656=IKcos(j1);
IkReal x1657=IKsin(j1);
IkReal x1658=(cj0*py);
IkReal x1659=(py*sj0);
IkReal x1660=(cj0*px);
IkReal x1661=(px*sj0);
IkReal x1662=(cj2*x1656);
IkReal x1663=((0.000799999488000328)*x1656);
IkReal x1664=((6.39999590400262e-7)*x1656);
IkReal x1665=((0.000655999581152367)*x1656);
IkReal x1666=((0.000363679731622504)*x1657);
IkReal x1667=((0.000799999488000328)*x1657);
IkReal x1668=((0.819999476440458)*x1656);
IkReal x1669=((0.151999567696146)*x1657);
IkReal x1670=((0.99999936000041)*x1657);
IkReal x1671=((0.000655999581152367)*x1657);
IkReal x1672=((0.99999936000041)*x1656);
IkReal x1673=(sj2*x1656);
IkReal x1674=(pz*x1656);
IkReal x1675=(pz*x1657);
IkReal x1676=((6.39999590400262e-7)*x1657);
IkReal x1677=((5.24799664921893e-7)*x1657);
evalcond[0]=((((0.000363679731622504)*x1662))+(((-1.0)*sj2*x1666))+(((-0.151999567696146)*x1673))+(((0.409999870604041)*x1657))+(((-0.00032652)*x1656))+pz+(((-1.0)*cj2*x1669)));
evalcond[1]=((((0.151999567696146)*x1662))+(((-1.0)*sj2*x1669))+(((-0.999999680000154)*x1659))+(((-0.999999680000154)*x1660))+((cj2*x1666))+(((-0.409999870604041)*x1656))+(((-0.00032652)*x1657))+(((0.000363679731622504)*x1673))+(((0.000799999744000123)*x1661))+(((-0.000799999744000123)*x1658)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-0.999999680000154)*x1674))+(((-1.0)*x1661*x1667))+(((-0.000799999744000123)*x1675))+(((7.19951539231015e-7)*x1657))+(((-0.00024208)*cj2))+((x1658*x1667))+(((-1.0)*x1660*x1663))+((x1660*x1670))+((x1659*x1670))+(((-1.0)*x1658*x1664))+((x1661*x1664))+(((-1.0)*x1659*x1663)));
evalcond[3]=((-0.410000000620062)+(((0.303999617864764)*cj2))+(((-0.999999680000154)*x1675))+(((-1.0)*x1659*x1672))+(((-1.0)*x1658*x1676))+(((-7.19951539231015e-7)*x1656))+(((0.000799999744000123)*x1674))+(((-1.0)*x1660*x1667))+(((-1.0)*x1658*x1663))+((x1661*x1663))+(((-1.0)*x1660*x1672))+(((0.00024208)*sj2))+(((-1.0)*x1659*x1667))+((x1661*x1676)));
evalcond[4]=((-0.0635841749976017)+(((-1.43990215692465e-6)*x1660))+(((-1.43990215692465e-6)*x1659))+(((1.15192209415461e-9)*pz))+(((-0.819999738840249)*x1675))+(((-1.0)*x1659*x1671))+(((-1.0)*x1658*x1677))+(((-1.0)*pp))+(((-1.15192172553972e-9)*x1658))+(((1.15192172553972e-9)*x1661))+(((0.000655999791072199)*x1674))+(((-5.90360263062261e-7)*x1656))+(((-1.0)*x1660*x1668))+(((-1.0)*x1658*x1665))+((x1661*x1665))+(((-1.0)*x1660*x1671))+(((-1.0)*x1659*x1668))+((x1661*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x86=((0.00238999621412756)*cj2);
IkReal x87=((0.99999714395497)*sj2);
IkReal x88=((0.999999680000154)*sj0);
IkReal x89=((0.000799999744000123)*sj0);
IkReal x90=((0.999999680000154)*cj0);
IkReal x91=((0.000799999744000123)*cj0);
IkReal x92=(x89+(((-1.0)*x90)));
IkReal x93=(x87+(((-1.0)*x86)));
IkReal x94=(x86+(((-1.0)*x87)));
IkReal x95=((-0.000799999744000123)*sj0);
IkReal x96=((-1.0)*cj1);
IkReal x97=(x88+x91);
IkReal x98=((((0.00238999621412756)*sj2))+(((0.99999714395497)*cj2)));
IkReal x99=(sj1*x93);
IkReal x100=(sj1*x98);
IkReal x101=(cj1*x98);
IkReal x102=(x100+((cj1*x93)));
IkReal x103=(x101+((sj1*x94)));
IkReal x104=(((x96*x98))+x99);
IkReal x105=(x100+((x94*x96)));
IkReal x106=(cj0*x103);
IkReal x107=(x103*x90);
IkReal x108=((((-1.0)*x103*x89))+x107);
IkReal x109=(((x102*x90))+((x102*x95)));
IkReal x110=(((x102*x88))+((x102*x91)));
IkReal x111=(((x103*x88))+((x103*x91)));
new_r00=(((r10*x92))+((r00*x97)));
new_r01=(((r11*x92))+((r01*x97)));
new_r02=(((r12*x92))+((r02*x97)));
new_r10=(((r10*x110))+((r00*x109))+((r20*((x99+(((-1.0)*x101)))))));
new_r11=(((r21*x104))+((r11*x110))+((r01*x109)));
new_r12=(((r02*x109))+((r22*x104))+((r12*x110)));
new_r20=(((r10*x111))+((r20*x105))+((r00*x108)));
new_r21=(((r21*x105))+((r11*x111))+((r01*x108)));
new_r22=(((r02*((((x103*x95))+x107))))+((r12*x111))+((r22*(((((-1.0)*cj1*x94))+x100)))));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=new_r12;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j5mul = 1;
j5=0;
j3mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].fmul = j3mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x112=new_r22*new_r22;
IkReal x113=((16.0)*new_r10);
IkReal x114=((16.0)*new_r01);
IkReal x115=((16.0)*new_r22);
IkReal x116=((8.0)*new_r11);
IkReal x117=((8.0)*new_r00);
IkReal x118=(x112*x113);
IkReal x119=(x112*x114);
j3eval[0]=((IKabs(((((-1.0)*x118))+x113)))+(IKabs((((x112*x116))+(((-1.0)*new_r22*x117)))))+(IKabs((((new_r11*x115))+(((16.0)*new_r00))+(((-32.0)*new_r00*x112)))))+(IKabs(((((-1.0)*x113))+x118)))+(IKabs((((new_r22*x116))+(((-1.0)*x117)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x115))+(((-16.0)*new_r11*x112)))))+(IKabs(((((-1.0)*x119))+x114)))+(IKabs(((((-1.0)*x114))+x119))));
if( IKabs(j3eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j5]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j3evalpoly[1];
IkReal x120=new_r22*new_r22;
IkReal x121=((16.0)*new_r10);
IkReal x122=(new_r11*new_r22);
IkReal x123=(x120*x121);
IkReal x124=((((-8.0)*new_r00))+(((8.0)*x122)));
op[0]=x124;
op[1]=((((-1.0)*x123))+x121);
op[2]=((((16.0)*x122))+(((16.0)*new_r00))+(((-32.0)*new_r00*x120)));
op[3]=((((-1.0)*x121))+x123);
op[4]=x124;
polyroots4(op,zeror,numroots);
IkReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[4]={true,true,true,true};
_nj3 = 4;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

IkReal x125=new_r22*new_r22;
IkReal x126=((16.0)*new_r01);
IkReal x127=(new_r00*new_r22);
IkReal x128=((8.0)*x127);
IkReal x129=(new_r11*x125);
IkReal x130=((8.0)*x129);
IkReal x131=(x125*x126);
j3evalpoly[0]=((((htj3*htj3)*(((((-16.0)*x129))+(((-16.0)*x127))+(((32.0)*new_r11))))))+(((htj3*htj3*htj3)*(((((-1.0)*x126))+x131))))+(((-1.0)*x128))+x130+(((htj3*htj3*htj3*htj3)*(((((-1.0)*x128))+x130))))+((htj3*((x126+(((-1.0)*x131)))))));
if( IKabs(j3evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x132=cj3*cj3;
IkReal x133=(cj3*new_r22);
IkReal x134=((-1.0)+x132+(((-1.0)*x132*(new_r22*new_r22))));
j5eval[0]=x134;
j5eval[1]=((IKabs((((new_r01*x133))+((new_r00*sj3)))))+(IKabs((((new_r01*sj3))+(((-1.0)*new_r00*x133))))));
j5eval[2]=IKsign(x134);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x135=new_r22*new_r22;
j5eval[0]=(((cj3*x135))+(((-1.0)*cj3)));
j5eval[1]=((((-1.0)*sj3))+((sj3*x135)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x136=IKsin(j5);
IkReal x137=IKcos(j5);
IkReal x138=((0.000799999744000123)*new_r22);
IkReal x139=((0.999999680000154)*new_r22);
IkReal x140=((1.0)*x137);
evalcond[0]=(((new_r22*x136))+new_r11);
evalcond[1]=((((-1.0)*new_r22*x140))+new_r10);
evalcond[2]=((((-1.0)*x136))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x140))+(((-1.0)*new_r01)));
evalcond[4]=((((-0.000799999744000123)*x137))+((new_r10*x138)));
evalcond[5]=((((0.000799999744000123)*x136))+((new_r11*x138)));
evalcond[6]=((((-1.0)*new_r10*x139))+(((0.999999680000154)*x137)));
evalcond[7]=((((-1.0)*new_r11*x139))+(((-0.999999680000154)*x136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x141=IKsin(j5);
IkReal x142=IKcos(j5);
IkReal x143=((0.000799999744000123)*new_r22);
IkReal x144=((0.999999680000154)*new_r22);
IkReal x145=((1.0)*x142);
evalcond[0]=((((-1.0)*x141))+new_r00);
evalcond[1]=((((-1.0)*x145))+new_r01);
evalcond[2]=(((new_r22*x141))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r22*x145))+(((-1.0)*new_r10)));
evalcond[4]=((((-1.0)*new_r10*x143))+(((-0.000799999744000123)*x142)));
evalcond[5]=((((-1.0)*new_r11*x143))+(((0.000799999744000123)*x141)));
evalcond[6]=((((0.999999680000154)*x142))+((new_r10*x144)));
evalcond[7]=((((-0.999999680000154)*x141))+((new_r11*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x146=IKsin(j5);
IkReal x147=IKcos(j5);
IkReal x148=(new_r01*new_r22);
IkReal x149=(new_r00*new_r22);
IkReal x150=((1.0)*x147);
evalcond[0]=((((-1.0)*x146))+new_r10);
evalcond[1]=((((-1.0)*x150))+new_r11);
evalcond[2]=(((new_r22*x146))+new_r01);
evalcond[3]=((((-1.0)*new_r22*x150))+new_r00);
evalcond[4]=((((-0.000799999744000123)*x147))+(((0.000799999744000123)*x149)));
evalcond[5]=((((0.000799999744000123)*x146))+(((0.000799999744000123)*x148)));
evalcond[6]=((((0.999999680000154)*x147))+(((-0.999999680000154)*x149)));
evalcond[7]=((((-0.999999680000154)*x146))+(((-0.999999680000154)*x148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x151=IKsin(j5);
IkReal x152=IKcos(j5);
IkReal x153=(new_r01*new_r22);
IkReal x154=(new_r00*new_r22);
IkReal x155=((1.0)*x152);
evalcond[0]=((((-1.0)*x151))+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*x155))+(((-1.0)*new_r11)));
evalcond[2]=(((new_r22*x151))+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r22*x155))+(((-1.0)*new_r00)));
evalcond[4]=((((-0.000799999744000123)*x152))+(((-0.000799999744000123)*x154)));
evalcond[5]=((((0.000799999744000123)*x151))+(((-0.000799999744000123)*x153)));
evalcond[6]=((((0.999999680000154)*x154))+(((0.999999680000154)*x152)));
evalcond[7]=((((-0.999999680000154)*x151))+(((0.999999680000154)*x153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x156=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x156.valid){
continue;
}
if((x156.value) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(x156.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst18)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
cj3=gconst18;
if( (gconst18) < -1-IKFAST_SINCOS_THRESH || (gconst18) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst18);
CheckValue<IkReal> x157=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x157.valid){
continue;
}
if((x157.value) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(x157.value)));
IkReal x158=((1.0)*new_r22);
CheckValue<IkReal> x161=IKPowWithIntegerCheck(((1.0)+(((-1.0)*new_r22*x158))),-1);
if(!x161.valid){
continue;
}
IkReal x159=x161.value;
CheckValue<IkReal> x162=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x162.valid){
continue;
}
CheckValue<IkReal> x163=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x163.valid){
continue;
}
IkReal x160=((-1.0)*((((x158*(x162.value)))+((x158*(pow(((1.0)-(((1.0)*(x163.value)))),1.0)))))));
j5eval[0]=x160;
j5eval[1]=IKsign(x160);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
cj3=gconst18;
if( (gconst18) < -1-IKFAST_SINCOS_THRESH || (gconst18) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst18);
CheckValue<IkReal> x164=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x164.valid){
continue;
}
if((x164.value) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(x164.value)));
IkReal x165=new_r22*new_r22;
IkReal x166=((1.0)*x165);
CheckValue<IkReal> x169=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x166))),-1);
if(!x169.valid){
continue;
}
IkReal x167=x169.value;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x165))),-1);
if(!x170.valid){
continue;
}
IkReal x168=((((-1.0)*(pow(((1.0)+(((-1.0)*x167))),1.0))))+(((-1.0)*x166*(x170.value))));
j5eval[0]=x168;
j5eval[1]=IKsign(x168);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
cj3=gconst18;
if( (gconst18) < -1-IKFAST_SINCOS_THRESH || (gconst18) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst18);
CheckValue<IkReal> x171=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x171.valid){
continue;
}
if((x171.value) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(x171.value)));
j5eval[0]=new_r22;
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x172.valid){
continue;
}
j5eval[1]=((1.0)+(((-1.0)*(x172.value))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x173=gconst18*gconst18;
IkReal x174=((1.0)+(((-1.0)*x173)));
if((x174) < -0.00001)
continue;
IkReal x175=IKsqrt(x174);
IkReal x176=(new_r11*x175);
CheckValue<IkReal> x177=IKPowWithIntegerCheck(new_r22,-1);
if(!x177.valid){
continue;
}
CheckValue<IkReal> x178=IKPowWithIntegerCheck(x175,-1);
if(!x178.valid){
continue;
}
if( IKabs(((x177.value)*(((((-1.0)*x176))+(((-1.0)*gconst18*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x178.value)*((((new_r01*x173))+((gconst18*x176))+(((-1.0)*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x177.value)*(((((-1.0)*x176))+(((-1.0)*gconst18*new_r01))))))+IKsqr(((x178.value)*((((new_r01*x173))+((gconst18*x176))+(((-1.0)*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x177.value)*(((((-1.0)*x176))+(((-1.0)*gconst18*new_r01))))), ((x178.value)*((((new_r01*x173))+((gconst18*x176))+(((-1.0)*new_r01))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x179=IKsin(j5);
IkReal x180=IKcos(j5);
IkReal x181=((0.000799999744000123)*new_r22);
IkReal x182=(gconst18*new_r00);
IkReal x183=((0.999999680000154)*new_r22);
IkReal x184=(gconst18*new_r01);
IkReal x185=(gconst18*x179);
IkReal x186=(new_r22*x180);
IkReal x187=((1.0)*x180);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x188=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
IkReal x189=(new_r10*x188);
IkReal x190=(new_r11*x188);
IkReal x191=((1.0)*x188);
IkReal x192=(x179*x188);
evalcond[0]=(x190+x184+((new_r22*x179)));
evalcond[1]=(((gconst18*new_r10))+(((-1.0)*x179))+(((-1.0)*new_r00*x191)));
evalcond[2]=(((gconst18*new_r11))+(((-1.0)*x187))+(((-1.0)*new_r01*x191)));
evalcond[3]=(((x180*x188))+((new_r22*x185))+new_r01);
evalcond[4]=((((-1.0)*x186))+x182+x189);
evalcond[5]=(x192+(((-1.0)*gconst18*x186))+new_r00);
evalcond[6]=(((new_r22*x192))+new_r11+(((-1.0)*gconst18*x187)));
evalcond[7]=((((-1.0)*x186*x191))+(((-1.0)*x185))+new_r10);
evalcond[8]=((((-0.000799999744000123)*x180))+((x181*x182))+((x181*x189)));
evalcond[9]=(((x181*x190))+(((0.000799999744000123)*x179))+((x181*x184)));
evalcond[10]=((((0.999999680000154)*x180))+(((-1.0)*x183*x189))+(((-1.0)*x182*x183)));
evalcond[11]=((((-0.999999680000154)*x179))+(((-1.0)*x183*x184))+(((-1.0)*x183*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x193=gconst18*gconst18;
IkReal x194=(gconst18*new_r22);
IkReal x195=((1.0)+(((-1.0)*x193)));
IkReal x196=((1.0)*x193);
if((x195) < -0.00001)
continue;
IkReal x197=IKsqrt(x195);
CheckValue<IkReal> x198 = IKatan2WithCheck(IkReal((((new_r01*x194))+((new_r00*x197)))),IkReal((((new_r01*x197))+(((-1.0)*new_r00*x194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199=IKPowWithIntegerCheck(IKsign(((((-1.0)*(pow(x195,1.0))))+(((-1.0)*x196*(new_r22*new_r22))))),-1);
if(!x199.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x198.value)+(((1.5707963267949)*(x199.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x200=IKsin(j5);
IkReal x201=IKcos(j5);
IkReal x202=((0.000799999744000123)*new_r22);
IkReal x203=(gconst18*new_r00);
IkReal x204=((0.999999680000154)*new_r22);
IkReal x205=(gconst18*new_r01);
IkReal x206=(gconst18*x200);
IkReal x207=(new_r22*x201);
IkReal x208=((1.0)*x201);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x209=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
IkReal x210=(new_r10*x209);
IkReal x211=(new_r11*x209);
IkReal x212=((1.0)*x209);
IkReal x213=(x200*x209);
evalcond[0]=(x211+x205+((new_r22*x200)));
evalcond[1]=(((gconst18*new_r10))+(((-1.0)*new_r00*x212))+(((-1.0)*x200)));
evalcond[2]=(((gconst18*new_r11))+(((-1.0)*x208))+(((-1.0)*new_r01*x212)));
evalcond[3]=(((x201*x209))+((new_r22*x206))+new_r01);
evalcond[4]=(x210+x203+(((-1.0)*x207)));
evalcond[5]=((((-1.0)*gconst18*x207))+x213+new_r00);
evalcond[6]=(((new_r22*x213))+(((-1.0)*gconst18*x208))+new_r11);
evalcond[7]=((((-1.0)*x207*x212))+new_r10+(((-1.0)*x206)));
evalcond[8]=(((x202*x210))+((x202*x203))+(((-0.000799999744000123)*x201)));
evalcond[9]=(((x202*x211))+((x202*x205))+(((0.000799999744000123)*x200)));
evalcond[10]=((((-1.0)*x203*x204))+(((-1.0)*x204*x210))+(((0.999999680000154)*x201)));
evalcond[11]=((((-1.0)*x204*x205))+(((-1.0)*x204*x211))+(((-0.999999680000154)*x200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x214=gconst18*gconst18;
IkReal x215=((1.0)+(((-1.0)*x214)));
IkReal x216=((-1.0)*new_r22);
if((x215) < -0.00001)
continue;
IkReal x217=IKsqrt(x215);
CheckValue<IkReal> x218 = IKatan2WithCheck(IkReal((((gconst18*new_r01))+((new_r11*x217)))),IkReal((((gconst18*new_r11*x216))+((new_r01*new_r22*x217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x218.valid){
continue;
}
CheckValue<IkReal> x219=IKPowWithIntegerCheck(IKsign((((x214*x216))+((x216*(pow(x215,1.0)))))),-1);
if(!x219.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x218.value)+(((1.5707963267949)*(x219.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x220=IKsin(j5);
IkReal x221=IKcos(j5);
IkReal x222=((0.000799999744000123)*new_r22);
IkReal x223=(gconst18*new_r00);
IkReal x224=((0.999999680000154)*new_r22);
IkReal x225=(gconst18*new_r01);
IkReal x226=(gconst18*x220);
IkReal x227=(new_r22*x221);
IkReal x228=((1.0)*x221);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x229=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
IkReal x230=(new_r10*x229);
IkReal x231=(new_r11*x229);
IkReal x232=((1.0)*x229);
IkReal x233=(x220*x229);
evalcond[0]=(x225+x231+((new_r22*x220)));
evalcond[1]=(((gconst18*new_r10))+(((-1.0)*new_r00*x232))+(((-1.0)*x220)));
evalcond[2]=(((gconst18*new_r11))+(((-1.0)*new_r01*x232))+(((-1.0)*x228)));
evalcond[3]=(((new_r22*x226))+((x221*x229))+new_r01);
evalcond[4]=(x223+x230+(((-1.0)*x227)));
evalcond[5]=((((-1.0)*gconst18*x227))+x233+new_r00);
evalcond[6]=(((new_r22*x233))+(((-1.0)*gconst18*x228))+new_r11);
evalcond[7]=((((-1.0)*x227*x232))+new_r10+(((-1.0)*x226)));
evalcond[8]=(((x222*x223))+(((-0.000799999744000123)*x221))+((x222*x230)));
evalcond[9]=(((x222*x225))+((x222*x231))+(((0.000799999744000123)*x220)));
evalcond[10]=((((-1.0)*x224*x230))+(((0.999999680000154)*x221))+(((-1.0)*x223*x224)));
evalcond[11]=((((-1.0)*x224*x231))+(((-1.0)*x224*x225))+(((-0.999999680000154)*x220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x234=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x234.valid){
continue;
}
if((x234.value) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(x234.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst18)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x235=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
if( IKabs((((gconst18*new_r10))+((new_r00*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst18*new_r11))+((new_r01*x235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst18*new_r10))+((new_r00*x235))))+IKsqr((((gconst18*new_r11))+((new_r01*x235))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst18*new_r10))+((new_r00*x235))), (((gconst18*new_r11))+((new_r01*x235))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x236=IKsin(j5);
IkReal x237=IKcos(j5);
IkReal x238=(gconst18*new_r22);
IkReal x239=((1.0)*x236);
IkReal x240=((1.0)*x237);
IkReal x241=x235;
IkReal x242=(new_r22*x241);
IkReal x243=((1.0)*x241);
evalcond[0]=(((gconst18*new_r10))+(((-1.0)*x239))+((new_r00*x241)));
evalcond[1]=(((gconst18*new_r11))+((new_r01*x241))+(((-1.0)*x240)));
evalcond[2]=(((gconst18*new_r01))+((new_r22*x236))+(((-1.0)*new_r11*x243)));
evalcond[3]=((((-1.0)*x240*x241))+new_r01+((x236*x238)));
evalcond[4]=(((gconst18*new_r00))+(((-1.0)*new_r22*x240))+(((-1.0)*new_r10*x243)));
evalcond[5]=(((x237*x242))+(((-1.0)*gconst18*x239))+new_r10);
evalcond[6]=((((-1.0)*x238*x240))+new_r00+(((-1.0)*x239*x241)));
evalcond[7]=((((-1.0)*gconst18*x240))+new_r11+(((-1.0)*x239*x242)));
evalcond[8]=((((0.000799999744000123)*new_r00*x238))+(((-0.000799999744000123)*x237))+(((-0.000799999744000123)*new_r10*x242)));
evalcond[9]=((((-0.000799999744000123)*new_r11*x242))+(((0.000799999744000123)*new_r01*x238))+(((0.000799999744000123)*x236)));
evalcond[10]=((((-0.999999680000154)*new_r00*x238))+(((0.999999680000154)*new_r10*x242))+(((0.999999680000154)*x237)));
evalcond[11]=((((0.999999680000154)*new_r11*x242))+(((-0.999999680000154)*x236))+(((-0.999999680000154)*new_r01*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x244=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x244.valid){
continue;
}
if((x244.value) < -0.00001)
continue;
IkReal gconst19=IKsqrt(x244.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst19)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
cj3=gconst19;
if( (gconst19) < -1-IKFAST_SINCOS_THRESH || (gconst19) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst19);
CheckValue<IkReal> x245=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x245.valid){
continue;
}
if((x245.value) < -0.00001)
continue;
IkReal gconst19=IKsqrt(x245.value);
IkReal x246=((1.0)*new_r22);
CheckValue<IkReal> x249=IKPowWithIntegerCheck(((1.0)+(((-1.0)*new_r22*x246))),-1);
if(!x249.valid){
continue;
}
IkReal x247=x249.value;
CheckValue<IkReal> x250=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x250.valid){
continue;
}
CheckValue<IkReal> x251=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x251.valid){
continue;
}
IkReal x248=((((-1.0)*x246*(pow(((1.0)+(((-1.0)*(x250.value)))),1.0))))+(((-1.0)*x246*(x251.value))));
j5eval[0]=x248;
j5eval[1]=IKsign(x248);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
cj3=gconst19;
if( (gconst19) < -1-IKFAST_SINCOS_THRESH || (gconst19) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst19);
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x252.valid){
continue;
}
if((x252.value) < -0.00001)
continue;
IkReal gconst19=IKsqrt(x252.value);
IkReal x253=new_r22*new_r22;
IkReal x254=((1.0)*x253);
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x254))),-1);
if(!x257.valid){
continue;
}
IkReal x255=x257.value;
CheckValue<IkReal> x258=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x253))),-1);
if(!x258.valid){
continue;
}
IkReal x256=((((-1.0)*(pow(((1.0)+(((-1.0)*x255))),1.0))))+(((-1.0)*x254*(x258.value))));
j5eval[0]=x256;
j5eval[1]=IKsign(x256);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
sj3=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
cj3=gconst19;
if( (gconst19) < -1-IKFAST_SINCOS_THRESH || (gconst19) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKacos(gconst19);
CheckValue<IkReal> x259=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x259.valid){
continue;
}
if((x259.value) < -0.00001)
continue;
IkReal gconst19=IKsqrt(x259.value);
j5eval[0]=new_r22;
CheckValue<IkReal> x260=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x260.valid){
continue;
}
j5eval[1]=((1.0)+(((-1.0)*(x260.value))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x261=gconst19*gconst19;
IkReal x262=((1.0)+(((-1.0)*x261)));
if((x262) < -0.00001)
continue;
IkReal x263=IKsqrt(x262);
IkReal x264=(new_r11*x263);
CheckValue<IkReal> x265=IKPowWithIntegerCheck(new_r22,-1);
if(!x265.valid){
continue;
}
CheckValue<IkReal> x266=IKPowWithIntegerCheck(x263,-1);
if(!x266.valid){
continue;
}
if( IKabs(((x265.value)*(((((-1.0)*x264))+(((-1.0)*gconst19*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x266.value)*((((new_r01*x261))+(((-1.0)*new_r01))+((gconst19*x264)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x265.value)*(((((-1.0)*x264))+(((-1.0)*gconst19*new_r01))))))+IKsqr(((x266.value)*((((new_r01*x261))+(((-1.0)*new_r01))+((gconst19*x264))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x265.value)*(((((-1.0)*x264))+(((-1.0)*gconst19*new_r01))))), ((x266.value)*((((new_r01*x261))+(((-1.0)*new_r01))+((gconst19*x264))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x267=IKsin(j5);
IkReal x268=IKcos(j5);
IkReal x269=((0.000799999744000123)*new_r22);
IkReal x270=(gconst19*new_r01);
IkReal x271=((0.999999680000154)*new_r22);
IkReal x272=(gconst19*new_r00);
IkReal x273=((1.0)*x268);
IkReal x274=((1.0)*x267);
IkReal x275=(new_r22*x267);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x276=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
IkReal x277=(new_r10*x276);
IkReal x278=(new_r11*x276);
IkReal x279=((1.0)*x276);
IkReal x280=(x268*x276);
evalcond[0]=(x275+x270+x278);
evalcond[1]=(((gconst19*new_r10))+(((-1.0)*new_r00*x279))+(((-1.0)*x274)));
evalcond[2]=(((gconst19*new_r11))+(((-1.0)*new_r01*x279))+(((-1.0)*x273)));
evalcond[3]=(((gconst19*x275))+x280+new_r01);
evalcond[4]=((((-1.0)*new_r22*x273))+x277+x272);
evalcond[5]=((((-1.0)*gconst19*new_r22*x273))+new_r00+((x267*x276)));
evalcond[6]=(((x275*x276))+(((-1.0)*gconst19*x273))+new_r11);
evalcond[7]=((((-1.0)*gconst19*x274))+(((-1.0)*new_r22*x273*x276))+new_r10);
evalcond[8]=((((-0.000799999744000123)*x268))+((x269*x277))+((x269*x272)));
evalcond[9]=((((0.000799999744000123)*x267))+((x269*x270))+((x269*x278)));
evalcond[10]=((((-1.0)*x271*x272))+(((-1.0)*x271*x277))+(((0.999999680000154)*x268)));
evalcond[11]=((((-0.999999680000154)*x267))+(((-1.0)*x271*x278))+(((-1.0)*x270*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x281=gconst19*gconst19;
IkReal x282=(gconst19*new_r22);
IkReal x283=((1.0)+(((-1.0)*x281)));
if((x283) < -0.00001)
continue;
IkReal x284=IKsqrt(x283);
CheckValue<IkReal> x285=IKPowWithIntegerCheck(IKsign(((((-1.0)*(pow(x283,1.0))))+(((-1.0)*x281*(new_r22*new_r22))))),-1);
if(!x285.valid){
continue;
}
CheckValue<IkReal> x286 = IKatan2WithCheck(IkReal((((new_r00*x284))+((new_r01*x282)))),IkReal(((((-1.0)*new_r00*x282))+((new_r01*x284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x286.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x285.value)))+(x286.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x287=IKsin(j5);
IkReal x288=IKcos(j5);
IkReal x289=((0.000799999744000123)*new_r22);
IkReal x290=(gconst19*new_r01);
IkReal x291=((0.999999680000154)*new_r22);
IkReal x292=(gconst19*new_r00);
IkReal x293=((1.0)*x288);
IkReal x294=((1.0)*x287);
IkReal x295=(new_r22*x287);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x296=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
IkReal x297=(new_r10*x296);
IkReal x298=(new_r11*x296);
IkReal x299=((1.0)*x296);
IkReal x300=(x288*x296);
evalcond[0]=(x298+x290+x295);
evalcond[1]=(((gconst19*new_r10))+(((-1.0)*x294))+(((-1.0)*new_r00*x299)));
evalcond[2]=((((-1.0)*new_r01*x299))+((gconst19*new_r11))+(((-1.0)*x293)));
evalcond[3]=(((gconst19*x295))+x300+new_r01);
evalcond[4]=(x292+x297+(((-1.0)*new_r22*x293)));
evalcond[5]=(((x287*x296))+(((-1.0)*gconst19*new_r22*x293))+new_r00);
evalcond[6]=((((-1.0)*gconst19*x293))+((x295*x296))+new_r11);
evalcond[7]=((((-1.0)*gconst19*x294))+new_r10+(((-1.0)*new_r22*x293*x296)));
evalcond[8]=(((x289*x292))+((x289*x297))+(((-0.000799999744000123)*x288)));
evalcond[9]=(((x289*x290))+((x289*x298))+(((0.000799999744000123)*x287)));
evalcond[10]=((((-1.0)*x291*x292))+(((-1.0)*x291*x297))+(((0.999999680000154)*x288)));
evalcond[11]=((((-1.0)*x291*x298))+(((-1.0)*x290*x291))+(((-0.999999680000154)*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x301=gconst19*gconst19;
IkReal x302=((1.0)+(((-1.0)*x301)));
IkReal x303=((-1.0)*new_r22);
if((x302) < -0.00001)
continue;
IkReal x304=IKsqrt(x302);
CheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign((((x301*x303))+((x303*(pow(x302,1.0)))))),-1);
if(!x305.valid){
continue;
}
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal((((new_r11*x304))+((gconst19*new_r01)))),IkReal((((gconst19*new_r11*x303))+((new_r01*new_r22*x304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x305.value)))+(x306.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x307=IKsin(j5);
IkReal x308=IKcos(j5);
IkReal x309=((0.000799999744000123)*new_r22);
IkReal x310=(gconst19*new_r01);
IkReal x311=((0.999999680000154)*new_r22);
IkReal x312=(gconst19*new_r00);
IkReal x313=((1.0)*x308);
IkReal x314=((1.0)*x307);
IkReal x315=(new_r22*x307);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x316=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
IkReal x317=(new_r10*x316);
IkReal x318=(new_r11*x316);
IkReal x319=((1.0)*x316);
IkReal x320=(x308*x316);
evalcond[0]=(x318+x315+x310);
evalcond[1]=((((-1.0)*new_r00*x319))+((gconst19*new_r10))+(((-1.0)*x314)));
evalcond[2]=(((gconst19*new_r11))+(((-1.0)*x313))+(((-1.0)*new_r01*x319)));
evalcond[3]=(((gconst19*x315))+x320+new_r01);
evalcond[4]=((((-1.0)*new_r22*x313))+x317+x312);
evalcond[5]=((((-1.0)*gconst19*new_r22*x313))+((x307*x316))+new_r00);
evalcond[6]=((((-1.0)*gconst19*x313))+((x315*x316))+new_r11);
evalcond[7]=((((-1.0)*gconst19*x314))+(((-1.0)*new_r22*x313*x316))+new_r10);
evalcond[8]=((((-0.000799999744000123)*x308))+((x309*x317))+((x309*x312)));
evalcond[9]=((((0.000799999744000123)*x307))+((x309*x310))+((x309*x318)));
evalcond[10]=((((0.999999680000154)*x308))+(((-1.0)*x311*x317))+(((-1.0)*x311*x312)));
evalcond[11]=((((-1.0)*x310*x311))+(((-0.999999680000154)*x307))+(((-1.0)*x311*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x321=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x321.valid){
continue;
}
if((x321.value) < -0.00001)
continue;
IkReal gconst19=IKsqrt(x321.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj3)))))+(IKabs((cj3+(((-1.0)*gconst19)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x322=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
if( IKabs((((new_r00*x322))+((gconst19*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x322))+((gconst19*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x322))+((gconst19*new_r10))))+IKsqr((((new_r01*x322))+((gconst19*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((new_r00*x322))+((gconst19*new_r10))), (((new_r01*x322))+((gconst19*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x323=IKsin(j5);
IkReal x324=IKcos(j5);
IkReal x325=(gconst19*new_r01);
IkReal x326=((1.0)*gconst19);
IkReal x327=(gconst19*new_r00);
IkReal x328=((0.000799999744000123)*new_r22);
IkReal x329=((0.999999680000154)*new_r22);
IkReal x330=((1.0)*x323);
IkReal x331=(new_r22*x323);
IkReal x332=((1.0)*x324);
IkReal x333=x322;
IkReal x334=(new_r22*x333);
IkReal x335=((1.0)*x333);
evalcond[0]=(((gconst19*new_r10))+((new_r00*x333))+(((-1.0)*x330)));
evalcond[1]=(((gconst19*new_r11))+((new_r01*x333))+(((-1.0)*x332)));
evalcond[2]=((((-1.0)*new_r11*x335))+x331+x325);
evalcond[3]=(((gconst19*x331))+(((-1.0)*x332*x333))+new_r01);
evalcond[4]=((((-1.0)*new_r22*x332))+(((-1.0)*new_r10*x335))+x327);
evalcond[5]=(((x324*x334))+(((-1.0)*x323*x326))+new_r10);
evalcond[6]=((((-1.0)*x330*x333))+new_r00+(((-1.0)*new_r22*x324*x326)));
evalcond[7]=((((-1.0)*x330*x334))+new_r11+(((-1.0)*x324*x326)));
evalcond[8]=(((x327*x328))+(((-0.000799999744000123)*x324))+(((-1.0)*new_r10*x328*x333)));
evalcond[9]=(((x325*x328))+(((0.000799999744000123)*x323))+(((-1.0)*new_r11*x328*x333)));
evalcond[10]=(((new_r10*x329*x333))+(((-1.0)*x327*x329))+(((0.999999680000154)*x324)));
evalcond[11]=((((-1.0)*x325*x329))+(((-0.999999680000154)*x323))+((new_r11*x329*x333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x336=new_r22*new_r22;
CheckValue<IkReal> x337=IKPowWithIntegerCheck((((cj3*x336))+(((-1.0)*cj3))),-1);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338=IKPowWithIntegerCheck(((((-1.0)*sj3))+((sj3*x336))),-1);
if(!x338.valid){
continue;
}
if( IKabs(((x337.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x338.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x337.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x338.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x337.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x338.value)*((((new_r10*new_r22))+new_r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x339=IKsin(j5);
IkReal x340=IKcos(j5);
IkReal x341=(cj3*new_r00);
IkReal x342=(new_r22*sj3);
IkReal x343=(cj3*new_r22);
IkReal x344=((1.0)*sj3);
IkReal x345=(sj3*x339);
IkReal x346=((1.0)*x340);
IkReal x347=((1.0)*x339);
IkReal x348=(cj3*x346);
evalcond[0]=(((new_r22*x339))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x344))+((cj3*new_r10))+(((-1.0)*x347)));
evalcond[2]=(((cj3*new_r11))+(((-1.0)*new_r01*x344))+(((-1.0)*x346)));
evalcond[3]=(((sj3*x340))+new_r01+((x339*x343)));
evalcond[4]=(((new_r10*sj3))+x341+(((-1.0)*new_r22*x346)));
evalcond[5]=(x345+(((-1.0)*x343*x346))+new_r00);
evalcond[6]=(new_r11+(((-1.0)*x348))+((x339*x342)));
evalcond[7]=((((-1.0)*cj3*x347))+new_r10+(((-1.0)*x342*x346)));
evalcond[8]=((((0.000799999744000123)*new_r22*x341))+(((0.000799999744000123)*new_r10*x342))+(((-0.000799999744000123)*x340)));
evalcond[9]=((((0.000799999744000123)*new_r01*x343))+(((0.000799999744000123)*new_r11*x342))+(((0.000799999744000123)*x339)));
evalcond[10]=((((-0.999999680000154)*new_r10*x342))+(((-0.999999680000154)*new_r22*x341))+(((0.999999680000154)*x340)));
evalcond[11]=((((-0.999999680000154)*x339))+(((-0.999999680000154)*new_r11*x342))+(((-0.999999680000154)*new_r01*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x349=((1.0)*new_r01);
CheckValue<IkReal> x350=IKPowWithIntegerCheck(new_r22,-1);
if(!x350.valid){
continue;
}
if( IKabs(((x350.value)*(((((-1.0)*cj3*x349))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r11))+(((-1.0)*sj3*x349)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x350.value)*(((((-1.0)*cj3*x349))+(((-1.0)*new_r11*sj3))))))+IKsqr((((cj3*new_r11))+(((-1.0)*sj3*x349))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x350.value)*(((((-1.0)*cj3*x349))+(((-1.0)*new_r11*sj3))))), (((cj3*new_r11))+(((-1.0)*sj3*x349))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x351=IKsin(j5);
IkReal x352=IKcos(j5);
IkReal x353=(cj3*new_r00);
IkReal x354=(new_r22*sj3);
IkReal x355=(cj3*new_r22);
IkReal x356=((1.0)*sj3);
IkReal x357=(sj3*x351);
IkReal x358=((1.0)*x352);
IkReal x359=((1.0)*x351);
IkReal x360=(cj3*x358);
evalcond[0]=(((new_r22*x351))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=((((-1.0)*x359))+((cj3*new_r10))+(((-1.0)*new_r00*x356)));
evalcond[2]=((((-1.0)*x358))+(((-1.0)*new_r01*x356))+((cj3*new_r11)));
evalcond[3]=(((x351*x355))+((sj3*x352))+new_r01);
evalcond[4]=((((-1.0)*new_r22*x358))+((new_r10*sj3))+x353);
evalcond[5]=(x357+new_r00+(((-1.0)*x355*x358)));
evalcond[6]=((((-1.0)*x360))+((x351*x354))+new_r11);
evalcond[7]=((((-1.0)*cj3*x359))+new_r10+(((-1.0)*x354*x358)));
evalcond[8]=((((0.000799999744000123)*new_r22*x353))+(((-0.000799999744000123)*x352))+(((0.000799999744000123)*new_r10*x354)));
evalcond[9]=((((0.000799999744000123)*x351))+(((0.000799999744000123)*new_r11*x354))+(((0.000799999744000123)*new_r01*x355)));
evalcond[10]=((((0.999999680000154)*x352))+(((-0.999999680000154)*new_r22*x353))+(((-0.999999680000154)*new_r10*x354)));
evalcond[11]=((((-0.999999680000154)*x351))+(((-0.999999680000154)*new_r11*x354))+(((-0.999999680000154)*new_r01*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x361=cj3*cj3;
IkReal x362=(cj3*new_r22);
CheckValue<IkReal> x363=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x361*(new_r22*new_r22)))+x361)),-1);
if(!x363.valid){
continue;
}
CheckValue<IkReal> x364 = IKatan2WithCheck(IkReal((((new_r00*sj3))+((new_r01*x362)))),IkReal(((((-1.0)*new_r00*x362))+((new_r01*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x364.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x363.value)))+(x364.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x365=IKsin(j5);
IkReal x366=IKcos(j5);
IkReal x367=(cj3*new_r00);
IkReal x368=(new_r22*sj3);
IkReal x369=(cj3*new_r22);
IkReal x370=((1.0)*sj3);
IkReal x371=(sj3*x365);
IkReal x372=((1.0)*x366);
IkReal x373=((1.0)*x365);
IkReal x374=(cj3*x372);
evalcond[0]=(((new_r22*x365))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x370))+(((-1.0)*x373))+((cj3*new_r10)));
evalcond[2]=((((-1.0)*x372))+((cj3*new_r11))+(((-1.0)*new_r01*x370)));
evalcond[3]=(((x365*x369))+((sj3*x366))+new_r01);
evalcond[4]=(((new_r10*sj3))+(((-1.0)*new_r22*x372))+x367);
evalcond[5]=(x371+(((-1.0)*x369*x372))+new_r00);
evalcond[6]=((((-1.0)*x374))+((x365*x368))+new_r11);
evalcond[7]=((((-1.0)*x368*x372))+(((-1.0)*cj3*x373))+new_r10);
evalcond[8]=((((0.000799999744000123)*new_r22*x367))+(((0.000799999744000123)*new_r10*x368))+(((-0.000799999744000123)*x366)));
evalcond[9]=((((0.000799999744000123)*x365))+(((0.000799999744000123)*new_r01*x369))+(((0.000799999744000123)*new_r11*x368)));
evalcond[10]=((((-0.999999680000154)*new_r10*x368))+(((-0.999999680000154)*new_r22*x367))+(((0.999999680000154)*x366)));
evalcond[11]=((((-0.999999680000154)*new_r01*x369))+(((-0.999999680000154)*x365))+(((-0.999999680000154)*new_r11*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x376=IKPowWithIntegerCheck(sj4,-1);
if(!x376.valid){
continue;
}
IkReal x375=x376.value;
CheckValue<IkReal> x377=IKPowWithIntegerCheck(new_r12,-1);
if(!x377.valid){
continue;
}
if( IKabs((x375*(x377.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x375)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x375*(x377.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x375))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x375*(x377.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x375));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x378=IKcos(j3);
IkReal x379=IKsin(j3);
IkReal x380=((0.000799999744000123)*new_r22);
IkReal x381=((0.999999680000154)*new_r22);
IkReal x382=((1.0)*sj4);
IkReal x383=((0.000799999744000123)*cj4);
IkReal x384=((0.999999680000154)*cj4);
IkReal x385=((0.000799999744000123)*sj4);
IkReal x386=((0.999999680000154)*sj4);
IkReal x387=(new_r02*x378);
IkReal x388=(new_r12*x379);
evalcond[0]=((((-1.0)*x378*x382))+new_r02);
evalcond[1]=((((-1.0)*x379*x382))+new_r12);
evalcond[2]=(((new_r12*x378))+(((-1.0)*new_r02*x379)));
evalcond[3]=(x387+x388+(((-1.0)*x382)));
evalcond[4]=((0.999999680000154)+((x383*x387))+((x383*x388))+(((-1.0)*sj4*x380))+(((-1.0)*x386*x387))+(((-1.0)*x386*x388))+(((-1.0)*cj4*x381)));
evalcond[5]=((0.000799999744000123)+(((-1.0)*x384*x387))+(((-1.0)*x384*x388))+((sj4*x381))+(((-1.0)*cj4*x380))+(((-1.0)*x385*x388))+(((-1.0)*x385*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=new_r22;
j5eval[1]=((IKabs(new_r11))+(IKabs(new_r10)));
j5eval[2]=IKsign(new_r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x389=IKsin(j5);
IkReal x390=IKcos(j5);
IkReal x391=((1.0)*x390);
evalcond[0]=(x389+new_r11);
evalcond[1]=((((-1.0)*x391))+new_r10);
evalcond[2]=((((-1.0)*x389))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x391))+(((-1.0)*new_r01)));
evalcond[4]=((((0.000799999744000123)*new_r10))+(((-0.000799999744000123)*x390)));
evalcond[5]=((((0.000799999744000123)*new_r11))+(((0.000799999744000123)*x389)));
evalcond[6]=((((0.999999680000154)*x390))+(((-0.999999680000154)*new_r10)));
evalcond[7]=((((-0.999999680000154)*x389))+(((-0.999999680000154)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x392=IKcos(j5);
IkReal x393=IKsin(j5);
IkReal x394=((1.0)*x393);
evalcond[0]=(x392+new_r10);
evalcond[1]=((((-1.0)*x394))+new_r11);
evalcond[2]=((((-1.0)*x394))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x392))+(((-1.0)*new_r01)));
evalcond[4]=((((-0.000799999744000123)*x392))+(((-0.000799999744000123)*new_r10)));
evalcond[5]=((((0.000799999744000123)*x393))+(((-0.000799999744000123)*new_r11)));
evalcond[6]=((((0.999999680000154)*x392))+(((0.999999680000154)*new_r10)));
evalcond[7]=((((-0.999999680000154)*x393))+(((0.999999680000154)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x395=IKsin(j5);
IkReal x396=IKcos(j5);
IkReal x397=((0.000799999744000123)*new_r22);
IkReal x398=((0.999999680000154)*new_r22);
IkReal x399=((1.0)*x396);
evalcond[0]=(new_r11+((new_r22*x395)));
evalcond[1]=((((-1.0)*new_r22*x399))+new_r10);
evalcond[2]=((((-1.0)*x395))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x399))+(((-1.0)*new_r01)));
evalcond[4]=((((-0.000799999744000123)*x396))+((new_r10*x397)));
evalcond[5]=(((new_r11*x397))+(((0.000799999744000123)*x395)));
evalcond[6]=((((0.999999680000154)*x396))+(((-1.0)*new_r10*x398)));
evalcond[7]=((((-0.999999680000154)*x395))+(((-1.0)*new_r11*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(sj4,-1);
if(!x400.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x400.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x400.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x400.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x401=IKsin(j5);
IkReal x402=IKcos(j5);
IkReal x403=((0.999999680000154)*sj4);
IkReal x404=((0.999999680000154)*new_r22);
IkReal x405=((0.000799999744000123)*new_r22);
IkReal x406=((0.000799999744000123)*sj4);
IkReal x407=((1.0)*x402);
IkReal x408=((1.0)*x401);
evalcond[0]=(new_r20+((sj4*x402)));
evalcond[1]=(((new_r22*x401))+new_r11);
evalcond[2]=((((-1.0)*sj4*x408))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x407)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x408)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x407)));
evalcond[6]=((((-1.0)*new_r20*x404))+(((-1.0)*new_r20*x406))+((new_r10*x405))+(((-0.000799999744000123)*x402))+(((-1.0)*new_r10*x403)));
evalcond[7]=((((0.000799999744000123)*x401))+(((-1.0)*new_r21*x404))+(((-1.0)*new_r21*x406))+((new_r11*x405))+(((-1.0)*new_r11*x403)));
evalcond[8]=((((0.999999680000154)*x402))+(((-1.0)*new_r20*x405))+((new_r20*x403))+(((-1.0)*new_r10*x404))+(((-1.0)*new_r10*x406)));
evalcond[9]=((((-0.999999680000154)*x401))+(((-1.0)*new_r21*x405))+(((-1.0)*new_r11*x406))+(((-1.0)*new_r11*x404))+((new_r21*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x409 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410=IKPowWithIntegerCheck(IKsign(new_r22),-1);
if(!x410.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x409.value)+(((1.5707963267949)*(x410.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x411=IKsin(j5);
IkReal x412=IKcos(j5);
IkReal x413=((0.999999680000154)*sj4);
IkReal x414=((0.999999680000154)*new_r22);
IkReal x415=((0.000799999744000123)*new_r22);
IkReal x416=((0.000799999744000123)*sj4);
IkReal x417=((1.0)*x412);
IkReal x418=((1.0)*x411);
evalcond[0]=(new_r20+((sj4*x412)));
evalcond[1]=(((new_r22*x411))+new_r11);
evalcond[2]=((((-1.0)*sj4*x418))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x417)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x418)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x417)));
evalcond[6]=((((-1.0)*new_r20*x416))+(((-1.0)*new_r20*x414))+(((-0.000799999744000123)*x412))+((new_r10*x415))+(((-1.0)*new_r10*x413)));
evalcond[7]=((((0.000799999744000123)*x411))+(((-1.0)*new_r21*x414))+(((-1.0)*new_r21*x416))+((new_r11*x415))+(((-1.0)*new_r11*x413)));
evalcond[8]=((((0.999999680000154)*x412))+(((-1.0)*new_r20*x415))+((new_r20*x413))+(((-1.0)*new_r10*x416))+(((-1.0)*new_r10*x414)));
evalcond[9]=((((-0.999999680000154)*x411))+(((-1.0)*new_r21*x415))+(((-1.0)*new_r11*x414))+(((-1.0)*new_r11*x416))+((new_r21*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x419=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x419.valid){
continue;
}
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x419.value)))+(x420.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x421=IKsin(j5);
IkReal x422=IKcos(j5);
IkReal x423=((0.999999680000154)*sj4);
IkReal x424=((0.999999680000154)*new_r22);
IkReal x425=((0.000799999744000123)*new_r22);
IkReal x426=((0.000799999744000123)*sj4);
IkReal x427=((1.0)*x422);
IkReal x428=((1.0)*x421);
evalcond[0]=(((sj4*x422))+new_r20);
evalcond[1]=(((new_r22*x421))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*sj4*x428)));
evalcond[3]=((((-1.0)*new_r22*x427))+new_r10);
evalcond[4]=((((-1.0)*x428))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x427))+(((-1.0)*new_r01)));
evalcond[6]=(((new_r10*x425))+(((-1.0)*new_r10*x423))+(((-0.000799999744000123)*x422))+(((-1.0)*new_r20*x424))+(((-1.0)*new_r20*x426)));
evalcond[7]=(((new_r11*x425))+(((-1.0)*new_r11*x423))+(((-1.0)*new_r21*x424))+(((-1.0)*new_r21*x426))+(((0.000799999744000123)*x421)));
evalcond[8]=((((0.999999680000154)*x422))+((new_r20*x423))+(((-1.0)*new_r10*x426))+(((-1.0)*new_r10*x424))+(((-1.0)*new_r20*x425)));
evalcond[9]=((((-0.999999680000154)*x421))+((new_r21*x423))+(((-1.0)*new_r11*x426))+(((-1.0)*new_r11*x424))+(((-1.0)*new_r21*x425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x429=IKcos(j5);
IkReal x430=IKsin(j5);
IkReal x431=((0.999999680000154)*sj4);
IkReal x432=((0.999999680000154)*new_r22);
IkReal x433=((0.000799999744000123)*new_r22);
IkReal x434=((0.000799999744000123)*sj4);
IkReal x435=((1.0)*x429);
IkReal x436=((1.0)*x430);
evalcond[0]=(((sj4*x429))+new_r20);
evalcond[1]=((((-1.0)*x436))+new_r00);
evalcond[2]=((((-1.0)*x435))+new_r01);
evalcond[3]=(new_r21+(((-1.0)*sj4*x436)));
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x430)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x435)));
evalcond[6]=(((new_r10*x431))+(((-1.0)*new_r10*x433))+(((-0.000799999744000123)*x429))+(((-1.0)*new_r20*x434))+(((-1.0)*new_r20*x432)));
evalcond[7]=(((new_r11*x431))+(((0.000799999744000123)*x430))+(((-1.0)*new_r11*x433))+(((-1.0)*new_r21*x434))+(((-1.0)*new_r21*x432)));
evalcond[8]=((((0.999999680000154)*x429))+((new_r10*x434))+((new_r10*x432))+((new_r20*x431))+(((-1.0)*new_r20*x433)));
evalcond[9]=(((new_r21*x431))+(((-0.999999680000154)*x430))+((new_r11*x432))+((new_r11*x434))+(((-1.0)*new_r21*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x437=IKcos(j5);
IkReal x438=IKsin(j5);
IkReal x439=((1.0)*sj3);
IkReal x440=((1.0)*x438);
IkReal x441=((1.0)*x437);
evalcond[0]=(x437+new_r20);
evalcond[1]=((((-1.0)*x440))+new_r21);
evalcond[2]=(((sj3*x437))+new_r01);
evalcond[3]=(((sj3*x438))+new_r00);
evalcond[4]=((((-1.0)*cj3*x441))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x440))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x439))+(((-1.0)*x440))+((cj3*new_r10)));
evalcond[7]=((((-1.0)*x441))+(((-1.0)*new_r01*x439))+((cj3*new_r11)));
evalcond[8]=((((-0.000799999744000123)*x437))+(((-0.000799999744000123)*new_r20)));
evalcond[9]=((((-0.000799999744000123)*new_r21))+(((0.000799999744000123)*x438)));
evalcond[10]=((((0.999999680000154)*x437))+(((0.999999680000154)*new_r20)));
evalcond[11]=((((-0.999999680000154)*x438))+(((0.999999680000154)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x442=IKcos(j5);
IkReal x443=IKsin(j5);
IkReal x444=((1.0)*sj3);
IkReal x445=((1.0)*x442);
evalcond[0]=(x443+new_r21);
evalcond[1]=((((-1.0)*x445))+new_r20);
evalcond[2]=(((sj3*x442))+new_r01);
evalcond[3]=(((sj3*x443))+new_r00);
evalcond[4]=(((new_r02*x443))+new_r10);
evalcond[5]=((((-1.0)*cj3*x445))+new_r11);
evalcond[6]=((((-1.0)*new_r00*x444))+(((-1.0)*x443))+((cj3*new_r10)));
evalcond[7]=((((-1.0)*x445))+(((-1.0)*new_r01*x444))+((cj3*new_r11)));
evalcond[8]=((((-0.000799999744000123)*x442))+(((0.000799999744000123)*new_r20)));
evalcond[9]=((((0.000799999744000123)*x443))+(((0.000799999744000123)*new_r21)));
evalcond[10]=((((-0.999999680000154)*new_r20))+(((0.999999680000154)*x442)));
evalcond[11]=((((-0.999999680000154)*new_r21))+(((-0.999999680000154)*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x446=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x446))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x446))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x446))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x446))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x446))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x446))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x447=IKsin(j5);
IkReal x448=IKcos(j5);
IkReal x449=(cj3*new_r00);
IkReal x450=((1.0)*sj3);
IkReal x451=(new_r10*sj3);
IkReal x452=(new_r11*sj3);
IkReal x453=(cj3*new_r01);
IkReal x454=((1.0)*x448);
IkReal x455=(sj3*x447);
IkReal x456=(cj3*x447);
IkReal x457=(cj3*x454);
evalcond[0]=(x447+x452+x453);
evalcond[1]=(x456+((sj3*x448))+new_r01);
evalcond[2]=((((-1.0)*x454))+x449+x451);
evalcond[3]=((((-1.0)*x447))+(((-1.0)*new_r00*x450))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x450))+(((-1.0)*x454))+((cj3*new_r11)));
evalcond[5]=((((-1.0)*x457))+x455+new_r00);
evalcond[6]=((((-1.0)*x457))+x455+new_r11);
evalcond[7]=((((-1.0)*x456))+new_r10+(((-1.0)*x448*x450)));
evalcond[8]=((((-0.000799999744000123)*x448))+(((0.000799999744000123)*x451))+(((0.000799999744000123)*x449)));
evalcond[9]=((((0.000799999744000123)*x453))+(((0.000799999744000123)*x452))+(((0.000799999744000123)*x447)));
evalcond[10]=((((-0.999999680000154)*x449))+(((0.999999680000154)*x448))+(((-0.999999680000154)*x451)));
evalcond[11]=((((-0.999999680000154)*x447))+(((-0.999999680000154)*x453))+(((-0.999999680000154)*x452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x458=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x458))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x458))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x458))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x458))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x458))+((cj3*new_r01))), ((((-1.0)*new_r01*x458))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x459=IKsin(j5);
IkReal x460=IKcos(j5);
IkReal x461=(cj3*new_r00);
IkReal x462=((1.0)*sj3);
IkReal x463=(new_r10*sj3);
IkReal x464=(new_r11*sj3);
IkReal x465=(cj3*new_r01);
IkReal x466=((1.0)*x459);
IkReal x467=(sj3*x460);
IkReal x468=(sj3*x459);
IkReal x469=(cj3*x460);
IkReal x470=(cj3*x466);
evalcond[0]=(x463+x461+x460);
evalcond[1]=((((-1.0)*x466))+x465+x464);
evalcond[2]=(x469+x468+new_r00);
evalcond[3]=((((-1.0)*x466))+(((-1.0)*new_r00*x462))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x460))+(((-1.0)*new_r01*x462))+((cj3*new_r11)));
evalcond[5]=((((-1.0)*x470))+x467+new_r01);
evalcond[6]=((((-1.0)*x470))+x467+new_r10);
evalcond[7]=((((-1.0)*x469))+(((-1.0)*x459*x462))+new_r11);
evalcond[8]=((((-0.000799999744000123)*x460))+(((-0.000799999744000123)*x461))+(((-0.000799999744000123)*x463)));
evalcond[9]=((((-0.000799999744000123)*x464))+(((-0.000799999744000123)*x465))+(((0.000799999744000123)*x459)));
evalcond[10]=((((0.999999680000154)*x461))+(((0.999999680000154)*x463))+(((0.999999680000154)*x460)));
evalcond[11]=((((0.999999680000154)*x465))+(((0.999999680000154)*x464))+(((-0.999999680000154)*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x471=IKcos(j5);
IkReal x472=IKsin(j5);
IkReal x473=((0.000799999744000123)*new_r02);
IkReal x474=((0.999999680000154)*new_r22);
IkReal x475=((0.999999680000154)*new_r02);
IkReal x476=((0.000799999744000123)*new_r22);
IkReal x477=((1.0)*x472);
IkReal x478=((1.0)*x471);
evalcond[0]=(((new_r02*x471))+new_r20);
evalcond[1]=((((-1.0)*x477))+new_r10);
evalcond[2]=((((-1.0)*x478))+new_r11);
evalcond[3]=(((new_r22*x472))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x477))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x478))+new_r00);
evalcond[6]=((((-0.000799999744000123)*x471))+(((-1.0)*new_r00*x475))+((new_r00*x476))+(((-1.0)*new_r20*x474))+(((-1.0)*new_r20*x473)));
evalcond[7]=((((-1.0)*new_r21*x474))+(((-1.0)*new_r21*x473))+((new_r01*x476))+(((-1.0)*new_r01*x475))+(((0.000799999744000123)*x472)));
evalcond[8]=(((new_r20*x475))+(((-1.0)*new_r00*x473))+(((-1.0)*new_r00*x474))+(((0.999999680000154)*x471))+(((-1.0)*new_r20*x476)));
evalcond[9]=((((-0.999999680000154)*x472))+(((-1.0)*new_r21*x476))+((new_r21*x475))+(((-1.0)*new_r01*x474))+(((-1.0)*new_r01*x473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=new_r02;
j5eval[1]=IKsign(new_r02);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=new_r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=new_r02;
j5eval[1]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x479=IKsin(j5);
IkReal x480=IKcos(j5);
IkReal x481=(new_r01*new_r22);
IkReal x482=(new_r00*new_r22);
IkReal x483=((1.0)*x480);
evalcond[0]=((((-1.0)*x479))+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*x483))+(((-1.0)*new_r11)));
evalcond[2]=(((new_r22*x479))+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x483)));
evalcond[4]=((((-0.000799999744000123)*x482))+(((-0.000799999744000123)*x480)));
evalcond[5]=((((0.000799999744000123)*x479))+(((-0.000799999744000123)*x481)));
evalcond[6]=((((0.999999680000154)*x480))+(((0.999999680000154)*x482)));
evalcond[7]=((((0.999999680000154)*x481))+(((-0.999999680000154)*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r22);
evalcond[1]=new_r01;
evalcond[2]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x484=IKsin(j5);
IkReal x485=IKcos(j5);
IkReal x486=(new_r02*new_r21);
IkReal x487=(new_r02*new_r20);
IkReal x488=((1.0)*x485);
evalcond[0]=(((new_r02*x484))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x488))+new_r20);
evalcond[2]=((((-1.0)*x484))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x488))+(((-1.0)*new_r11)));
evalcond[4]=((((0.000799999744000123)*x487))+(((-0.000799999744000123)*x485)));
evalcond[5]=((((0.000799999744000123)*x486))+(((0.000799999744000123)*x484)));
evalcond[6]=((((0.999999680000154)*x485))+(((-0.999999680000154)*x487)));
evalcond[7]=((((-0.999999680000154)*x486))+(((-0.999999680000154)*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x489=IKsin(j5);
IkReal x490=IKcos(j5);
IkReal x491=(new_r01*new_r22);
IkReal x492=(new_r00*new_r22);
IkReal x493=((1.0)*x490);
evalcond[0]=((((-1.0)*x489))+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*x493))+(((-1.0)*new_r11)));
evalcond[2]=((((-1.0)*new_r01))+((new_r22*x489)));
evalcond[3]=((((-1.0)*new_r22*x493))+(((-1.0)*new_r00)));
evalcond[4]=((((-0.000799999744000123)*x490))+(((-0.000799999744000123)*x492)));
evalcond[5]=((((0.000799999744000123)*x489))+(((-0.000799999744000123)*x491)));
evalcond[6]=((((0.999999680000154)*x492))+(((0.999999680000154)*x490)));
evalcond[7]=((((0.999999680000154)*x491))+(((-0.999999680000154)*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x494=IKPowWithIntegerCheck(new_r02,-1);
if(!x494.valid){
continue;
}
CheckValue<IkReal> x495=IKPowWithIntegerCheck(new_r22,-1);
if(!x495.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x494.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x495.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x494.value)))+IKsqr(((-1.0)*new_r00*(x495.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*(x494.value)), ((-1.0)*new_r00*(x495.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x496=IKsin(j5);
IkReal x497=IKcos(j5);
IkReal x498=((0.000799999744000123)*new_r02);
IkReal x499=((0.999999680000154)*new_r22);
IkReal x500=((0.999999680000154)*new_r02);
IkReal x501=((0.000799999744000123)*new_r22);
IkReal x502=((1.0)*x497);
evalcond[0]=(((new_r02*x496))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x502))+new_r20);
evalcond[2]=((((-1.0)*x496))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x502))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x496))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x502)));
evalcond[6]=((((-1.0)*new_r20*x499))+((new_r20*x498))+(((-1.0)*new_r00*x501))+(((-1.0)*new_r00*x500))+(((-0.000799999744000123)*x497)));
evalcond[7]=((((-1.0)*new_r01*x501))+(((-1.0)*new_r01*x500))+(((-1.0)*new_r21*x499))+((new_r21*x498))+(((0.000799999744000123)*x496)));
evalcond[8]=((((-1.0)*new_r00*x498))+(((0.999999680000154)*x497))+(((-1.0)*new_r20*x500))+(((-1.0)*new_r20*x501))+((new_r00*x499)));
evalcond[9]=((((-1.0)*new_r21*x501))+(((-1.0)*new_r21*x500))+(((-1.0)*new_r01*x498))+(((-0.999999680000154)*x496))+((new_r01*x499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x503=IKPowWithIntegerCheck(new_r02,-1);
if(!x503.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x503.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x503.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x503.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x504=IKsin(j5);
IkReal x505=IKcos(j5);
IkReal x506=((0.000799999744000123)*new_r02);
IkReal x507=((0.999999680000154)*new_r22);
IkReal x508=((0.999999680000154)*new_r02);
IkReal x509=((0.000799999744000123)*new_r22);
IkReal x510=((1.0)*x505);
evalcond[0]=(((new_r02*x504))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x510))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x504)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x510)));
evalcond[4]=(((new_r22*x504))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r22*x510))+(((-1.0)*new_r00)));
evalcond[6]=((((-1.0)*new_r00*x508))+(((-1.0)*new_r00*x509))+(((-1.0)*new_r20*x507))+(((-0.000799999744000123)*x505))+((new_r20*x506)));
evalcond[7]=((((-1.0)*new_r21*x507))+(((-1.0)*new_r01*x508))+(((-1.0)*new_r01*x509))+((new_r21*x506))+(((0.000799999744000123)*x504)));
evalcond[8]=((((-1.0)*new_r00*x506))+(((-1.0)*new_r20*x509))+(((-1.0)*new_r20*x508))+((new_r00*x507))+(((0.999999680000154)*x505)));
evalcond[9]=((((-1.0)*new_r21*x509))+(((-1.0)*new_r21*x508))+(((-1.0)*new_r01*x506))+((new_r01*x507))+(((-0.999999680000154)*x504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x511 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x512.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x511.value)+(((1.5707963267949)*(x512.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x513=IKsin(j5);
IkReal x514=IKcos(j5);
IkReal x515=((0.000799999744000123)*new_r02);
IkReal x516=((0.999999680000154)*new_r22);
IkReal x517=((0.999999680000154)*new_r02);
IkReal x518=((0.000799999744000123)*new_r22);
IkReal x519=((1.0)*x514);
evalcond[0]=(((new_r02*x513))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x519))+new_r20);
evalcond[2]=((((-1.0)*x513))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x519)));
evalcond[4]=(((new_r22*x513))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r22*x519))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r20*x515))+(((-1.0)*new_r20*x516))+(((-1.0)*new_r00*x518))+(((-1.0)*new_r00*x517))+(((-0.000799999744000123)*x514)));
evalcond[7]=((((0.000799999744000123)*x513))+((new_r21*x515))+(((-1.0)*new_r01*x518))+(((-1.0)*new_r01*x517))+(((-1.0)*new_r21*x516)));
evalcond[8]=(((new_r00*x516))+(((0.999999680000154)*x514))+(((-1.0)*new_r20*x517))+(((-1.0)*new_r20*x518))+(((-1.0)*new_r00*x515)));
evalcond[9]=(((new_r01*x516))+(((-0.999999680000154)*x513))+(((-1.0)*new_r01*x515))+(((-1.0)*new_r21*x517))+(((-1.0)*new_r21*x518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x521=IKPowWithIntegerCheck(sj4,-1);
if(!x521.valid){
continue;
}
IkReal x520=x521.value;
CheckValue<IkReal> x522=IKPowWithIntegerCheck(cj3,-1);
if(!x522.valid){
continue;
}
CheckValue<IkReal> x523=IKPowWithIntegerCheck(cj4,-1);
if(!x523.valid){
continue;
}
if( IKabs((x520*(x522.value)*(x523.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x520)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x520*(x522.value)*(x523.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x520))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x520*(x522.value)*(x523.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x520));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x524=IKsin(j5);
IkReal x525=IKcos(j5);
IkReal x526=((0.999999680000154)*sj4);
IkReal x527=((0.000799999744000123)*sj3);
IkReal x528=(cj3*cj4);
IkReal x529=(cj4*new_r10);
IkReal x530=(cj3*new_r00);
IkReal x531=((0.999999680000154)*sj3);
IkReal x532=((1.0)*sj3);
IkReal x533=(cj4*new_r11);
IkReal x534=((0.999999680000154)*cj4);
IkReal x535=(new_r11*sj3);
IkReal x536=(new_r10*sj3);
IkReal x537=(cj3*new_r01);
IkReal x538=((0.000799999744000123)*cj4);
IkReal x539=((0.000799999744000123)*sj4);
IkReal x540=(sj3*x524);
IkReal x541=((1.0)*x525);
IkReal x542=((1.0)*x524);
evalcond[0]=(new_r20+((sj4*x525)));
evalcond[1]=((((-1.0)*sj4*x542))+new_r21);
evalcond[2]=(((cj4*x524))+x535+x537);
evalcond[3]=((((-1.0)*new_r00*x532))+(((-1.0)*x542))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x541))+(((-1.0)*new_r01*x532))+((cj3*new_r11)));
evalcond[5]=(((sj3*x525))+((x524*x528))+new_r01);
evalcond[6]=(x530+x536+(((-1.0)*cj4*x541)));
evalcond[7]=((((-1.0)*x528*x541))+x540+new_r00);
evalcond[8]=(((cj4*x540))+(((-1.0)*cj3*x541))+new_r11);
evalcond[9]=((((-1.0)*cj3*x542))+(((-1.0)*cj4*x525*x532))+new_r10);
evalcond[10]=((((0.000799999744000123)*new_r00*x528))+(((-1.0)*x526*x530))+(((-1.0)*x526*x536))+(((-1.0)*new_r20*x534))+(((-1.0)*new_r20*x539))+(((-0.000799999744000123)*x525))+((x527*x529)));
evalcond[11]=((((-1.0)*x526*x535))+(((-1.0)*x526*x537))+(((0.000799999744000123)*new_r01*x528))+(((0.000799999744000123)*x524))+(((-1.0)*new_r21*x539))+(((-1.0)*new_r21*x534))+((x527*x533)));
evalcond[12]=((((0.999999680000154)*x525))+(((-1.0)*new_r10*sj4*x527))+(((-1.0)*x530*x539))+(((-1.0)*x529*x531))+(((-1.0)*new_r20*x538))+((new_r20*x526))+(((-0.999999680000154)*new_r00*x528)));
evalcond[13]=((((-1.0)*x537*x539))+(((-1.0)*x531*x533))+(((-1.0)*new_r21*x538))+(((-0.999999680000154)*new_r01*x528))+(((-1.0)*new_r11*sj4*x527))+(((-0.999999680000154)*x524))+((new_r21*x526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(sj4,-1);
if(!x544.valid){
continue;
}
IkReal x543=x544.value;
CheckValue<IkReal> x545=IKPowWithIntegerCheck(sj3,-1);
if(!x545.valid){
continue;
}
if( IKabs((x543*(x545.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x543)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x543*(x545.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x543))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x543*(x545.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x543));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x546=IKsin(j5);
IkReal x547=IKcos(j5);
IkReal x548=((0.999999680000154)*sj4);
IkReal x549=((0.000799999744000123)*sj3);
IkReal x550=(cj3*cj4);
IkReal x551=(cj4*new_r10);
IkReal x552=(cj3*new_r00);
IkReal x553=((0.999999680000154)*sj3);
IkReal x554=((1.0)*sj3);
IkReal x555=(cj4*new_r11);
IkReal x556=((0.999999680000154)*cj4);
IkReal x557=(new_r11*sj3);
IkReal x558=(new_r10*sj3);
IkReal x559=(cj3*new_r01);
IkReal x560=((0.000799999744000123)*cj4);
IkReal x561=((0.000799999744000123)*sj4);
IkReal x562=(sj3*x546);
IkReal x563=((1.0)*x547);
IkReal x564=((1.0)*x546);
evalcond[0]=(new_r20+((sj4*x547)));
evalcond[1]=((((-1.0)*sj4*x564))+new_r21);
evalcond[2]=(((cj4*x546))+x559+x557);
evalcond[3]=((((-1.0)*new_r00*x554))+((cj3*new_r10))+(((-1.0)*x564)));
evalcond[4]=((((-1.0)*new_r01*x554))+((cj3*new_r11))+(((-1.0)*x563)));
evalcond[5]=(((sj3*x547))+new_r01+((x546*x550)));
evalcond[6]=((((-1.0)*cj4*x563))+x558+x552);
evalcond[7]=(x562+(((-1.0)*x550*x563))+new_r00);
evalcond[8]=((((-1.0)*cj3*x563))+new_r11+((cj4*x562)));
evalcond[9]=((((-1.0)*cj3*x564))+(((-1.0)*cj4*x547*x554))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x561))+(((-1.0)*x548*x552))+(((-1.0)*x548*x558))+(((-1.0)*new_r20*x556))+((x549*x551))+(((0.000799999744000123)*new_r00*x550))+(((-0.000799999744000123)*x547)));
evalcond[11]=((((0.000799999744000123)*x546))+(((-1.0)*new_r21*x556))+(((0.000799999744000123)*new_r01*x550))+(((-1.0)*x548*x557))+(((-1.0)*x548*x559))+((x549*x555))+(((-1.0)*new_r21*x561)));
evalcond[12]=((((-1.0)*new_r10*sj4*x549))+(((-1.0)*new_r20*x560))+(((-1.0)*x552*x561))+(((-1.0)*x551*x553))+((new_r20*x548))+(((-0.999999680000154)*new_r00*x550))+(((0.999999680000154)*x547)));
evalcond[13]=((((-1.0)*x553*x555))+(((-0.999999680000154)*new_r01*x550))+(((-1.0)*x559*x561))+(((-1.0)*new_r11*sj4*x549))+(((-0.999999680000154)*x546))+(((-1.0)*new_r21*x560))+((new_r21*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x565=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x565.value)))+(x566.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x567=IKsin(j5);
IkReal x568=IKcos(j5);
IkReal x569=((0.999999680000154)*sj4);
IkReal x570=((0.000799999744000123)*sj3);
IkReal x571=(cj3*cj4);
IkReal x572=(cj4*new_r10);
IkReal x573=(cj3*new_r00);
IkReal x574=((0.999999680000154)*sj3);
IkReal x575=((1.0)*sj3);
IkReal x576=(cj4*new_r11);
IkReal x577=((0.999999680000154)*cj4);
IkReal x578=(new_r11*sj3);
IkReal x579=(new_r10*sj3);
IkReal x580=(cj3*new_r01);
IkReal x581=((0.000799999744000123)*cj4);
IkReal x582=((0.000799999744000123)*sj4);
IkReal x583=(sj3*x567);
IkReal x584=((1.0)*x568);
IkReal x585=((1.0)*x567);
evalcond[0]=(((sj4*x568))+new_r20);
evalcond[1]=((((-1.0)*sj4*x585))+new_r21);
evalcond[2]=(x578+x580+((cj4*x567)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x575))+(((-1.0)*x585)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x575))+(((-1.0)*x584)));
evalcond[5]=(((sj3*x568))+((x567*x571))+new_r01);
evalcond[6]=((((-1.0)*cj4*x584))+x579+x573);
evalcond[7]=((((-1.0)*x571*x584))+x583+new_r00);
evalcond[8]=(((cj4*x583))+new_r11+(((-1.0)*cj3*x584)));
evalcond[9]=(new_r10+(((-1.0)*cj4*x568*x575))+(((-1.0)*cj3*x585)));
evalcond[10]=((((-1.0)*x569*x579))+(((-1.0)*x569*x573))+(((-1.0)*new_r20*x582))+(((-0.000799999744000123)*x568))+(((-1.0)*new_r20*x577))+(((0.000799999744000123)*new_r00*x571))+((x570*x572)));
evalcond[11]=((((-1.0)*x569*x578))+(((0.000799999744000123)*new_r01*x571))+(((-1.0)*new_r21*x582))+(((-1.0)*new_r21*x577))+(((-1.0)*x569*x580))+(((0.000799999744000123)*x567))+((x570*x576)));
evalcond[12]=((((-0.999999680000154)*new_r00*x571))+(((-1.0)*new_r10*sj4*x570))+((new_r20*x569))+(((-1.0)*x573*x582))+(((0.999999680000154)*x568))+(((-1.0)*new_r20*x581))+(((-1.0)*x572*x574)));
evalcond[13]=((((-1.0)*x580*x582))+(((-0.999999680000154)*x567))+(((-1.0)*new_r11*sj4*x570))+(((-0.999999680000154)*new_r01*x571))+(((-1.0)*x574*x576))+(((-1.0)*new_r21*x581))+((new_r21*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x586=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x586.valid){
continue;
}
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x586.value)))+(x587.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj4*(IKcos(j5))))+new_r20);
evalcond[1]=((((-1.0)*sj4*(IKsin(j5))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj5;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x588=IKsin(j3);
IkReal x589=IKcos(j3);
IkReal x590=new_r22*new_r22;
IkReal x591=sj4*sj4;
IkReal x592=((0.000799999744000123)*new_r22);
IkReal x593=((0.999999680000154)*sj4);
IkReal x594=((1.0)*sj4);
IkReal x595=((0.999999680000154)*new_r22);
IkReal x596=((0.000799999744000123)*sj4);
IkReal x597=(new_r22*x593);
IkReal x598=(sj4*x592);
IkReal x599=(new_r01*x589);
IkReal x600=(new_r22*x588);
IkReal x601=(new_r11*x588);
IkReal x602=(new_r10*x588);
IkReal x603=(new_r12*x588);
IkReal x604=(new_r00*x589);
IkReal x605=((1.0)*x588);
IkReal x606=(new_r02*x589);
evalcond[0]=(x588+new_r00);
evalcond[1]=(((new_r22*x589))+new_r01);
evalcond[2]=(x600+new_r11);
evalcond[3]=((((-1.0)*x589))+new_r10);
evalcond[4]=((((-1.0)*x589*x594))+new_r02);
evalcond[5]=((((-1.0)*x588*x594))+new_r12);
evalcond[6]=(x602+x604);
evalcond[7]=((((-1.0)*new_r02*x605))+((new_r12*x589)));
evalcond[8]=((((-1.0)*new_r01*x605))+((new_r11*x589)));
evalcond[9]=(x599+x601+new_r22);
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x605))+((new_r10*x589)));
evalcond[11]=((((-1.0)*x594))+x603+x606);
evalcond[12]=((((-1.0)*x593*x604))+(((-1.0)*x593*x602))+((x592*x604))+((x592*x602)));
evalcond[13]=((((-1.0)*x596*x604))+(((-1.0)*x596*x602))+(((-1.0)*x595*x602))+(((-1.0)*x595*x604)));
evalcond[14]=((0.999999680000154)+(((-1.0)*x593*x606))+(((-1.0)*x593*x603))+((x592*x603))+((x592*x606))+(((-0.999999680000154)*x590))+(((-1.0)*x598)));
evalcond[15]=((0.000799999744000123)+(((-1.0)*x596*x603))+(((-1.0)*x596*x606))+(((-0.000799999744000123)*x590))+x597+(((-1.0)*x595*x606))+(((-1.0)*x595*x603)));
evalcond[16]=((0.000799999744000123)+(((-1.0)*x593*x601))+((x592*x601))+(((-1.0)*x597))+(((-1.0)*x593*x599))+(((-0.000799999744000123)*x591))+((x592*x599)));
evalcond[17]=((-0.999999680000154)+(((-1.0)*x596*x599))+(((-1.0)*x596*x601))+(((-1.0)*x598))+(((-1.0)*x595*x599))+(((0.999999680000154)*x591))+(((-1.0)*x595*x601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x607=IKcos(j3);
IkReal x608=IKsin(j3);
IkReal x609=new_r22*new_r22;
IkReal x610=sj4*sj4;
IkReal x611=((0.000799999744000123)*sj4);
IkReal x612=((0.999999680000154)*sj4);
IkReal x613=((1.0)*sj4);
IkReal x614=((0.000799999744000123)*new_r22);
IkReal x615=((0.999999680000154)*new_r22);
IkReal x616=((1.0)*new_r22);
IkReal x617=(new_r22*x612);
IkReal x618=(new_r22*x611);
IkReal x619=(new_r01*x607);
IkReal x620=(new_r11*x608);
IkReal x621=(new_r10*x608);
IkReal x622=(new_r12*x608);
IkReal x623=(new_r00*x607);
IkReal x624=((1.0)*x608);
IkReal x625=(new_r02*x607);
evalcond[0]=(x607+new_r10);
evalcond[1]=((((-1.0)*x624))+new_r00);
evalcond[2]=((((-1.0)*x607*x613))+new_r02);
evalcond[3]=(new_r12+(((-1.0)*x608*x613)));
evalcond[4]=((((-1.0)*x607*x616))+new_r01);
evalcond[5]=(new_r11+(((-1.0)*x608*x616)));
evalcond[6]=(x621+x623);
evalcond[7]=((((-1.0)*new_r02*x624))+((new_r12*x607)));
evalcond[8]=((((-1.0)*new_r01*x624))+((new_r11*x607)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x624))+((new_r10*x607)));
evalcond[10]=((((-1.0)*x613))+x625+x622);
evalcond[11]=((((-1.0)*x616))+x619+x620);
evalcond[12]=(((x614*x621))+((x614*x623))+(((-1.0)*x612*x621))+(((-1.0)*x612*x623)));
evalcond[13]=((((-1.0)*x611*x623))+(((-1.0)*x611*x621))+(((-1.0)*x615*x623))+(((-1.0)*x615*x621)));
evalcond[14]=((0.999999680000154)+(((-0.999999680000154)*x609))+((x614*x622))+((x614*x625))+(((-1.0)*x618))+(((-1.0)*x612*x622))+(((-1.0)*x612*x625)));
evalcond[15]=((0.000799999744000123)+(((-1.0)*x611*x625))+(((-1.0)*x611*x622))+x617+(((-1.0)*x615*x625))+(((-1.0)*x615*x622))+(((-0.000799999744000123)*x609)));
evalcond[16]=((-0.000799999744000123)+(((-1.0)*x612*x619))+((x614*x620))+(((0.000799999744000123)*x610))+((x614*x619))+(((-1.0)*x612*x620))+x617);
evalcond[17]=((0.999999680000154)+(((-0.999999680000154)*x610))+(((-1.0)*x611*x619))+(((-1.0)*x611*x620))+x618+(((-1.0)*x615*x619))+(((-1.0)*x615*x620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x626=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x626))+(((-1.0)*new_r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r00))+(((-1.0)*sj5*x626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x626))+(((-1.0)*new_r00*sj5))))+IKsqr((((cj5*new_r00))+(((-1.0)*sj5*x626))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj5*x626))+(((-1.0)*new_r00*sj5))), (((cj5*new_r00))+(((-1.0)*sj5*x626))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x627=IKcos(j3);
IkReal x628=IKsin(j3);
IkReal x629=((1.0)*cj5);
IkReal x630=(sj5*x628);
IkReal x631=(sj5*x627);
IkReal x632=(new_r01*x627);
IkReal x633=(new_r11*x628);
IkReal x634=(new_r10*x628);
IkReal x635=(new_r00*x627);
IkReal x636=((1.0)*x628);
IkReal x637=(x627*x629);
evalcond[0]=(sj5+x632+x633);
evalcond[1]=(((cj5*x628))+x631+new_r01);
evalcond[2]=((((-1.0)*x637))+x630+new_r00);
evalcond[3]=((((-1.0)*x637))+x630+new_r11);
evalcond[4]=((((-1.0)*x629))+x634+x635);
evalcond[5]=((((-1.0)*x628*x629))+(((-1.0)*x631))+new_r10);
evalcond[6]=((((-1.0)*sj5))+(((-1.0)*new_r00*x636))+((new_r10*x627)));
evalcond[7]=((((-1.0)*new_r01*x636))+(((-1.0)*x629))+((new_r11*x627)));
evalcond[8]=((((0.000799999744000123)*x635))+(((0.000799999744000123)*x634))+(((-0.000799999744000123)*cj5)));
evalcond[9]=((((0.000799999744000123)*sj5))+(((0.000799999744000123)*x633))+(((0.000799999744000123)*x632)));
evalcond[10]=((((0.999999680000154)*cj5))+(((-0.999999680000154)*x635))+(((-0.999999680000154)*x634)));
evalcond[11]=((((-0.999999680000154)*sj5))+(((-0.999999680000154)*x633))+(((-0.999999680000154)*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x638=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x638))+(((-1.0)*new_r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x638))+((new_r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x638))+(((-1.0)*new_r00*sj5))))+IKsqr(((((-1.0)*new_r00*x638))+((new_r01*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*new_r01*x638))+(((-1.0)*new_r00*sj5))), ((((-1.0)*new_r00*x638))+((new_r01*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x639=IKsin(j3);
IkReal x640=IKcos(j3);
IkReal x641=((1.0)*sj5);
IkReal x642=(cj5*x639);
IkReal x643=((0.000799999744000123)*x640);
IkReal x644=(new_r01*x640);
IkReal x645=(new_r11*x639);
IkReal x646=(new_r10*x639);
IkReal x647=(cj5*x640);
IkReal x648=(new_r00*x640);
IkReal x649=((1.0)*x639);
IkReal x650=(x640*x641);
evalcond[0]=(cj5+x646+x648);
evalcond[1]=(((sj5*x639))+x647+new_r00);
evalcond[2]=((((-1.0)*x650))+x642+new_r01);
evalcond[3]=((((-1.0)*x650))+x642+new_r10);
evalcond[4]=((((-1.0)*x641))+x645+x644);
evalcond[5]=((((-1.0)*x647))+(((-1.0)*x639*x641))+new_r11);
evalcond[6]=((((-1.0)*x641))+((new_r10*x640))+(((-1.0)*new_r00*x649)));
evalcond[7]=(((new_r11*x640))+(((-1.0)*new_r01*x649))+(((-1.0)*cj5)));
evalcond[8]=((((-0.000799999744000123)*x646))+(((-0.000799999744000123)*cj5))+(((-1.0)*new_r00*x643)));
evalcond[9]=((((-0.000799999744000123)*x645))+(((0.000799999744000123)*sj5))+(((-1.0)*new_r01*x643)));
evalcond[10]=((((0.999999680000154)*cj5))+(((0.999999680000154)*x646))+(((0.999999680000154)*x648)));
evalcond[11]=((((-0.999999680000154)*sj5))+(((0.999999680000154)*x644))+(((0.999999680000154)*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=6.39999590400262e-7;
j3eval[1]=new_r22;
j3eval[2]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x651=((0.000799999744000123)*new_r22);
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal((new_r00*x651)),IkReal((new_r10*x651)),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
IkReal x652=x653.value;
j3array[0]=((-1.0)*x652);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x652)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x654=IKsin(j3);
IkReal x655=IKcos(j3);
IkReal x656=(new_r01*x655);
IkReal x657=(new_r10*x654);
IkReal x658=((1.0)*x654);
IkReal x659=(new_r11*new_r22*x654);
IkReal x660=((0.999999680000154)*new_r22*x655);
evalcond[0]=(x656+((new_r11*x654)));
evalcond[1]=(x657+((new_r00*x655)));
evalcond[2]=((((-1.0)*new_r00*x658))+((new_r10*x655)));
evalcond[3]=((((-1.0)*new_r01*x658))+((new_r11*x655)));
evalcond[4]=((((0.000799999744000123)*x659))+(((0.000799999744000123)*new_r22*x656)));
evalcond[5]=((((-0.999999680000154)*new_r22*x657))+(((-1.0)*new_r00*x660)));
evalcond[6]=((((-0.999999680000154)*new_r22*x656))+(((-0.999999680000154)*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
IkReal x661=x662.value;
j3array[0]=((-1.0)*x661);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x661)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x663=IKcos(j3);
IkReal x664=IKsin(j3);
IkReal x665=((0.999999680000154)*new_r22);
IkReal x666=((0.000799999744000123)*new_r22);
IkReal x667=(new_r01*x663);
IkReal x668=(new_r00*x663);
IkReal x669=(new_r11*x664);
IkReal x670=((1.0)*x664);
IkReal x671=(x664*x666);
evalcond[0]=(x669+x667);
evalcond[1]=((((-1.0)*new_r00*x670))+((new_r10*x663)));
evalcond[2]=((((-1.0)*new_r01*x670))+((new_r11*x663)));
evalcond[3]=(((new_r10*x671))+((x666*x668)));
evalcond[4]=(((x666*x669))+((x666*x667)));
evalcond[5]=((((-1.0)*x665*x668))+(((-1.0)*new_r10*x664*x665)));
evalcond[6]=((((-1.0)*x665*x669))+(((-1.0)*x665*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x673 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x673.valid){
continue;
}
IkReal x672=x673.value;
j3array[0]=((-1.0)*x672);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x672)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x674=IKcos(j3);
IkReal x675=IKsin(j3);
IkReal x676=((0.000799999744000123)*new_r22);
IkReal x677=(new_r10*x675);
IkReal x678=((1.0)*x675);
IkReal x679=(new_r00*x674);
IkReal x680=(new_r11*new_r22*x675);
IkReal x681=((0.999999680000154)*new_r22*x674);
evalcond[0]=(x679+x677);
evalcond[1]=(((new_r10*x674))+(((-1.0)*new_r00*x678)));
evalcond[2]=(((new_r11*x674))+(((-1.0)*new_r01*x678)));
evalcond[3]=(((x676*x679))+((x676*x677)));
evalcond[4]=(((new_r11*x675*x676))+((new_r01*x674*x676)));
evalcond[5]=((((-0.999999680000154)*new_r22*x677))+(((-0.999999680000154)*new_r22*x679)));
evalcond[6]=((((-1.0)*new_r01*x681))+(((-0.999999680000154)*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x683=IKPowWithIntegerCheck(sj4,-1);
if(!x683.valid){
continue;
}
IkReal x682=x683.value;
CheckValue<IkReal> x684=IKPowWithIntegerCheck(cj5,-1);
if(!x684.valid){
continue;
}
if( IKabs((x682*(x684.value)*(((((-1.0)*cj4*new_r02*sj5))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x682)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x682*(x684.value)*(((((-1.0)*cj4*new_r02*sj5))+(((-1.0)*new_r01*sj4))))))+IKsqr((new_r02*x682))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x682*(x684.value)*(((((-1.0)*cj4*new_r02*sj5))+(((-1.0)*new_r01*sj4))))), (new_r02*x682));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x685=IKcos(j3);
IkReal x686=IKsin(j3);
IkReal x687=((0.999999680000154)*sj4);
IkReal x688=((0.000799999744000123)*new_r22);
IkReal x689=((0.000799999744000123)*cj4);
IkReal x690=((1.0)*sj4);
IkReal x691=((0.999999680000154)*cj4);
IkReal x692=(cj4*sj5);
IkReal x693=((0.000799999744000123)*sj4);
IkReal x694=((1.0)*sj5);
IkReal x695=((1.0)*cj5);
IkReal x696=(new_r01*x685);
IkReal x697=(cj4*x695);
IkReal x698=(new_r10*x686);
IkReal x699=(new_r00*x685);
IkReal x700=(new_r11*x686);
IkReal x701=(new_r12*x686);
IkReal x702=(new_r02*x685);
IkReal x703=((1.0)*x686);
evalcond[0]=((((-1.0)*x685*x690))+new_r02);
evalcond[1]=((((-1.0)*x686*x690))+new_r12);
evalcond[2]=(((new_r12*x685))+(((-1.0)*new_r02*x703)));
evalcond[3]=(((cj5*x686))+new_r01+((x685*x692)));
evalcond[4]=((((-1.0)*x690))+x702+x701);
evalcond[5]=(x696+x692+x700);
evalcond[6]=(((sj5*x686))+(((-1.0)*x685*x697))+new_r00);
evalcond[7]=(((x686*x692))+(((-1.0)*x685*x695))+new_r11);
evalcond[8]=((((-1.0)*x694))+((new_r10*x685))+(((-1.0)*new_r00*x703)));
evalcond[9]=((((-1.0)*x695))+((new_r11*x685))+(((-1.0)*new_r01*x703)));
evalcond[10]=(x698+x699+(((-1.0)*x697)));
evalcond[11]=((((-1.0)*x685*x694))+(((-1.0)*x686*x697))+new_r10);
evalcond[12]=((0.999999680000154)+(((-1.0)*x687*x702))+(((-1.0)*x687*x701))+((x689*x701))+((x689*x702))+(((-1.0)*new_r22*x691))+(((-1.0)*sj4*x688)));
evalcond[13]=((0.000799999744000123)+(((-1.0)*x693*x701))+(((-1.0)*x693*x702))+(((-1.0)*x691*x702))+(((-1.0)*x691*x701))+(((-1.0)*cj4*x688))+((new_r22*x687)));
evalcond[14]=((((-1.0)*x687*x698))+(((-1.0)*x687*x699))+((x689*x698))+((x689*x699))+(((-0.000799999744000123)*cj5))+(((-1.0)*new_r20*x691))+(((-1.0)*new_r20*x693)));
evalcond[15]=((((-1.0)*x687*x696))+(((-1.0)*x687*x700))+((x689*x700))+(((0.000799999744000123)*sj5))+((x689*x696))+(((-1.0)*new_r21*x691))+(((-1.0)*new_r21*x693)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x693*x698))+(((-1.0)*x693*x699))+(((-1.0)*new_r20*x689))+(((-1.0)*x691*x698))+(((-1.0)*x691*x699))+((new_r20*x687)));
evalcond[17]=((((-1.0)*x693*x700))+(((-0.999999680000154)*sj5))+(((-1.0)*x691*x700))+(((-1.0)*x693*x696))+((new_r21*x687))+(((-1.0)*new_r21*x689))+(((-1.0)*x691*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x704=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x704.valid){
continue;
}
CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x705.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x704.value)))+(x705.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x706=IKcos(j3);
IkReal x707=IKsin(j3);
IkReal x708=((0.999999680000154)*sj4);
IkReal x709=((0.000799999744000123)*new_r22);
IkReal x710=((0.000799999744000123)*cj4);
IkReal x711=((1.0)*sj4);
IkReal x712=((0.999999680000154)*cj4);
IkReal x713=(cj4*sj5);
IkReal x714=((0.000799999744000123)*sj4);
IkReal x715=((1.0)*sj5);
IkReal x716=((1.0)*cj5);
IkReal x717=(new_r01*x706);
IkReal x718=(cj4*x716);
IkReal x719=(new_r10*x707);
IkReal x720=(new_r00*x706);
IkReal x721=(new_r11*x707);
IkReal x722=(new_r12*x707);
IkReal x723=(new_r02*x706);
IkReal x724=((1.0)*x707);
evalcond[0]=((((-1.0)*x706*x711))+new_r02);
evalcond[1]=((((-1.0)*x707*x711))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x724))+((new_r12*x706)));
evalcond[3]=(((x706*x713))+((cj5*x707))+new_r01);
evalcond[4]=((((-1.0)*x711))+x722+x723);
evalcond[5]=(x713+x717+x721);
evalcond[6]=((((-1.0)*x706*x718))+((sj5*x707))+new_r00);
evalcond[7]=((((-1.0)*x706*x716))+((x707*x713))+new_r11);
evalcond[8]=((((-1.0)*x715))+((new_r10*x706))+(((-1.0)*new_r00*x724)));
evalcond[9]=((((-1.0)*x716))+((new_r11*x706))+(((-1.0)*new_r01*x724)));
evalcond[10]=((((-1.0)*x718))+x719+x720);
evalcond[11]=((((-1.0)*x707*x718))+(((-1.0)*x706*x715))+new_r10);
evalcond[12]=((0.999999680000154)+(((-1.0)*sj4*x709))+(((-1.0)*new_r22*x712))+((x710*x723))+((x710*x722))+(((-1.0)*x708*x722))+(((-1.0)*x708*x723)));
evalcond[13]=((0.000799999744000123)+(((-1.0)*x714*x722))+(((-1.0)*x714*x723))+(((-1.0)*cj4*x709))+((new_r22*x708))+(((-1.0)*x712*x723))+(((-1.0)*x712*x722)));
evalcond[14]=(((x710*x720))+(((-1.0)*new_r20*x714))+(((-1.0)*new_r20*x712))+((x710*x719))+(((-0.000799999744000123)*cj5))+(((-1.0)*x708*x719))+(((-1.0)*x708*x720)));
evalcond[15]=((((-1.0)*new_r21*x714))+(((-1.0)*new_r21*x712))+((x710*x721))+(((0.000799999744000123)*sj5))+((x710*x717))+(((-1.0)*x708*x717))+(((-1.0)*x708*x721)));
evalcond[16]=((((-1.0)*x714*x719))+(((0.999999680000154)*cj5))+(((-1.0)*new_r20*x710))+(((-1.0)*x712*x719))+(((-1.0)*x714*x720))+((new_r20*x708))+(((-1.0)*x712*x720)));
evalcond[17]=((((-1.0)*x714*x717))+(((-1.0)*new_r21*x710))+(((-0.999999680000154)*sj5))+((new_r21*x708))+(((-1.0)*x712*x717))+(((-1.0)*x714*x721))+(((-1.0)*x712*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x725=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x726.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x725.value)))+(x726.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x727=IKcos(j3);
IkReal x728=IKsin(j3);
IkReal x729=((0.000799999744000123)*new_r22);
IkReal x730=((0.999999680000154)*new_r22);
IkReal x731=((1.0)*sj4);
IkReal x732=((0.000799999744000123)*cj4);
IkReal x733=((0.999999680000154)*cj4);
IkReal x734=((0.000799999744000123)*sj4);
IkReal x735=((0.999999680000154)*sj4);
IkReal x736=(new_r02*x727);
IkReal x737=(new_r12*x728);
evalcond[0]=((((-1.0)*x727*x731))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x728*x731)));
evalcond[2]=((((-1.0)*new_r02*x728))+((new_r12*x727)));
evalcond[3]=((((-1.0)*x731))+x737+x736);
evalcond[4]=((0.999999680000154)+(((-1.0)*x735*x736))+(((-1.0)*x735*x737))+(((-1.0)*cj4*x730))+(((-1.0)*sj4*x729))+((x732*x737))+((x732*x736)));
evalcond[5]=((0.000799999744000123)+(((-1.0)*x734*x737))+(((-1.0)*x734*x736))+(((-1.0)*x733*x736))+(((-1.0)*x733*x737))+(((-1.0)*cj4*x729))+((sj4*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=new_r22;
j5eval[1]=((IKabs(new_r11))+(IKabs(new_r10)));
j5eval[2]=IKsign(new_r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x738=IKsin(j5);
IkReal x739=IKcos(j5);
IkReal x740=((1.0)*x739);
evalcond[0]=(x738+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x740)));
evalcond[2]=((((-1.0)*x738))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x740)));
evalcond[4]=((((-0.000799999744000123)*x739))+(((0.000799999744000123)*new_r10)));
evalcond[5]=((((0.000799999744000123)*new_r11))+(((0.000799999744000123)*x738)));
evalcond[6]=((((-0.999999680000154)*new_r10))+(((0.999999680000154)*x739)));
evalcond[7]=((((-0.999999680000154)*new_r11))+(((-0.999999680000154)*x738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x741=IKcos(j5);
IkReal x742=IKsin(j5);
IkReal x743=((1.0)*x742);
evalcond[0]=(x741+new_r10);
evalcond[1]=(new_r11+(((-1.0)*x743)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x743)));
evalcond[3]=((((-1.0)*x741))+(((-1.0)*new_r01)));
evalcond[4]=((((-0.000799999744000123)*x741))+(((-0.000799999744000123)*new_r10)));
evalcond[5]=((((0.000799999744000123)*x742))+(((-0.000799999744000123)*new_r11)));
evalcond[6]=((((0.999999680000154)*x741))+(((0.999999680000154)*new_r10)));
evalcond[7]=((((-0.999999680000154)*x742))+(((0.999999680000154)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x744=IKsin(j5);
IkReal x745=IKcos(j5);
IkReal x746=((0.000799999744000123)*new_r22);
IkReal x747=((0.999999680000154)*new_r22);
IkReal x748=((1.0)*x745);
evalcond[0]=(((new_r22*x744))+new_r11);
evalcond[1]=((((-1.0)*new_r22*x748))+new_r10);
evalcond[2]=((((-1.0)*x744))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x748)));
evalcond[4]=((((-0.000799999744000123)*x745))+((new_r10*x746)));
evalcond[5]=(((new_r11*x746))+(((0.000799999744000123)*x744)));
evalcond[6]=((((0.999999680000154)*x745))+(((-1.0)*new_r10*x747)));
evalcond[7]=((((-0.999999680000154)*x744))+(((-1.0)*new_r11*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(sj4,-1);
if(!x749.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x749.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x749.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x749.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x750=IKsin(j5);
IkReal x751=IKcos(j5);
IkReal x752=((0.999999680000154)*sj4);
IkReal x753=((0.999999680000154)*new_r22);
IkReal x754=((0.000799999744000123)*new_r22);
IkReal x755=((0.000799999744000123)*sj4);
IkReal x756=((1.0)*x751);
IkReal x757=((1.0)*x750);
evalcond[0]=(((sj4*x751))+new_r20);
evalcond[1]=(((new_r22*x750))+new_r11);
evalcond[2]=((((-1.0)*sj4*x757))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x756))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x757)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x756)));
evalcond[6]=((((-0.000799999744000123)*x751))+(((-1.0)*new_r10*x752))+((new_r10*x754))+(((-1.0)*new_r20*x755))+(((-1.0)*new_r20*x753)));
evalcond[7]=((((-1.0)*new_r21*x753))+(((-1.0)*new_r21*x755))+(((-1.0)*new_r11*x752))+((new_r11*x754))+(((0.000799999744000123)*x750)));
evalcond[8]=((((0.999999680000154)*x751))+(((-1.0)*new_r10*x755))+(((-1.0)*new_r10*x753))+((new_r20*x752))+(((-1.0)*new_r20*x754)));
evalcond[9]=((((-0.999999680000154)*x750))+(((-1.0)*new_r21*x754))+(((-1.0)*new_r11*x753))+(((-1.0)*new_r11*x755))+((new_r21*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(IKsign(new_r22),-1);
if(!x759.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x758.value)+(((1.5707963267949)*(x759.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x760=IKsin(j5);
IkReal x761=IKcos(j5);
IkReal x762=((0.999999680000154)*sj4);
IkReal x763=((0.999999680000154)*new_r22);
IkReal x764=((0.000799999744000123)*new_r22);
IkReal x765=((0.000799999744000123)*sj4);
IkReal x766=((1.0)*x761);
IkReal x767=((1.0)*x760);
evalcond[0]=(((sj4*x761))+new_r20);
evalcond[1]=(((new_r22*x760))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*sj4*x767)));
evalcond[3]=((((-1.0)*new_r22*x766))+new_r10);
evalcond[4]=((((-1.0)*x767))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x766))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x765))+(((-1.0)*new_r20*x763))+((new_r10*x764))+(((-1.0)*new_r10*x762))+(((-0.000799999744000123)*x761)));
evalcond[7]=(((new_r11*x764))+(((0.000799999744000123)*x760))+(((-1.0)*new_r11*x762))+(((-1.0)*new_r21*x763))+(((-1.0)*new_r21*x765)));
evalcond[8]=((((-1.0)*new_r20*x764))+(((-1.0)*new_r10*x765))+(((-1.0)*new_r10*x763))+((new_r20*x762))+(((0.999999680000154)*x761)));
evalcond[9]=(((new_r21*x762))+(((-1.0)*new_r11*x763))+(((-1.0)*new_r11*x765))+(((-0.999999680000154)*x760))+(((-1.0)*new_r21*x764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x768=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x768.valid){
continue;
}
CheckValue<IkReal> x769 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x769.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x768.value)))+(x769.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x770=IKsin(j5);
IkReal x771=IKcos(j5);
IkReal x772=((0.999999680000154)*sj4);
IkReal x773=((0.999999680000154)*new_r22);
IkReal x774=((0.000799999744000123)*new_r22);
IkReal x775=((0.000799999744000123)*sj4);
IkReal x776=((1.0)*x771);
IkReal x777=((1.0)*x770);
evalcond[0]=(((sj4*x771))+new_r20);
evalcond[1]=(((new_r22*x770))+new_r11);
evalcond[2]=((((-1.0)*sj4*x777))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x776))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x777)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x776)));
evalcond[6]=((((-0.000799999744000123)*x771))+(((-1.0)*new_r20*x775))+(((-1.0)*new_r20*x773))+(((-1.0)*new_r10*x772))+((new_r10*x774)));
evalcond[7]=((((-1.0)*new_r21*x775))+(((-1.0)*new_r21*x773))+(((-1.0)*new_r11*x772))+((new_r11*x774))+(((0.000799999744000123)*x770)));
evalcond[8]=((((0.999999680000154)*x771))+(((-1.0)*new_r20*x774))+(((-1.0)*new_r10*x773))+(((-1.0)*new_r10*x775))+((new_r20*x772)));
evalcond[9]=((((-0.999999680000154)*x770))+(((-1.0)*new_r21*x774))+(((-1.0)*new_r11*x773))+(((-1.0)*new_r11*x775))+((new_r21*x772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x778=IKcos(j5);
IkReal x779=IKsin(j5);
IkReal x780=((0.999999680000154)*sj4);
IkReal x781=((0.999999680000154)*new_r22);
IkReal x782=((0.000799999744000123)*new_r22);
IkReal x783=((0.000799999744000123)*sj4);
IkReal x784=((1.0)*x778);
IkReal x785=((1.0)*x779);
evalcond[0]=(((sj4*x778))+new_r20);
evalcond[1]=((((-1.0)*x785))+new_r00);
evalcond[2]=((((-1.0)*x784))+new_r01);
evalcond[3]=((((-1.0)*sj4*x785))+new_r21);
evalcond[4]=(((new_r22*x779))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r22*x784))+(((-1.0)*new_r10)));
evalcond[6]=((((-0.000799999744000123)*x778))+((new_r10*x780))+(((-1.0)*new_r10*x782))+(((-1.0)*new_r20*x783))+(((-1.0)*new_r20*x781)));
evalcond[7]=((((-1.0)*new_r21*x781))+(((-1.0)*new_r21*x783))+((new_r11*x780))+(((-1.0)*new_r11*x782))+(((0.000799999744000123)*x779)));
evalcond[8]=((((0.999999680000154)*x778))+((new_r10*x783))+((new_r10*x781))+((new_r20*x780))+(((-1.0)*new_r20*x782)));
evalcond[9]=(((new_r21*x780))+(((-1.0)*new_r21*x782))+((new_r11*x781))+((new_r11*x783))+(((-0.999999680000154)*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x786=IKcos(j5);
IkReal x787=IKsin(j5);
IkReal x788=((1.0)*sj3);
IkReal x789=((1.0)*x787);
IkReal x790=((1.0)*x786);
evalcond[0]=(x786+new_r20);
evalcond[1]=((((-1.0)*x789))+new_r21);
evalcond[2]=(new_r01+((sj3*x786)));
evalcond[3]=(new_r00+((sj3*x787)));
evalcond[4]=((((-1.0)*cj3*x790))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x789))+new_r10);
evalcond[6]=((((-1.0)*x789))+((cj3*new_r10))+(((-1.0)*new_r00*x788)));
evalcond[7]=((((-1.0)*new_r01*x788))+(((-1.0)*x790))+((cj3*new_r11)));
evalcond[8]=((((-0.000799999744000123)*x786))+(((-0.000799999744000123)*new_r20)));
evalcond[9]=((((0.000799999744000123)*x787))+(((-0.000799999744000123)*new_r21)));
evalcond[10]=((((0.999999680000154)*new_r20))+(((0.999999680000154)*x786)));
evalcond[11]=((((0.999999680000154)*new_r21))+(((-0.999999680000154)*x787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x791=IKcos(j5);
IkReal x792=IKsin(j5);
IkReal x793=((1.0)*sj3);
IkReal x794=((1.0)*x791);
evalcond[0]=(x792+new_r21);
evalcond[1]=((((-1.0)*x794))+new_r20);
evalcond[2]=(new_r01+((sj3*x791)));
evalcond[3]=(new_r00+((sj3*x792)));
evalcond[4]=(((new_r02*x792))+new_r10);
evalcond[5]=((((-1.0)*cj3*x794))+new_r11);
evalcond[6]=(((cj3*new_r10))+(((-1.0)*x792))+(((-1.0)*new_r00*x793)));
evalcond[7]=((((-1.0)*new_r01*x793))+(((-1.0)*x794))+((cj3*new_r11)));
evalcond[8]=((((-0.000799999744000123)*x791))+(((0.000799999744000123)*new_r20)));
evalcond[9]=((((0.000799999744000123)*x792))+(((0.000799999744000123)*new_r21)));
evalcond[10]=((((-0.999999680000154)*new_r20))+(((0.999999680000154)*x791)));
evalcond[11]=((((-0.999999680000154)*new_r21))+(((-0.999999680000154)*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x795=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x795))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x795))+(((-1.0)*new_r00*sj3))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x795))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x795))+(((-1.0)*new_r00*sj3))), (((cj3*new_r00))+(((-1.0)*sj3*x795))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x796=IKsin(j5);
IkReal x797=IKcos(j5);
IkReal x798=(cj3*new_r00);
IkReal x799=((1.0)*sj3);
IkReal x800=(new_r10*sj3);
IkReal x801=(new_r11*sj3);
IkReal x802=(cj3*new_r01);
IkReal x803=((1.0)*x797);
IkReal x804=(sj3*x796);
IkReal x805=(cj3*x796);
IkReal x806=(cj3*x803);
evalcond[0]=(x796+x801+x802);
evalcond[1]=(new_r01+x805+((sj3*x797)));
evalcond[2]=(x798+x800+(((-1.0)*x803)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x796))+(((-1.0)*new_r00*x799)));
evalcond[4]=((((-1.0)*new_r01*x799))+((cj3*new_r11))+(((-1.0)*x803)));
evalcond[5]=(new_r00+x804+(((-1.0)*x806)));
evalcond[6]=(new_r11+x804+(((-1.0)*x806)));
evalcond[7]=((((-1.0)*x805))+(((-1.0)*x797*x799))+new_r10);
evalcond[8]=((((0.000799999744000123)*x800))+(((0.000799999744000123)*x798))+(((-0.000799999744000123)*x797)));
evalcond[9]=((((0.000799999744000123)*x801))+(((0.000799999744000123)*x802))+(((0.000799999744000123)*x796)));
evalcond[10]=((((-0.999999680000154)*x798))+(((-0.999999680000154)*x800))+(((0.999999680000154)*x797)));
evalcond[11]=((((-0.999999680000154)*x796))+(((-0.999999680000154)*x801))+(((-0.999999680000154)*x802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x807=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x807))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x807))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x807))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x807))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x807))+((cj3*new_r01))), ((((-1.0)*new_r01*x807))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x808=IKsin(j5);
IkReal x809=IKcos(j5);
IkReal x810=(cj3*new_r00);
IkReal x811=((1.0)*sj3);
IkReal x812=(new_r10*sj3);
IkReal x813=(new_r11*sj3);
IkReal x814=(cj3*new_r01);
IkReal x815=((1.0)*x808);
IkReal x816=(sj3*x809);
IkReal x817=(sj3*x808);
IkReal x818=(cj3*x809);
IkReal x819=(cj3*x815);
evalcond[0]=(x812+x810+x809);
evalcond[1]=((((-1.0)*x815))+x814+x813);
evalcond[2]=(new_r00+x818+x817);
evalcond[3]=((((-1.0)*x815))+((cj3*new_r10))+(((-1.0)*new_r00*x811)));
evalcond[4]=((((-1.0)*x809))+(((-1.0)*new_r01*x811))+((cj3*new_r11)));
evalcond[5]=((((-1.0)*x819))+new_r01+x816);
evalcond[6]=((((-1.0)*x819))+new_r10+x816);
evalcond[7]=((((-1.0)*x808*x811))+(((-1.0)*x818))+new_r11);
evalcond[8]=((((-0.000799999744000123)*x809))+(((-0.000799999744000123)*x810))+(((-0.000799999744000123)*x812)));
evalcond[9]=((((0.000799999744000123)*x808))+(((-0.000799999744000123)*x813))+(((-0.000799999744000123)*x814)));
evalcond[10]=((((0.999999680000154)*x812))+(((0.999999680000154)*x810))+(((0.999999680000154)*x809)));
evalcond[11]=((((0.999999680000154)*x814))+(((0.999999680000154)*x813))+(((-0.999999680000154)*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x820=IKcos(j5);
IkReal x821=IKsin(j5);
IkReal x822=((0.000799999744000123)*new_r02);
IkReal x823=((0.999999680000154)*new_r22);
IkReal x824=((0.999999680000154)*new_r02);
IkReal x825=((0.000799999744000123)*new_r22);
IkReal x826=((1.0)*x821);
IkReal x827=((1.0)*x820);
evalcond[0]=(((new_r02*x820))+new_r20);
evalcond[1]=((((-1.0)*x826))+new_r10);
evalcond[2]=((((-1.0)*x827))+new_r11);
evalcond[3]=(((new_r22*x821))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x826))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x827)));
evalcond[6]=((((-1.0)*new_r20*x822))+(((-1.0)*new_r20*x823))+((new_r00*x825))+(((-1.0)*new_r00*x824))+(((-0.000799999744000123)*x820)));
evalcond[7]=(((new_r01*x825))+(((0.000799999744000123)*x821))+(((-1.0)*new_r21*x822))+(((-1.0)*new_r21*x823))+(((-1.0)*new_r01*x824)));
evalcond[8]=(((new_r20*x824))+(((0.999999680000154)*x820))+(((-1.0)*new_r20*x825))+(((-1.0)*new_r00*x823))+(((-1.0)*new_r00*x822)));
evalcond[9]=(((new_r21*x824))+(((-1.0)*new_r21*x825))+(((-0.999999680000154)*x821))+(((-1.0)*new_r01*x823))+(((-1.0)*new_r01*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=new_r02;
j5eval[1]=IKsign(new_r02);
j5eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=new_r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=new_r02;
j5eval[1]=new_r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x828=IKsin(j5);
IkReal x829=IKcos(j5);
IkReal x830=(new_r01*new_r22);
IkReal x831=(new_r00*new_r22);
IkReal x832=((1.0)*x829);
evalcond[0]=((((-1.0)*x828))+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*x832))+(((-1.0)*new_r11)));
evalcond[2]=(((new_r22*x828))+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r22*x832))+(((-1.0)*new_r00)));
evalcond[4]=((((-0.000799999744000123)*x829))+(((-0.000799999744000123)*x831)));
evalcond[5]=((((0.000799999744000123)*x828))+(((-0.000799999744000123)*x830)));
evalcond[6]=((((0.999999680000154)*x829))+(((0.999999680000154)*x831)));
evalcond[7]=((((0.999999680000154)*x830))+(((-0.999999680000154)*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r22);
evalcond[1]=new_r01;
evalcond[2]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x833=IKsin(j5);
IkReal x834=IKcos(j5);
IkReal x835=(new_r02*new_r21);
IkReal x836=(new_r02*new_r20);
IkReal x837=((1.0)*x834);
evalcond[0]=(((new_r02*x833))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x837))+new_r20);
evalcond[2]=((((-1.0)*x833))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x837))+(((-1.0)*new_r11)));
evalcond[4]=((((0.000799999744000123)*x836))+(((-0.000799999744000123)*x834)));
evalcond[5]=((((0.000799999744000123)*x835))+(((0.000799999744000123)*x833)));
evalcond[6]=((((-0.999999680000154)*x836))+(((0.999999680000154)*x834)));
evalcond[7]=((((-0.999999680000154)*x835))+(((-0.999999680000154)*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x838=IKsin(j5);
IkReal x839=IKcos(j5);
IkReal x840=(new_r01*new_r22);
IkReal x841=(new_r00*new_r22);
IkReal x842=((1.0)*x839);
evalcond[0]=((((-1.0)*x838))+(((-1.0)*new_r10)));
evalcond[1]=((((-1.0)*x842))+(((-1.0)*new_r11)));
evalcond[2]=(((new_r22*x838))+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x842)));
evalcond[4]=((((-0.000799999744000123)*x841))+(((-0.000799999744000123)*x839)));
evalcond[5]=((((0.000799999744000123)*x838))+(((-0.000799999744000123)*x840)));
evalcond[6]=((((0.999999680000154)*x839))+(((0.999999680000154)*x841)));
evalcond[7]=((((-0.999999680000154)*x838))+(((0.999999680000154)*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x843=IKPowWithIntegerCheck(new_r02,-1);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844=IKPowWithIntegerCheck(new_r22,-1);
if(!x844.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x843.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x844.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x843.value)))+IKsqr(((-1.0)*new_r00*(x844.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*(x843.value)), ((-1.0)*new_r00*(x844.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x845=IKsin(j5);
IkReal x846=IKcos(j5);
IkReal x847=((0.000799999744000123)*new_r02);
IkReal x848=((0.999999680000154)*new_r22);
IkReal x849=((0.999999680000154)*new_r02);
IkReal x850=((0.000799999744000123)*new_r22);
IkReal x851=((1.0)*x846);
evalcond[0]=(((new_r02*x845))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x851)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x845)));
evalcond[3]=((((-1.0)*x851))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x845))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r22*x851))+(((-1.0)*new_r00)));
evalcond[6]=((((-1.0)*new_r00*x850))+((new_r20*x847))+(((-0.000799999744000123)*x846))+(((-1.0)*new_r20*x848))+(((-1.0)*new_r00*x849)));
evalcond[7]=((((-1.0)*new_r01*x850))+(((0.000799999744000123)*x845))+((new_r21*x847))+(((-1.0)*new_r21*x848))+(((-1.0)*new_r01*x849)));
evalcond[8]=((((-1.0)*new_r20*x850))+((new_r00*x848))+(((0.999999680000154)*x846))+(((-1.0)*new_r20*x849))+(((-1.0)*new_r00*x847)));
evalcond[9]=((((-1.0)*new_r21*x850))+(((-0.999999680000154)*x845))+((new_r01*x848))+(((-1.0)*new_r21*x849))+(((-1.0)*new_r01*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x852=IKPowWithIntegerCheck(new_r02,-1);
if(!x852.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x852.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x852.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x852.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x853=IKsin(j5);
IkReal x854=IKcos(j5);
IkReal x855=((0.000799999744000123)*new_r02);
IkReal x856=((0.999999680000154)*new_r22);
IkReal x857=((0.999999680000154)*new_r02);
IkReal x858=((0.000799999744000123)*new_r22);
IkReal x859=((1.0)*x854);
evalcond[0]=(((new_r02*x853))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x859)));
evalcond[2]=((((-1.0)*x853))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x859))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x853)));
evalcond[5]=((((-1.0)*new_r22*x859))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r20*x855))+(((-0.000799999744000123)*x854))+(((-1.0)*new_r20*x856))+(((-1.0)*new_r00*x858))+(((-1.0)*new_r00*x857)));
evalcond[7]=((((-1.0)*new_r21*x856))+(((-1.0)*new_r01*x858))+(((-1.0)*new_r01*x857))+((new_r21*x855))+(((0.000799999744000123)*x853)));
evalcond[8]=((((-1.0)*new_r20*x857))+(((-1.0)*new_r20*x858))+(((-1.0)*new_r00*x855))+((new_r00*x856))+(((0.999999680000154)*x854)));
evalcond[9]=((((-1.0)*new_r21*x858))+(((-1.0)*new_r21*x857))+(((-1.0)*new_r01*x855))+(((-0.999999680000154)*x853))+((new_r01*x856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x861.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x860.value)+(((1.5707963267949)*(x861.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x862=IKsin(j5);
IkReal x863=IKcos(j5);
IkReal x864=((0.000799999744000123)*new_r02);
IkReal x865=((0.999999680000154)*new_r22);
IkReal x866=((0.999999680000154)*new_r02);
IkReal x867=((0.000799999744000123)*new_r22);
IkReal x868=((1.0)*x863);
evalcond[0]=(((new_r02*x862))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x868)));
evalcond[2]=((((-1.0)*x862))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x868))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x862))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r22*x868))+(((-1.0)*new_r00)));
evalcond[6]=((((-0.000799999744000123)*x863))+(((-1.0)*new_r00*x866))+(((-1.0)*new_r00*x867))+((new_r20*x864))+(((-1.0)*new_r20*x865)));
evalcond[7]=((((-1.0)*new_r21*x865))+(((-1.0)*new_r01*x866))+(((-1.0)*new_r01*x867))+(((0.000799999744000123)*x862))+((new_r21*x864)));
evalcond[8]=(((new_r00*x865))+(((-1.0)*new_r00*x864))+(((-1.0)*new_r20*x867))+(((-1.0)*new_r20*x866))+(((0.999999680000154)*x863)));
evalcond[9]=(((new_r01*x865))+(((-1.0)*new_r21*x866))+(((-1.0)*new_r21*x867))+(((-1.0)*new_r01*x864))+(((-0.999999680000154)*x862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x870=IKPowWithIntegerCheck(sj4,-1);
if(!x870.valid){
continue;
}
IkReal x869=x870.value;
CheckValue<IkReal> x871=IKPowWithIntegerCheck(cj3,-1);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(cj4,-1);
if(!x872.valid){
continue;
}
if( IKabs((x869*(x871.value)*(x872.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x869)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x869*(x871.value)*(x872.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x869))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x869*(x871.value)*(x872.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x869));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x873=IKsin(j5);
IkReal x874=IKcos(j5);
IkReal x875=((0.999999680000154)*sj4);
IkReal x876=((0.000799999744000123)*sj3);
IkReal x877=(cj3*cj4);
IkReal x878=(cj4*new_r10);
IkReal x879=(cj3*new_r00);
IkReal x880=((0.999999680000154)*sj3);
IkReal x881=((1.0)*sj3);
IkReal x882=(cj4*new_r11);
IkReal x883=((0.999999680000154)*cj4);
IkReal x884=(new_r11*sj3);
IkReal x885=(new_r10*sj3);
IkReal x886=(cj3*new_r01);
IkReal x887=((0.000799999744000123)*cj4);
IkReal x888=((0.000799999744000123)*sj4);
IkReal x889=(sj3*x873);
IkReal x890=((1.0)*x874);
IkReal x891=((1.0)*x873);
evalcond[0]=(((sj4*x874))+new_r20);
evalcond[1]=((((-1.0)*sj4*x891))+new_r21);
evalcond[2]=(((cj4*x873))+x884+x886);
evalcond[3]=((((-1.0)*x891))+(((-1.0)*new_r00*x881))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x890))+(((-1.0)*new_r01*x881))+((cj3*new_r11)));
evalcond[5]=(((sj3*x874))+((x873*x877))+new_r01);
evalcond[6]=((((-1.0)*cj4*x890))+x879+x885);
evalcond[7]=((((-1.0)*x877*x890))+new_r00+x889);
evalcond[8]=((((-1.0)*cj3*x890))+((cj4*x889))+new_r11);
evalcond[9]=((((-1.0)*cj3*x891))+new_r10+(((-1.0)*cj4*x874*x881)));
evalcond[10]=(((x876*x878))+(((-1.0)*new_r20*x883))+(((-1.0)*new_r20*x888))+(((-1.0)*x875*x879))+(((0.000799999744000123)*new_r00*x877))+(((-1.0)*x875*x885))+(((-0.000799999744000123)*x874)));
evalcond[11]=(((x876*x882))+(((-1.0)*new_r21*x883))+(((-1.0)*new_r21*x888))+(((0.000799999744000123)*new_r01*x877))+(((0.000799999744000123)*x873))+(((-1.0)*x875*x884))+(((-1.0)*x875*x886)));
evalcond[12]=((((0.999999680000154)*x874))+(((-1.0)*x879*x888))+(((-0.999999680000154)*new_r00*x877))+((new_r20*x875))+(((-1.0)*new_r20*x887))+(((-1.0)*new_r10*sj4*x876))+(((-1.0)*x878*x880)));
evalcond[13]=((((-1.0)*x886*x888))+(((-1.0)*new_r21*x887))+(((-0.999999680000154)*new_r01*x877))+(((-1.0)*new_r11*sj4*x876))+(((-0.999999680000154)*x873))+((new_r21*x875))+(((-1.0)*x880*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x893=IKPowWithIntegerCheck(sj4,-1);
if(!x893.valid){
continue;
}
IkReal x892=x893.value;
CheckValue<IkReal> x894=IKPowWithIntegerCheck(sj3,-1);
if(!x894.valid){
continue;
}
if( IKabs((x892*(x894.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x892)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x892*(x894.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x892))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x892*(x894.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x892));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x895=IKsin(j5);
IkReal x896=IKcos(j5);
IkReal x897=((0.999999680000154)*sj4);
IkReal x898=((0.000799999744000123)*sj3);
IkReal x899=(cj3*cj4);
IkReal x900=(cj4*new_r10);
IkReal x901=(cj3*new_r00);
IkReal x902=((0.999999680000154)*sj3);
IkReal x903=((1.0)*sj3);
IkReal x904=(cj4*new_r11);
IkReal x905=((0.999999680000154)*cj4);
IkReal x906=(new_r11*sj3);
IkReal x907=(new_r10*sj3);
IkReal x908=(cj3*new_r01);
IkReal x909=((0.000799999744000123)*cj4);
IkReal x910=((0.000799999744000123)*sj4);
IkReal x911=(sj3*x895);
IkReal x912=((1.0)*x896);
IkReal x913=((1.0)*x895);
evalcond[0]=(((sj4*x896))+new_r20);
evalcond[1]=((((-1.0)*sj4*x913))+new_r21);
evalcond[2]=(((cj4*x895))+x906+x908);
evalcond[3]=((((-1.0)*x913))+(((-1.0)*new_r00*x903))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x912))+((cj3*new_r11))+(((-1.0)*new_r01*x903)));
evalcond[5]=(((x895*x899))+((sj3*x896))+new_r01);
evalcond[6]=((((-1.0)*cj4*x912))+x907+x901);
evalcond[7]=(new_r00+(((-1.0)*x899*x912))+x911);
evalcond[8]=((((-1.0)*cj3*x912))+((cj4*x911))+new_r11);
evalcond[9]=((((-1.0)*cj3*x913))+(((-1.0)*cj4*x896*x903))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x905))+(((-1.0)*x897*x907))+(((-1.0)*x897*x901))+(((-1.0)*new_r20*x910))+(((0.000799999744000123)*new_r00*x899))+((x898*x900))+(((-0.000799999744000123)*x896)));
evalcond[11]=((((0.000799999744000123)*new_r01*x899))+(((-1.0)*new_r21*x910))+(((-1.0)*x897*x908))+(((-1.0)*x897*x906))+(((-1.0)*new_r21*x905))+(((0.000799999744000123)*x895))+((x898*x904)));
evalcond[12]=((((-1.0)*x900*x902))+(((-1.0)*new_r20*x909))+(((0.999999680000154)*x896))+(((-1.0)*new_r10*sj4*x898))+(((-0.999999680000154)*new_r00*x899))+((new_r20*x897))+(((-1.0)*x901*x910)));
evalcond[13]=((((-0.999999680000154)*new_r01*x899))+(((-1.0)*x908*x910))+(((-1.0)*x902*x904))+((new_r21*x897))+(((-1.0)*new_r11*sj4*x898))+(((-1.0)*new_r21*x909))+(((-0.999999680000154)*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x914.value)))+(x915.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x916=IKsin(j5);
IkReal x917=IKcos(j5);
IkReal x918=((0.999999680000154)*sj4);
IkReal x919=((0.000799999744000123)*sj3);
IkReal x920=(cj3*cj4);
IkReal x921=(cj4*new_r10);
IkReal x922=(cj3*new_r00);
IkReal x923=((0.999999680000154)*sj3);
IkReal x924=((1.0)*sj3);
IkReal x925=(cj4*new_r11);
IkReal x926=((0.999999680000154)*cj4);
IkReal x927=(new_r11*sj3);
IkReal x928=(new_r10*sj3);
IkReal x929=(cj3*new_r01);
IkReal x930=((0.000799999744000123)*cj4);
IkReal x931=((0.000799999744000123)*sj4);
IkReal x932=(sj3*x916);
IkReal x933=((1.0)*x917);
IkReal x934=((1.0)*x916);
evalcond[0]=(new_r20+((sj4*x917)));
evalcond[1]=((((-1.0)*sj4*x934))+new_r21);
evalcond[2]=(((cj4*x916))+x929+x927);
evalcond[3]=((((-1.0)*new_r00*x924))+((cj3*new_r10))+(((-1.0)*x934)));
evalcond[4]=((((-1.0)*new_r01*x924))+((cj3*new_r11))+(((-1.0)*x933)));
evalcond[5]=(((x916*x920))+((sj3*x917))+new_r01);
evalcond[6]=((((-1.0)*cj4*x933))+x928+x922);
evalcond[7]=((((-1.0)*x920*x933))+new_r00+x932);
evalcond[8]=((((-1.0)*cj3*x933))+new_r11+((cj4*x932)));
evalcond[9]=((((-1.0)*cj3*x934))+new_r10+(((-1.0)*cj4*x917*x924)));
evalcond[10]=((((-0.000799999744000123)*x917))+((x919*x921))+(((0.000799999744000123)*new_r00*x920))+(((-1.0)*x918*x922))+(((-1.0)*x918*x928))+(((-1.0)*new_r20*x931))+(((-1.0)*new_r20*x926)));
evalcond[11]=((((-1.0)*new_r21*x926))+(((-1.0)*new_r21*x931))+((x919*x925))+(((0.000799999744000123)*new_r01*x920))+(((-1.0)*x918*x929))+(((-1.0)*x918*x927))+(((0.000799999744000123)*x916)));
evalcond[12]=((((-1.0)*x921*x923))+((new_r20*x918))+(((-1.0)*new_r10*sj4*x919))+(((-1.0)*new_r20*x930))+(((-0.999999680000154)*new_r00*x920))+(((-1.0)*x922*x931))+(((0.999999680000154)*x917)));
evalcond[13]=((((-1.0)*new_r21*x930))+(((-0.999999680000154)*x916))+(((-1.0)*new_r11*sj4*x919))+((new_r21*x918))+(((-0.999999680000154)*new_r01*x920))+(((-1.0)*x929*x931))+(((-1.0)*x923*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mara (2b11a7a0a24e8488e40b03aa90e53c61)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
